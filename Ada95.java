/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ada95.flex</tt>
 */
class Ada95 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int IMPORTS = 4;
  public static final int PROC = 6;
  public static final int ENDPROC = 8;
  public static final int COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\64\1\66\1\66\1\64\24\0\1\45\1\46\2\0\1\47"+
    "\1\50\1\51\1\52\1\41\1\53\1\54\1\65\1\3\1\43\12\2"+
    "\1\42\1\55\1\44\1\37\1\40\2\0\1\11\1\15\1\24\1\25"+
    "\1\7\1\10\1\32\1\31\1\22\1\1\1\34\1\12\1\35\1\17"+
    "\1\16\1\26\1\36\1\5\1\14\1\4\1\6\1\23\1\20\1\30"+
    "\1\27\1\1\1\60\1\0\1\61\1\0\1\56\1\0\1\11\1\15"+
    "\1\24\1\25\1\7\1\10\1\32\1\31\1\22\1\1\1\34\1\12"+
    "\1\35\1\17\1\16\1\26\1\36\1\5\1\14\1\4\1\6\1\23"+
    "\1\20\1\30\1\27\1\1\1\62\1\57\1\63\7\0\1\66\252\0"+
    "\2\21\115\0\1\13\u1ea8\0\1\66\1\66\u0100\0\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\7\2\1\1\5\2"+
    "\1\1\7\2\2\5\1\6\1\7\1\6\1\5\1\1"+
    "\1\10\1\11\1\12\1\13\1\14\1\6\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\6"+
    "\1\25\1\0\1\26\17\2\1\27\6\2\1\0\1\2"+
    "\3\0\6\2\1\30\1\2\1\31\4\2\1\32\1\33"+
    "\1\34\1\32\1\33\1\34\3\2\1\35\1\0\7\2"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\0"+
    "\1\45\2\0\1\46\1\3\2\2\1\0\10\2\1\47"+
    "\2\2\1\0\2\2\1\0\2\2\1\50\1\0\5\2"+
    "\1\51\1\2\1\52\1\0\1\2\2\53\1\2\1\54"+
    "\2\2\1\0\1\2\4\0\10\2\1\55\1\2\1\56"+
    "\1\57\1\2\1\0\1\2\1\0\1\2\1\0\5\2"+
    "\1\0\3\2\1\0\1\2\1\60\1\61\1\62\2\2"+
    "\1\63\1\64\1\65\1\2\2\66\1\2\1\67\1\70"+
    "\6\2\1\0\1\2\1\0\1\2\1\71\1\0\1\71"+
    "\2\2\2\72\2\2\1\0\3\2\1\0\1\2\1\0"+
    "\3\2\1\73\1\0\1\2\4\0\4\2\1\0\2\2"+
    "\1\74\1\2\1\75\1\76\1\0\1\2\1\0\1\2"+
    "\2\77\1\0\5\2\1\0\4\2\1\0\2\2\1\100"+
    "\1\0\7\2\1\101\2\102\2\103\2\104\1\105\2\2"+
    "\2\106\1\107\1\110\1\0\1\2\1\0\1\2\1\111"+
    "\1\0\2\2\1\0\1\2\4\0\4\2\2\112\2\2"+
    "\2\113\1\0\1\2\1\0\1\2\1\114\1\115\2\2"+
    "\1\0\4\2\1\0\2\2\1\0\1\2\1\116\1\117"+
    "\1\2\1\0\1\2\1\120\2\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\2\121\1\122\1\0\1\2\1\107"+
    "\1\0\1\123\1\0\1\2\1\123\2\2\2\124\1\0"+
    "\1\2\1\0\2\2\2\125\1\126\2\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\127\2\130\1\131\1\0"+
    "\1\2\1\0\1\2\2\132\1\0\1\2\2\133\1\134"+
    "\1\0\1\134\1\2\1\0\1\2\1\135\2\2\2\136"+
    "\2\137\1\0\1\2\1\0\1\2\2\140\2\141\2\142"+
    "\2\143\2\2\2\144\2\145\1\146\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\156\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\u074e\0\u0785\0\u07bc\0\156\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\245\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\245"+
    "\0\u0ed3\0\245\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\156\0\156"+
    "\0\u0fe6\0\245\0\245\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\u0717"+
    "\0\u0717\0\u12e8\0\u0785\0\u0785\0\u07bc\0\u131f\0\u1356\0\u138d"+
    "\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545"+
    "\0\245\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\245\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\245\0\u187e\0\245\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\245\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\245\0\u1d38\0\245\0\245\0\u1d6f\0\u1da6\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\245\0\245"+
    "\0\245\0\u2116\0\u214d\0\245\0\156\0\245\0\u2184\0\156"+
    "\0\245\0\u21bb\0\245\0\245\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\156\0\u2418"+
    "\0\245\0\u244f\0\u2486\0\156\0\245\0\u24bd\0\u24f4\0\u252b"+
    "\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3"+
    "\0\u271a\0\245\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\245"+
    "\0\u2a1c\0\245\0\245\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\156"+
    "\0\245\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\245"+
    "\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2"+
    "\0\245\0\156\0\245\0\156\0\245\0\156\0\245\0\245"+
    "\0\u2fe9\0\u3020\0\156\0\245\0\245\0\245\0\u3057\0\u308e"+
    "\0\u30c5\0\u30fc\0\245\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\156\0\245\0\u33fe\0\u3435\0\156\0\245\0\u346c\0\u34a3"+
    "\0\u34da\0\u3511\0\245\0\245\0\u3548\0\u357f\0\u35b6\0\u35ed"+
    "\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5"+
    "\0\245\0\245\0\u37dc\0\u3813\0\u384a\0\245\0\u3881\0\u38b8"+
    "\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\156\0\245"+
    "\0\245\0\u3a39\0\u3a70\0\156\0\u3aa7\0\156\0\u3ade\0\u3b15"+
    "\0\245\0\u3b4c\0\u3b83\0\156\0\245\0\u3bba\0\u3bf1\0\u3c28"+
    "\0\u3c5f\0\u3c96\0\156\0\245\0\245\0\u3ccd\0\u3d04\0\u3d3b"+
    "\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\156\0\245\0\156"+
    "\0\245\0\245\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\156\0\245"+
    "\0\u3f61\0\u3f98\0\156\0\245\0\156\0\u3fcf\0\245\0\u4006"+
    "\0\u403d\0\u4074\0\245\0\u40ab\0\u40e2\0\156\0\245\0\156"+
    "\0\245\0\u4119\0\u4150\0\u4187\0\u41be\0\156\0\245\0\156"+
    "\0\245\0\156\0\245\0\156\0\245\0\u41f5\0\u422c\0\156"+
    "\0\245\0\156\0\245\0\245\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\5\1\27\1\30\1\31\1\5"+
    "\1\32\1\5\1\33\1\4\1\5\1\34\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\0\45\62"+
    "\1\64\16\62\1\0\1\62\71\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\1\6"+
    "\1\65\66\0\1\66\64\0\2\5\1\0\1\5\1\67"+
    "\1\5\1\70\1\5\1\71\1\5\1\0\5\5\1\0"+
    "\5\5\1\72\1\5\1\73\1\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\74\1\5\1\75\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\3\5\1\76\1\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\6\5\1\77\1\0\3\5"+
    "\1\100\1\5\1\0\6\5\1\101\2\5\1\0\3\5"+
    "\31\0\2\5\1\0\2\5\1\102\2\5\1\103\1\104"+
    "\1\0\2\5\1\105\2\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\106\1\107\4\5\1\110\1\0"+
    "\1\5\1\111\1\5\1\112\1\5\1\0\2\5\1\113"+
    "\6\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\2\5\1\114\2\5\1\115\1\116\10\5\1\0\3\5"+
    "\34\0\1\117\1\0\1\120\1\121\60\0\2\5\1\0"+
    "\1\122\1\5\1\123\1\124\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\3\5\1\125"+
    "\3\5\1\0\2\5\1\126\2\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\127\1\130\1\131\1\5"+
    "\1\132\2\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\2\5\1\133\1\134\3\5\1\0"+
    "\2\5\1\135\2\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\7\5\1\136"+
    "\1\5\1\0\3\5\40\0\1\137\2\0\2\140\2\0"+
    "\1\141\50\0\2\5\1\0\4\5\1\142\2\5\1\140"+
    "\1\143\2\5\1\144\1\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\5\5\1\145\1\5\1\0\2\5"+
    "\1\146\2\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\147\3\5\1\0\2\5\1\150\2\5"+
    "\1\151\1\152\10\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\5\1\153\1\154\4\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\2\5"+
    "\1\155\2\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\156\3\5\1\0\2\5\1\157\2\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\2\5\1\160\2\5\1\0\11\5\1\0\3\5"+
    "\70\0\1\161\66\0\1\162\67\0\1\163\64\0\1\164"+
    "\66\0\1\165\67\0\1\166\3\0\1\167\22\0\45\170"+
    "\1\171\16\170\1\0\1\170\66\0\1\172\1\0\45\173"+
    "\1\174\16\173\1\0\1\173\3\0\1\175\65\0\2\5"+
    "\1\0\2\5\1\176\4\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\5\1\177\5\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\200\1\201\4\5\1\0\10\5\1\202"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\4\5\1\203\4\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\204\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\205\6\5\1\0"+
    "\3\5\1\206\1\5\1\0\1\5\1\207\1\210\6\5"+
    "\1\0\1\5\1\211\1\212\31\0\2\5\1\0\7\5"+
    "\1\0\3\5\1\213\1\5\1\214\1\215\10\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\216\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\217\1\220\4\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\221\6\5\1\0\5\5\1\0\3\5"+
    "\1\222\5\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\223\1\224\1\5\1\225\6\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\3\5\1\226"+
    "\1\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\6\5\1\227\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\2\5\1\230\2\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\5"+
    "\1\231\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\5\1\232\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\6\5"+
    "\1\233\1\0\5\5\1\234\1\235\10\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\236\1\237\1\5\1\240"+
    "\2\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\3\5\1\241\5\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\2\5\1\242\6\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\2\5\1\243\2\5\1\0\11\5\1\0"+
    "\3\5\65\0\1\244\32\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\1\5\1\245\1\5\35\0"+
    "\1\246\76\0\1\247\63\0\1\250\13\0\1\251\41\0"+
    "\2\5\1\0\1\5\1\252\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\1\5\1\253\3\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\6\5\1\254\1\0\5\5\1\0\4\5"+
    "\1\255\4\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\10\5\1\256\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\257\2\5\1\0"+
    "\3\5\1\260\5\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\7\5\1\261\1\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\262\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\6\5"+
    "\1\263\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\4\5\1\264\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\265\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\3\5\1\266\3\5\1\0\5\5\1\267\1\270\10\5"+
    "\1\0\3\5\34\0\1\271\63\0\2\5\1\0\1\272"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\273\1\274\4\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\275\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\6\5\1\276\1\0\5\5\1\0\2\5\1\277"+
    "\6\5\1\0\3\5\31\0\2\5\1\0\2\5\1\300"+
    "\4\5\1\0\5\5\1\0\11\5\1\0\3\5\62\0"+
    "\1\301\35\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\302\1\0\3\5\31\0\2\5\1\0\5\5"+
    "\1\303\1\5\1\0\2\5\1\304\2\5\1\305\1\306"+
    "\10\5\1\0\3\5\31\0\2\5\1\0\1\307\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\1\5\1\310\5\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\311\6\5\1\0"+
    "\3\5\1\312\1\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\313\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\3\5\1\314\5\5\1\0\3\5\30\0\64\172"+
    "\1\315\1\172\2\0\2\5\1\0\3\5\1\316\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\11\5\1\0\1\5"+
    "\1\317\1\5\63\0\2\320\33\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\11\5\1\320\1\321\2\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\10\5\1\322"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\323\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\3\5\1\324\1\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\2\5\1\325\4\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\326\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\327\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\2\5\1\330\2\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\2\5\1\331\4\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\10\5\1\332\1\0"+
    "\3\5\43\0\2\333\53\0\2\5\1\0\7\5\1\333"+
    "\1\334\4\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\335\1\336\10\5\1\0"+
    "\3\5\37\0\1\337\11\0\2\340\45\0\2\5\1\0"+
    "\3\5\1\341\3\5\1\0\5\5\1\340\1\342\10\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\5\1\343\5\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\34\0\1\344"+
    "\63\0\2\5\1\0\1\345\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\3\5\1\346"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\2\5\1\347"+
    "\6\5\1\0\3\5\31\0\2\5\1\0\7\5\1\350"+
    "\1\351\4\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\352\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\5\5\1\353\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\41\0\1\354"+
    "\56\0\2\5\1\0\5\5\1\355\1\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\34\0\1\356\63\0\2\5"+
    "\1\0\1\357\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\5\1\360\5\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\3\5\1\361\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\4\5\1\362\4\5\1\0\3\5\51\0\2\363\45\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\363\1\364\10\5"+
    "\1\0\3\5\51\0\2\365\50\0\1\366\71\0\1\367"+
    "\70\0\1\370\56\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\365\1\371\10\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\372\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\373\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\5\5"+
    "\1\374\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\375\1\376"+
    "\10\5\1\0\3\5\31\0\2\5\1\0\6\5\1\377"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\5\5\1\u0100\3\5"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\u0101\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\6\5\1\u0102\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\3\5\1\u0103"+
    "\1\5\1\0\11\5\1\0\3\5\42\0\1\u0104\55\0"+
    "\2\5\1\0\6\5\1\u0105\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\37\0\1\u0106\60\0\2\5\1\0\3\5"+
    "\1\u0107\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\37\0\1\u0108\60\0\2\5\1\0\3\5\1\u0109\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\u010a\1\u010b\4\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\u010c\4\5\1\u010d\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\6\5\1\u010e\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\1\5\1\u010f"+
    "\3\5\1\0\11\5\1\0\3\5\51\0\2\u0110\45\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\u0110\1\u0111\10\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\10\5\1\u0112\1\0\3\5\31\0\2\5\1\0"+
    "\1\u0113\6\5\1\0\5\5\1\0\2\5\1\u0114\6\5"+
    "\1\0\3\5\53\0\1\u0115\44\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\1\5\1\u0116\7\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u0117\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\2\5\1\u0118\2\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\u0119\1\u011a"+
    "\10\5\1\0\3\5\31\0\2\5\1\0\3\5\1\u011b"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\5\1\u011c\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\1\5\1\u011d\1\5\31\0"+
    "\2\5\1\0\1\5\1\u011e\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\5\1\u011f"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\u0120\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\3\5\1\u0121"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\37\0"+
    "\1\u0122\60\0\2\5\1\0\3\5\1\u0123\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\42\0\1\u0124\55\0"+
    "\2\5\1\0\6\5\1\u0125\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\40\0\1\u0126\57\0\2\5\1\0\4\5"+
    "\1\u0127\2\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\5\5"+
    "\1\u0128\3\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\4\5\1\u0129\4\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\u012a\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\37\0\1\u012b\60\0\2\5\1\0"+
    "\3\5\1\u012c\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\u012d\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\5\5\1\u012e\3\5\1\0\3\5"+
    "\43\0\2\u012f\53\0\2\5\1\0\7\5\1\u012f\1\u0130"+
    "\4\5\1\0\11\5\1\0\3\5\35\0\1\u0131\62\0"+
    "\2\5\1\0\1\5\1\u0132\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\u0133\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\u0134\1\u0135\4\5\1\0\4\5\1\u0136"+
    "\4\5\1\0\3\5\34\0\1\u0137\63\0\2\5\1\0"+
    "\1\u0138\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\47\0\1\u0139\76\0\1\u013a\63\0\1\u013b\47\0\1\u013c"+
    "\62\0\2\5\1\0\7\5\1\0\3\5\1\u013d\1\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\5\5\1\u013e\3\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\2\5"+
    "\1\u013f\6\5\1\0\3\5\31\0\2\5\1\0\1\5"+
    "\1\u0140\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\47\0\1\u0141\50\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u0142\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\u0143\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\5\1\u0144\5\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\37\0\1\u0145"+
    "\60\0\2\5\1\0\3\5\1\u0146\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\62\0\1\u0147\35\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\10\5\1\u0148\1\0"+
    "\3\5\34\0\1\u0149\63\0\2\5\1\0\1\u014a\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\u014b\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\5\5\1\u014c\3\5\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\u014d\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\6\5\1\u014e\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\34\0\1\u014f\63\0"+
    "\2\5\1\0\1\u0150\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\11\5\1\0\1\5\1\u0151\1\5\31\0\2\5"+
    "\1\0\3\5\1\u0152\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\u0153\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\41\0\1\u0154"+
    "\56\0\2\5\1\0\5\5\1\u0155\1\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\5"+
    "\1\u0156\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\47\0\1\u0157\50\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u0158\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u0159\5\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u015a\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\u015b\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\u015c\1\u015d"+
    "\4\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\3\5\1\u015e\5\5\1\0"+
    "\3\5\31\0\2\5\1\0\2\5\1\u015f\4\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\u0160\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\u0161\1\u0162"+
    "\10\5\1\0\3\5\37\0\1\u0163\60\0\2\5\1\0"+
    "\3\5\1\u0164\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\41\0\1\u0165\56\0\2\5\1\0\5\5\1\u0166"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\43\0"+
    "\2\u0167\53\0\2\5\1\0\7\5\1\u0167\1\u0168\4\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\u0169"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\37\0"+
    "\1\u016a\60\0\2\5\1\0\3\5\1\u016b\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\62\0\1\u016c\62\0"+
    "\1\u016d\44\0\1\u016e\73\0\1\u016f\56\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\10\5\1\u012d\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\4\5"+
    "\1\u0170\4\5\1\0\3\5\31\0\2\5\1\0\1\u0171"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\5\5\1\u0172\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\5\5\1\u0173"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\u0174\1\u0175\4\5\1\0\11\5"+
    "\1\0\3\5\37\0\1\u0176\60\0\2\5\1\0\3\5"+
    "\1\u0177\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\41\0\1\u0178\56\0\2\5\1\0\5\5\1\u0179\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\1\5\1\u017a\5\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\u012d\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\43\0\2\u017b"+
    "\53\0\2\5\1\0\7\5\1\u017b\1\u017c\4\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\5\5\1\u017d"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\2\5\1\u017e"+
    "\6\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\3\5\1\u017f\5\5\1\0\3\5\34\0"+
    "\1\u0180\63\0\2\5\1\0\1\u0181\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\u0182\1\u0183\10\5\1\0\3\5\41\0"+
    "\1\u0184\56\0\2\5\1\0\5\5\1\u0185\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\u0186\1\u0187\4\5\1\0\11\5\1\0\3\5"+
    "\37\0\1\u0188\60\0\2\5\1\0\3\5\1\u0189\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\u018a\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\u018b\1\u018c\10\5\1\0\3\5\46\0\1\u018d\51\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\u018e\2\5\1\0"+
    "\11\5\1\0\3\5\55\0\1\u018f\42\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\3\5\1\u0190\5\5\1\0"+
    "\3\5\54\0\1\u0191\43\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\2\5\1\u0192\6\5\1\0\3\5\55\0"+
    "\1\u0193\42\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\3\5\1\u0194\5\5\1\0\3\5\37\0\1\u0195\63\0"+
    "\1\u0196\63\0\2\5\1\0\3\5\1\u0197\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\u0198\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\3\5\1\u012d\1\5"+
    "\1\0\11\5\1\0\3\5\35\0\1\u016c\62\0\2\5"+
    "\1\0\1\5\1\u012d\5\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\47\0\1\u0199\50\0\2\5\1\0\7\5"+
    "\1\0\3\5\1\u019a\1\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u019b\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\u019c"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\2\5\1\u019d\4\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\37\0\1\u019e\60\0\2\5\1\0"+
    "\3\5\1\u019f\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\54\0\1\u01a0\43\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\2\5\1\u01a1\6\5\1\0\3\5\34\0"+
    "\1\u01a2\63\0\2\5\1\0\1\u01a3\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\46\0\1\u01a4\51\0\2\5"+
    "\1\0\7\5\1\0\2\5\1\u01a5\2\5\1\0\11\5"+
    "\1\0\3\5\47\0\1\u01a6\50\0\2\5\1\0\7\5"+
    "\1\0\3\5\1\u01a7\1\5\1\0\11\5\1\0\3\5"+
    "\34\0\1\u01a8\63\0\2\5\1\0\1\u01a9\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\37\0\1\u01aa\60\0"+
    "\2\5\1\0\3\5\1\u01ab\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\34\0\1\u01ac\63\0\2\5\1\0"+
    "\1\u01ad\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u01ae\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\5"+
    "\1\u01af\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\37\0\1\u01b0\60\0\2\5\1\0\3\5\1\u01b1\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\47\0\1\u01b2"+
    "\50\0\2\5\1\0\7\5\1\0\3\5\1\u01b3\1\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\3\5\1\u01b4\5\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u01b5\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16995];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\37\1\17\11\2\1\1\0\1\11"+
    "\26\1\1\0\1\1\3\0\15\1\2\11\10\1\1\0"+
    "\7\1\7\11\1\0\1\1\2\0\4\1\1\0\13\1"+
    "\1\0\2\1\1\0\3\1\1\0\10\1\1\0\7\1"+
    "\1\0\1\1\4\0\15\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\0\3\1\1\0\7\1\1\11\2\1"+
    "\1\11\12\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\3\1\1\11\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\4\0\4\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\0\10\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\4\0\4\1\1\11"+
    "\3\1\1\11\1\1\1\0\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\2\1\1\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\1\1\11\1\0\1\11\1\0\4\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private String currentText="";
  public String getCurrentText(){return currentText;}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Ada95(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* System.out.println("No se reconoce: " + yytext()); */
            }
          case 104: break;
          case 2: 
            { currentText=yytext(); return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 3: 
            { currentText=yytext(); return new Symbol(sym.NUM, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 4: 
            { currentText=yytext(); return new Symbol(sym.PUNTO, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 5: 
            { currentText=yytext(); return new Symbol(sym.OPREL, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 6: 
            { currentText=yytext(); return new Symbol(sym.OP, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 7: 
            { currentText=yytext(); return new Symbol(sym.DOS, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 8: 
            { currentText=yytext(); return new Symbol(sym.NS, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 9: 
            { currentText=yytext(); return new Symbol(sym.AM, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 10: 
            { currentText=yytext(); return new Symbol(sym.AP, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 11: 
            { currentText=yytext(); return new Symbol(sym.LP, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 12: 
            { currentText=yytext(); return new Symbol(sym.RP, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 13: 
            { currentText=yytext(); return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 14: 
            { currentText=yytext(); return new Symbol(sym.PC, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 15: 
            { currentText=yytext(); return new Symbol(sym.GUINB, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 16: 
            { currentText=yytext(); return new Symbol(sym.VERTICAL, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 17: 
            { currentText=yytext(); return new Symbol(sym.LSQB, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 18: 
            { currentText=yytext(); return new Symbol(sym.RSQB, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 19: 
            { currentText=yytext(); return new Symbol(sym.LCB, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 20: 
            { currentText=yytext(); return new Symbol(sym.RCB, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 21: 
            { 
            }
          case 124: break;
          case 22: 
            { currentText=yytext(); return new Symbol(sym.DOUBD, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 23: 
            { currentText=yytext(); return new Symbol(sym.AT, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 24: 
            { currentText=yytext(); return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 25: 
            { currentText=yytext(); return new Symbol(sym.OF, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 26: 
            { currentText=yytext(); return new Symbol(sym.IF, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 27: 
            { currentText=yytext(); return new Symbol(sym.IS, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 28: 
            { currentText=yytext(); return new Symbol(sym.IN, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 29: 
            { currentText=yytext(); return new Symbol(sym.DO, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 30: 
            { currentText=yytext(); return new Symbol(sym.ARROW, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 31: 
            { currentText=yytext(); return new Symbol(sym.RLB, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 32: 
            { currentText=yytext(); return new Symbol(sym.DOUBAPS, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 33: 
            { currentText=yytext(); return new Symbol(sym.ASSIGN, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 34: 
            { currentText=yytext(); return new Symbol(sym.NOTEQ, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 35: 
            { currentText=yytext(); return new Symbol(sym.BOX, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 36: 
            { currentText=yytext(); return new Symbol(sym.LLB, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 37: 
            { currentText=yytext(); return new Symbol(sym.EXP, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 38: 
            { System.out.print(yytext());
            }
          case 141: break;
          case 39: 
            { currentText=yytext(); return new Symbol(sym.REM, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 40: 
            { currentText=yytext(); return new Symbol(sym.END, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 41: 
            { currentText=yytext(); return new Symbol(sym.FOR, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 42: 
            { currentText=yytext(); return new Symbol(sym.ALL, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 43: 
            { currentText=yytext(); return new Symbol(sym.ABS, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 44: 
            { currentText=yytext(); return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 45: 
            { currentText=yytext(); return new Symbol(sym.OUT, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 46: 
            { currentText=yytext(); return new Symbol(sym.NEW, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 47: 
            { currentText=yytext(); return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 48: 
            { currentText=yytext(); return new Symbol(sym.PUT, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 49: 
            { currentText=yytext(); return new Symbol(sym.XOR, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 50: 
            { currentText=yytext(); return new Symbol(sym.GET, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 51: 
            { currentText=yytext(); return new Symbol(sym.MOD, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 52: 
            { /* currentText=yytext(); return new Symbol(sym.COMMENT, yycolumn, yyline, yytext()); */
            }
          case 155: break;
          case 53: 
            { currentText=yytext(); return new Symbol(sym.TRUE, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 54: 
            { currentText=yytext(); return new Symbol(sym.TASK, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 55: 
            { currentText=yytext(); return new Symbol(sym.TYPE, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 56: 
            { currentText=yytext(); return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 57: 
            { currentText=yytext(); return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 58: 
            { currentText=yytext(); return new Symbol(sym.EXIT, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 59: 
            { currentText=yytext(); return new Symbol(sym.LOOP, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 60: 
            { currentText=yytext(); return new Symbol(sym.BODY, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 61: 
            { currentText=yytext(); return new Symbol(sym.NULL, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 62: 
            { currentText=yytext(); return new Symbol(sym.WHEN, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 63: 
            { currentText=yytext(); return new Symbol(sym.CASE, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 64: 
            { currentText=yytext(); return new Symbol(sym.GOTO, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 65: 
            { currentText=yytext(); return new Symbol(sym.RANGE, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 66: 
            { currentText=yytext(); return new Symbol(sym.RAISE, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 67: 
            { currentText=yytext(); return new Symbol(sym.UNTIL, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 68: 
            { currentText=yytext(); return new Symbol(sym.ELSIF, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 69: 
            { currentText=yytext(); return new Symbol(sym.ENTRY, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 70: 
            { currentText=yytext(); return new Symbol(sym.FALSE, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 71: 
            { currentText=yytext(); return new Symbol(sym.DATATYPES, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 72: 
            { currentText=yytext(); return new Symbol(sym.ARRAY, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 73: 
            { currentText=yytext(); return new Symbol(sym.ABORT, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 74: 
            { currentText=yytext(); return new Symbol(sym.BEGIN, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 75: 
            { currentText=yytext(); return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 76: 
            { currentText=yytext(); return new Symbol(sym.DELTA, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 77: 
            { currentText=yytext(); return new Symbol(sym.DELAY, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 78: 
            { currentText=yytext(); return new Symbol(sym.TAGGED, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 79: 
            { currentText=yytext(); return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 80: 
            { currentText=yytext(); return new Symbol(sym.RECORD, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 81: 
            { currentText=yytext(); return new Symbol(sym.ACCESS, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 82: 
            { currentText=yytext(); return new Symbol(sym.ACCEPT, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 83: 
            { currentText=yytext(); return new Symbol(sym.SELECT, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 84: 
            { currentText=yytext(); return new Symbol(sym.OTHERS, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 85: 
            { currentText=yytext(); return new Symbol(sym.DIGITS, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 86: 
            { currentText=yytext(); return new Symbol(sym.PRAGMA, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 87: 
            { currentText=yytext(); return new Symbol(sym.RENAMES, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 88: 
            { currentText=yytext(); return new Symbol(sym.REVERSE, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 89: 
            { currentText=yytext(); return new Symbol(sym.REQUEUE, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 90: 
            { currentText=yytext(); return new Symbol(sym.ALIASED, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 91: 
            { currentText=yytext(); return new Symbol(sym.LIMITED, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 92: 
            { currentText=yytext(); return new Symbol(sym.SUBTYPE, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 93: 
            { currentText=yytext(); return new Symbol(sym.DECLARE, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 94: 
            { currentText=yytext(); return new Symbol(sym.PRIVATE, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 95: 
            { currentText=yytext(); return new Symbol(sym.GENERIC, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 96: 
            { currentText=yytext(); return new Symbol(sym.FUNCTION, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 97: 
            { currentText=yytext(); return new Symbol(sym.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 200: break;
          case 98: 
            { currentText=yytext(); return new Symbol(sym.SEPARATE, yycolumn, yyline, yytext());
            }
          case 201: break;
          case 99: 
            { currentText=yytext(); return new Symbol(sym.CONSTANT, yycolumn, yyline, yytext());
            }
          case 202: break;
          case 100: 
            { currentText=yytext(); return new Symbol(sym.TERMINATE, yycolumn, yyline, yytext());
            }
          case 203: break;
          case 101: 
            { currentText=yytext(); return new Symbol(sym.EXCEPTION, yycolumn, yyline, yytext());
            }
          case 204: break;
          case 102: 
            { currentText=yytext(); return new Symbol(sym.PROTECTED, yycolumn, yyline, yytext());
            }
          case 205: break;
          case 103: 
            { currentText=yytext(); return new Symbol(sym.PROCEDURE, yycolumn, yyline, yytext());
            }
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
