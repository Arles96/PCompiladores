/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ada95.flex</tt>
 */
class Ada95 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int IMPORTS = 4;
  public static final int PROC = 6;
  public static final int ENDPROC = 8;
  public static final int COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\64\1\67\1\67\1\66\24\0\1\45\1\46\2\0\1\47"+
    "\1\50\1\51\1\52\1\41\1\53\1\54\1\65\1\3\1\43\12\2"+
    "\1\42\1\55\1\44\1\37\1\40\2\0\1\11\1\15\1\24\1\25"+
    "\1\7\1\10\1\32\1\31\1\22\1\1\1\34\1\12\1\35\1\17"+
    "\1\16\1\26\1\36\1\5\1\14\1\4\1\6\1\23\1\20\1\30"+
    "\1\27\1\1\1\60\1\0\1\61\1\0\1\56\1\0\1\11\1\15"+
    "\1\24\1\25\1\7\1\10\1\32\1\31\1\22\1\1\1\34\1\12"+
    "\1\35\1\17\1\16\1\26\1\36\1\5\1\14\1\4\1\6\1\23"+
    "\1\20\1\30\1\27\1\1\1\62\1\57\1\63\7\0\1\67\252\0"+
    "\2\21\115\0\1\13\u1ea8\0\1\67\1\67\u0100\0\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\7\2\1\1\5\2"+
    "\1\1\7\2\2\5\1\6\1\7\1\6\1\5\1\1"+
    "\1\10\1\11\1\12\1\13\1\14\1\6\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\6\1\1"+
    "\1\0\1\25\17\2\1\26\6\2\1\0\1\2\3\0"+
    "\6\2\1\27\1\2\1\30\4\2\1\31\1\32\1\33"+
    "\1\31\1\32\1\33\3\2\1\34\1\0\7\2\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\0\1\44"+
    "\2\0\1\45\1\3\2\2\1\0\10\2\1\46\2\2"+
    "\1\0\2\2\1\0\2\2\1\47\1\0\5\2\1\50"+
    "\1\2\1\51\1\0\1\2\2\52\1\2\1\53\2\2"+
    "\1\0\1\2\4\0\10\2\1\54\1\2\1\55\1\56"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\5\2\1\0"+
    "\3\2\1\0\1\2\1\57\1\60\1\61\2\2\1\62"+
    "\1\63\1\64\1\2\2\65\1\2\1\66\1\67\6\2"+
    "\1\0\1\2\1\0\1\2\1\70\1\0\1\70\2\2"+
    "\2\71\2\2\1\0\3\2\1\0\1\2\1\0\3\2"+
    "\1\72\1\0\1\2\4\0\4\2\1\0\2\2\1\73"+
    "\1\2\1\74\1\75\1\0\1\2\1\0\1\2\2\76"+
    "\1\0\5\2\1\0\4\2\1\0\2\2\1\77\1\0"+
    "\7\2\1\100\2\101\2\102\2\103\1\104\2\2\2\105"+
    "\1\106\1\107\1\0\1\2\1\0\1\2\1\110\1\0"+
    "\2\2\1\0\1\2\4\0\4\2\2\111\2\2\2\112"+
    "\1\0\1\2\1\0\1\2\1\113\1\114\2\2\1\0"+
    "\4\2\1\0\2\2\1\0\1\2\1\115\1\116\1\2"+
    "\1\0\1\2\1\117\2\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\120\1\121\1\0\1\2\1\106\1\0"+
    "\1\122\1\0\1\2\1\122\2\2\2\123\1\0\1\2"+
    "\1\0\2\2\2\124\1\125\2\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\2\126\2\127\1\130\1\0\1\2"+
    "\1\0\1\2\2\131\1\0\1\2\2\132\1\133\1\0"+
    "\1\133\1\2\1\0\1\2\1\134\2\2\2\135\2\136"+
    "\1\0\1\2\1\0\1\2\2\137\2\140\2\141\2\142"+
    "\2\2\2\143\2\144\1\145\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\u0770\0\u07a8\0\u07e0\0\160\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\250\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\250\0\u0f18"+
    "\0\250\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\160\0\160\0\u1030"+
    "\0\250\0\250\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\160"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\u0738\0\u0738"+
    "\0\u1340\0\u07a8\0\u07a8\0\u07e0\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\250"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\250\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\250"+
    "\0\u18f0\0\250\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\250"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88"+
    "\0\250\0\u1dc0\0\250\0\250\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\250\0\250\0\250"+
    "\0\u21b0\0\u21e8\0\250\0\160\0\250\0\u2220\0\160\0\250"+
    "\0\u2258\0\250\0\250\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\160\0\u24c0\0\250"+
    "\0\u24f8\0\u2530\0\160\0\250\0\u2568\0\u25a0\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\250\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958"+
    "\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\250\0\u2ae0"+
    "\0\250\0\250\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\160\0\250"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\250\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\250"+
    "\0\160\0\250\0\160\0\250\0\160\0\250\0\250\0\u30c8"+
    "\0\u3100\0\160\0\250\0\250\0\250\0\u3138\0\u3170\0\u31a8"+
    "\0\u31e0\0\250\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330"+
    "\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\160"+
    "\0\250\0\u34f0\0\u3528\0\160\0\250\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\250\0\250\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u3720"+
    "\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\250"+
    "\0\250\0\u38e0\0\u3918\0\u3950\0\250\0\u3988\0\u39c0\0\u39f8"+
    "\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\160\0\250\0\250"+
    "\0\u3b48\0\u3b80\0\160\0\u3bb8\0\160\0\u3bf0\0\u3c28\0\250"+
    "\0\u3c60\0\u3c98\0\160\0\250\0\u3cd0\0\u3d08\0\u3d40\0\u3d78"+
    "\0\u3db0\0\160\0\250\0\250\0\u3de8\0\u3e20\0\u3e58\0\u3e90"+
    "\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\160\0\250\0\160\0\250"+
    "\0\250\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\160\0\250\0\u4088"+
    "\0\u40c0\0\160\0\250\0\160\0\u40f8\0\250\0\u4130\0\u4168"+
    "\0\u41a0\0\250\0\u41d8\0\u4210\0\160\0\250\0\160\0\250"+
    "\0\u4248\0\u4280\0\u42b8\0\u42f0\0\160\0\250\0\160\0\250"+
    "\0\160\0\250\0\160\0\250\0\u4328\0\u4360\0\160\0\250"+
    "\0\160\0\250\0\250\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\5\1\27\1\30\1\31\1\5"+
    "\1\32\1\5\1\33\1\4\1\5\1\34\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\4\1\62\2\0\45\4"+
    "\1\63\16\4\1\0\1\4\73\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\33\0\1\6"+
    "\1\64\67\0\1\65\65\0\2\5\1\0\1\5\1\66"+
    "\1\5\1\67\1\5\1\70\1\5\1\0\5\5\1\0"+
    "\5\5\1\71\1\5\1\72\1\5\1\0\3\5\32\0"+
    "\2\5\1\0\3\5\1\73\1\5\1\74\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\3\5\1\75\1\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\6\5\1\76\1\0\3\5"+
    "\1\77\1\5\1\0\6\5\1\100\2\5\1\0\3\5"+
    "\32\0\2\5\1\0\2\5\1\101\2\5\1\102\1\103"+
    "\1\0\2\5\1\104\2\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\1\105\1\106\4\5\1\107\1\0"+
    "\1\5\1\110\1\5\1\111\1\5\1\0\2\5\1\112"+
    "\6\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\2\5\1\113\2\5\1\114\1\115\10\5\1\0\3\5"+
    "\35\0\1\116\1\0\1\117\1\120\61\0\2\5\1\0"+
    "\1\121\1\5\1\122\1\123\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\3\5\1\124"+
    "\3\5\1\0\2\5\1\125\2\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\1\126\1\127\1\130\1\5"+
    "\1\131\2\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\2\5\1\132\1\133\3\5\1\0"+
    "\2\5\1\134\2\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\7\5\1\135"+
    "\1\5\1\0\3\5\41\0\1\136\2\0\2\137\2\0"+
    "\1\140\51\0\2\5\1\0\4\5\1\141\2\5\1\137"+
    "\1\142\2\5\1\143\1\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\5\5\1\144\1\5\1\0\2\5"+
    "\1\145\2\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\3\5\1\146\3\5\1\0\2\5\1\147\2\5"+
    "\1\150\1\151\10\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\5\1\152\1\153\4\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\2\5"+
    "\1\154\2\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\3\5\1\155\3\5\1\0\2\5\1\156\2\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\0\2\5\1\157\2\5\1\0\11\5\1\0\3\5"+
    "\71\0\1\160\67\0\1\161\70\0\1\162\65\0\1\163"+
    "\67\0\1\164\70\0\1\165\3\0\1\166\23\0\45\167"+
    "\1\170\16\167\1\0\1\167\67\0\1\171\2\0\45\172"+
    "\1\173\16\172\1\0\1\172\4\0\1\174\66\0\2\5"+
    "\1\0\2\5\1\175\4\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\5\1\176\5\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\7\5\1\177\1\200\4\5\1\0\10\5\1\201"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\4\5\1\202\4\5\1\0\3\5\32\0\2\5"+
    "\1\0\3\5\1\203\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\204\6\5\1\0"+
    "\3\5\1\205\1\5\1\0\1\5\1\206\1\207\6\5"+
    "\1\0\1\5\1\210\1\211\32\0\2\5\1\0\7\5"+
    "\1\0\3\5\1\212\1\5\1\213\1\214\10\5\1\0"+
    "\3\5\32\0\2\5\1\0\1\215\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\216\1\217\4\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\1\220\6\5\1\0\5\5\1\0\3\5"+
    "\1\221\5\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\222\1\223\1\5\1\224\6\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\3\5\1\225"+
    "\1\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\6\5\1\226\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\7\5\1\0\2\5\1\227\2\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\1\5"+
    "\1\230\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\1\5\1\231\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\6\5"+
    "\1\232\1\0\5\5\1\233\1\234\10\5\1\0\3\5"+
    "\32\0\2\5\1\0\7\5\1\235\1\236\1\5\1\237"+
    "\2\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\3\5\1\240\5\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\2\5\1\241\6\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\2\5\1\242\2\5\1\0\11\5\1\0"+
    "\3\5\66\0\1\243\33\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\1\5\1\244\1\5\36\0"+
    "\1\245\77\0\1\246\64\0\1\247\13\0\1\250\42\0"+
    "\2\5\1\0\1\5\1\251\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\1\5\1\252\3\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\6\5\1\253\1\0\5\5\1\0\4\5"+
    "\1\254\4\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\10\5\1\255\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\256\2\5\1\0"+
    "\3\5\1\257\5\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\7\5\1\260\1\5\1\0"+
    "\3\5\32\0\2\5\1\0\1\261\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\6\5"+
    "\1\262\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\4\5\1\263\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\264\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\3\5\1\265\3\5\1\0\5\5\1\266\1\267\10\5"+
    "\1\0\3\5\35\0\1\270\64\0\2\5\1\0\1\271"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\272\1\273\4\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\274\1\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\6\5\1\275\1\0\5\5\1\0\2\5\1\276"+
    "\6\5\1\0\3\5\32\0\2\5\1\0\2\5\1\277"+
    "\4\5\1\0\5\5\1\0\11\5\1\0\3\5\63\0"+
    "\1\300\36\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\301\1\0\3\5\32\0\2\5\1\0\5\5"+
    "\1\302\1\5\1\0\2\5\1\303\2\5\1\304\1\305"+
    "\10\5\1\0\3\5\32\0\2\5\1\0\1\306\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\1\5\1\307\5\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\310\6\5\1\0"+
    "\3\5\1\311\1\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\1\312\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\3\5\1\313\5\5\1\0\3\5\31\0\64\171"+
    "\1\314\1\171\1\314\2\0\2\5\1\0\3\5\1\315"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\11\5\1\0"+
    "\1\5\1\316\1\5\64\0\2\317\34\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\11\5\1\317\1\320\2\5"+
    "\32\0\2\5\1\0\7\5\1\0\5\5\1\0\10\5"+
    "\1\321\1\0\3\5\32\0\2\5\1\0\3\5\1\322"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\3\5\1\323\1\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\2\5\1\324"+
    "\4\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\5\5\1\325\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\3\5\1\326"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\327\2\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\2\5\1\330"+
    "\4\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\10\5\1\331"+
    "\1\0\3\5\44\0\2\332\54\0\2\5\1\0\7\5"+
    "\1\332\1\333\4\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\334\1\335\10\5"+
    "\1\0\3\5\40\0\1\336\11\0\2\337\46\0\2\5"+
    "\1\0\3\5\1\340\3\5\1\0\5\5\1\337\1\341"+
    "\10\5\1\0\3\5\32\0\2\5\1\0\1\5\1\342"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\35\0"+
    "\1\343\64\0\2\5\1\0\1\344\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\3\5"+
    "\1\345\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\7\5\1\0\5\5\1\0\2\5"+
    "\1\346\6\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\347\1\350\4\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\5\5\1\351\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\5\5\1\352"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\42\0"+
    "\1\353\57\0\2\5\1\0\5\5\1\354\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\35\0\1\355\64\0"+
    "\2\5\1\0\1\356\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\5\1\357\5\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\3\5\1\360\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\4\5\1\361\4\5\1\0\3\5\52\0\2\362"+
    "\46\0\2\5\1\0\7\5\1\0\5\5\1\362\1\363"+
    "\10\5\1\0\3\5\52\0\2\364\51\0\1\365\72\0"+
    "\1\366\71\0\1\367\57\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\364\1\370\10\5\1\0\3\5\32\0\2\5"+
    "\1\0\1\371\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\3\5\1\372\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\5\5\1\373\1\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\374"+
    "\1\375\10\5\1\0\3\5\32\0\2\5\1\0\6\5"+
    "\1\376\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\5\5\1\377"+
    "\3\5\1\0\3\5\32\0\2\5\1\0\3\5\1\u0100"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\6\5\1\u0101\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u0102\1\5\1\0\11\5\1\0\3\5\43\0\1\u0103"+
    "\56\0\2\5\1\0\6\5\1\u0104\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\40\0\1\u0105\61\0\2\5\1\0"+
    "\3\5\1\u0106\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\40\0\1\u0107\61\0\2\5\1\0\3\5\1\u0108"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\u0109\1\u010a\4\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\u010b\4\5\1\u010c"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\6\5\1\u010d\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\7\5\1\0\1\5"+
    "\1\u010e\3\5\1\0\11\5\1\0\3\5\52\0\2\u010f"+
    "\46\0\2\5\1\0\7\5\1\0\5\5\1\u010f\1\u0110"+
    "\10\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\10\5\1\u0111\1\0\3\5\32\0\2\5"+
    "\1\0\1\u0112\6\5\1\0\5\5\1\0\2\5\1\u0113"+
    "\6\5\1\0\3\5\54\0\1\u0114\45\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\1\5\1\u0115\7\5\1\0"+
    "\3\5\32\0\2\5\1\0\3\5\1\u0116\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\2\5\1\u0117\2\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\u0118"+
    "\1\u0119\10\5\1\0\3\5\32\0\2\5\1\0\3\5"+
    "\1\u011a\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\1\5\1\u011b\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\11\5\1\0\1\5\1\u011c\1\5"+
    "\32\0\2\5\1\0\1\5\1\u011d\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\1\5"+
    "\1\u011e\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\3\5\1\u011f\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\3\5"+
    "\1\u0120\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\40\0\1\u0121\61\0\2\5\1\0\3\5\1\u0122\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\43\0\1\u0123"+
    "\56\0\2\5\1\0\6\5\1\u0124\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\41\0\1\u0125\60\0\2\5\1\0"+
    "\4\5\1\u0126\2\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\5\5\1\u0127\3\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\4\5\1\u0128\4\5\1\0"+
    "\3\5\32\0\2\5\1\0\1\u0129\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\40\0\1\u012a\61\0\2\5"+
    "\1\0\3\5\1\u012b\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\32\0\2\5\1\0\1\u012c\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\5\5\1\u012d\3\5\1\0"+
    "\3\5\44\0\2\u012e\54\0\2\5\1\0\7\5\1\u012e"+
    "\1\u012f\4\5\1\0\11\5\1\0\3\5\36\0\1\u0130"+
    "\63\0\2\5\1\0\1\5\1\u0131\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\1\u0132"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\u0133\1\u0134\4\5\1\0\4\5"+
    "\1\u0135\4\5\1\0\3\5\35\0\1\u0136\64\0\2\5"+
    "\1\0\1\u0137\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\50\0\1\u0138\77\0\1\u0139\64\0\1\u013a\50\0"+
    "\1\u013b\63\0\2\5\1\0\7\5\1\0\3\5\1\u013c"+
    "\1\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\5\5\1\u013d\3\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\2\5\1\u013e\6\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\5\1\u013f\5\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\50\0\1\u0140\51\0\2\5\1\0\7\5\1\0"+
    "\3\5\1\u0141\1\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\3\5\1\u0142\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\1\5\1\u0143"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\40\0"+
    "\1\u0144\61\0\2\5\1\0\3\5\1\u0145\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\63\0\1\u0146\36\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\10\5\1\u0147"+
    "\1\0\3\5\35\0\1\u0148\64\0\2\5\1\0\1\u0149"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\5\5\1\u014a\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\5\5\1\u014b\3\5\1\0\3\5\32\0"+
    "\2\5\1\0\5\5\1\u014c\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\6\5\1\u014d"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\35\0\1\u014e"+
    "\64\0\2\5\1\0\1\u014f\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\1\5\1\u0150\1\5\32\0"+
    "\2\5\1\0\3\5\1\u0151\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\3\5\1\u0152"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\42\0"+
    "\1\u0153\57\0\2\5\1\0\5\5\1\u0154\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\5\1\u0155\5\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\50\0\1\u0156\51\0\2\5\1\0\7\5\1\0"+
    "\3\5\1\u0157\1\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\3\5\1\u0158"+
    "\5\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\3\5\1\u0159\1\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\3\5\1\u015a\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\7\5\1\u015b"+
    "\1\u015c\4\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u015d\5\5"+
    "\1\0\3\5\32\0\2\5\1\0\2\5\1\u015e\4\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\1\u015f\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\u0160"+
    "\1\u0161\10\5\1\0\3\5\40\0\1\u0162\61\0\2\5"+
    "\1\0\3\5\1\u0163\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\42\0\1\u0164\57\0\2\5\1\0\5\5"+
    "\1\u0165\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\44\0\2\u0166\54\0\2\5\1\0\7\5\1\u0166\1\u0167"+
    "\4\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\u0168\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\40\0\1\u0169\61\0\2\5\1\0\3\5\1\u016a\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\63\0\1\u016b"+
    "\63\0\1\u016c\45\0\1\u016d\74\0\1\u016e\57\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\10\5\1\u012c\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\4\5\1\u016f\4\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\u0170\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\5\5\1\u0171\1\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\5\5"+
    "\1\u0172\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\7\5\1\u0173\1\u0174\4\5\1\0"+
    "\11\5\1\0\3\5\40\0\1\u0175\61\0\2\5\1\0"+
    "\3\5\1\u0176\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\42\0\1\u0177\57\0\2\5\1\0\5\5\1\u0178"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\1\5\1\u0179\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\3\5\1\u012c"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\44\0"+
    "\2\u017a\54\0\2\5\1\0\7\5\1\u017a\1\u017b\4\5"+
    "\1\0\11\5\1\0\3\5\32\0\2\5\1\0\5\5"+
    "\1\u017c\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\7\5\1\0\5\5\1\0\2\5"+
    "\1\u017d\6\5\1\0\3\5\32\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\3\5\1\u017e\5\5\1\0\3\5"+
    "\35\0\1\u017f\64\0\2\5\1\0\1\u0180\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\u0181\1\u0182\10\5\1\0\3\5"+
    "\42\0\1\u0183\57\0\2\5\1\0\5\5\1\u0184\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\7\5\1\u0185\1\u0186\4\5\1\0\11\5\1\0"+
    "\3\5\40\0\1\u0187\61\0\2\5\1\0\3\5\1\u0188"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\32\0"+
    "\2\5\1\0\3\5\1\u0189\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\32\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\u018a\1\u018b\10\5\1\0\3\5\47\0\1\u018c"+
    "\52\0\2\5\1\0\7\5\1\0\2\5\1\u018d\2\5"+
    "\1\0\11\5\1\0\3\5\56\0\1\u018e\43\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u018f\5\5"+
    "\1\0\3\5\55\0\1\u0190\44\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\2\5\1\u0191\6\5\1\0\3\5"+
    "\56\0\1\u0192\43\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\3\5\1\u0193\5\5\1\0\3\5\40\0\1\u0194"+
    "\64\0\1\u0195\64\0\2\5\1\0\3\5\1\u0196\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\32\0\2\5"+
    "\1\0\1\u0197\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\7\5\1\0\3\5\1\u012c"+
    "\1\5\1\0\11\5\1\0\3\5\36\0\1\u016b\63\0"+
    "\2\5\1\0\1\5\1\u012c\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\50\0\1\u0198\51\0\2\5\1\0"+
    "\7\5\1\0\3\5\1\u0199\1\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\3\5\1\u019a\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\u019b\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\32\0\2\5\1\0\2\5\1\u019c\4\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\40\0\1\u019d\61\0\2\5"+
    "\1\0\3\5\1\u019e\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\55\0\1\u019f\44\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\2\5\1\u01a0\6\5\1\0\3\5"+
    "\35\0\1\u01a1\64\0\2\5\1\0\1\u01a2\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\47\0\1\u01a3\52\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\u01a4\2\5\1\0"+
    "\11\5\1\0\3\5\50\0\1\u01a5\51\0\2\5\1\0"+
    "\7\5\1\0\3\5\1\u01a6\1\5\1\0\11\5\1\0"+
    "\3\5\35\0\1\u01a7\64\0\2\5\1\0\1\u01a8\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\40\0\1\u01a9"+
    "\61\0\2\5\1\0\3\5\1\u01aa\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\35\0\1\u01ab\64\0\2\5"+
    "\1\0\1\u01ac\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\32\0\2\5\1\0\3\5\1\u01ad\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\1\5\1\u01ae\5\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\40\0\1\u01af\61\0\2\5\1\0\3\5\1\u01b0"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\50\0"+
    "\1\u01b1\51\0\2\5\1\0\7\5\1\0\3\5\1\u01b2"+
    "\1\5\1\0\11\5\1\0\3\5\32\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\3\5\1\u01b3\5\5\1\0"+
    "\3\5\32\0\2\5\1\0\3\5\1\u01b4\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\37\1\16\11\2\1\1\0\1\11"+
    "\26\1\1\0\1\1\3\0\15\1\2\11\10\1\1\0"+
    "\7\1\7\11\1\0\1\1\2\0\4\1\1\0\13\1"+
    "\1\0\2\1\1\0\3\1\1\0\10\1\1\0\7\1"+
    "\1\0\1\1\4\0\15\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\0\3\1\1\0\7\1\1\11\2\1"+
    "\1\11\12\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\3\1\1\11\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\4\0\4\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\0\10\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\4\0\4\1\1\11"+
    "\3\1\1\11\1\1\1\0\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\2\1\1\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\1\1\11\1\0\1\11\1\0\4\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Ada95(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 103: break;
          case 2: 
            { return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 3: 
            { return new Symbol(sym.NUM, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 4: 
            { return new Symbol(sym.PUNTO, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 5: 
            { return new Symbol(sym.OPREL, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 6: 
            { return new Symbol(sym.OP, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 7: 
            { return new Symbol(sym.DOS, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 8: 
            { return new Symbol(sym.NS, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 9: 
            { return new Symbol(sym.AM, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 10: 
            { return new Symbol(sym.AP, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 11: 
            { return new Symbol(sym.LP, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 12: 
            { return new Symbol(sym.RP, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 13: 
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 14: 
            { return new Symbol(sym.PC, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 15: 
            { return new Symbol(sym.GUINB, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 16: 
            { return new Symbol(sym.VERTICAL, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 17: 
            { return new Symbol(sym.LSQB, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 18: 
            { return new Symbol(sym.RSQB, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 19: 
            { return new Symbol(sym.LCB, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 20: 
            { return new Symbol(sym.RCB, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 21: 
            { return new Symbol(sym.DOUBD, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 22: 
            { return new Symbol(sym.AT, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 23: 
            { return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 24: 
            { return new Symbol(sym.OF, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 25: 
            { return new Symbol(sym.IF, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 26: 
            { return new Symbol(sym.IS, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 27: 
            { return new Symbol(sym.IN, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 28: 
            { return new Symbol(sym.DO, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 29: 
            { return new Symbol(sym.ARROW, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 30: 
            { return new Symbol(sym.RLB, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 31: 
            { return new Symbol(sym.DOUBAPS, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 32: 
            { return new Symbol(sym.ASSIGN, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 33: 
            { return new Symbol(sym.NOTEQ, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 34: 
            { return new Symbol(sym.BOX, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 35: 
            { return new Symbol(sym.LLB, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 36: 
            { return new Symbol(sym.EXP, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 37: 
            { System.out.print(yytext());
            }
          case 139: break;
          case 38: 
            { return new Symbol(sym.REM, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 39: 
            { return new Symbol(sym.END, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 40: 
            { return new Symbol(sym.FOR, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 41: 
            { return new Symbol(sym.ALL, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 42: 
            { return new Symbol(sym.ABS, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 43: 
            { return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 44: 
            { return new Symbol(sym.OUT, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 45: 
            { return new Symbol(sym.NEW, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 46: 
            { return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 47: 
            { return new Symbol(sym.PUT, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 48: 
            { return new Symbol(sym.XOR, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 49: 
            { return new Symbol(sym.GET, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 50: 
            { return new Symbol(sym.MOD, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 51: 
            { /* return new Symbol(sym.COMMENT, yycolumn, yyline, yytext()); */
            }
          case 153: break;
          case 52: 
            { return new Symbol(sym.TRUE, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 53: 
            { return new Symbol(sym.TASK, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 54: 
            { return new Symbol(sym.TYPE, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 55: 
            { return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 56: 
            { return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 57: 
            { return new Symbol(sym.EXIT, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 58: 
            { return new Symbol(sym.LOOP, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 59: 
            { return new Symbol(sym.BODY, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 60: 
            { return new Symbol(sym.NULL, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 61: 
            { return new Symbol(sym.WHEN, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 62: 
            { return new Symbol(sym.CASE, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 63: 
            { return new Symbol(sym.GOTO, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 64: 
            { return new Symbol(sym.RANGE, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 65: 
            { return new Symbol(sym.RAISE, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 66: 
            { return new Symbol(sym.UNTIL, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 67: 
            { return new Symbol(sym.ELSIF, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 68: 
            { return new Symbol(sym.ENTRY, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 69: 
            { return new Symbol(sym.FALSE, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 70: 
            { return new Symbol(sym.DATATYPES, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 71: 
            { return new Symbol(sym.ARRAY, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 72: 
            { return new Symbol(sym.ABORT, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 73: 
            { return new Symbol(sym.BEGIN, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 74: 
            { return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 75: 
            { return new Symbol(sym.DELTA, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 76: 
            { return new Symbol(sym.DELAY, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 77: 
            { return new Symbol(sym.TAGGED, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 78: 
            { return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 79: 
            { return new Symbol(sym.RECORD, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 80: 
            { return new Symbol(sym.ACCESS, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 81: 
            { return new Symbol(sym.ACCEPT, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 82: 
            { return new Symbol(sym.SELECT, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 83: 
            { return new Symbol(sym.OTHERS, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 84: 
            { return new Symbol(sym.DIGITS, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 85: 
            { return new Symbol(sym.PRAGMA, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 86: 
            { return new Symbol(sym.RENAMES, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 87: 
            { return new Symbol(sym.REVERSE, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 88: 
            { return new Symbol(sym.REQUEUE, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 89: 
            { return new Symbol(sym.ALIASED, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 90: 
            { return new Symbol(sym.LIMITED, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 91: 
            { return new Symbol(sym.SUBTYPE, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 92: 
            { return new Symbol(sym.DECLARE, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 93: 
            { return new Symbol(sym.PRIVATE, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 94: 
            { return new Symbol(sym.GENERIC, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 95: 
            { return new Symbol(sym.FUNCTION, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 96: 
            { return new Symbol(sym.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 97: 
            { return new Symbol(sym.SEPARATE, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 98: 
            { return new Symbol(sym.CONSTANT, yycolumn, yyline, yytext());
            }
          case 200: break;
          case 99: 
            { return new Symbol(sym.TERMINATE, yycolumn, yyline, yytext());
            }
          case 201: break;
          case 100: 
            { return new Symbol(sym.EXCEPTION, yycolumn, yyline, yytext());
            }
          case 202: break;
          case 101: 
            { return new Symbol(sym.PROTECTED, yycolumn, yyline, yytext());
            }
          case 203: break;
          case 102: 
            { return new Symbol(sym.PROCEDURE, yycolumn, yyline, yytext());
            }
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
