/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ada95.flex</tt>
 */
class ada95 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int IMPORTS = 4;
  public static final int PROC = 6;
  public static final int ENDPROC = 8;
  public static final int COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\65\1\66\1\66\1\65\24\0\1\50\1\51\2\0\1\52"+
    "\1\53\1\40\1\41\1\44\1\54\1\55\1\64\1\3\1\46\12\2"+
    "\1\45\1\56\1\47\1\42\1\43\2\0\1\11\1\15\1\24\1\25"+
    "\1\7\1\10\1\32\1\31\1\22\1\1\1\34\1\12\1\35\1\17"+
    "\1\16\1\26\1\36\1\5\1\14\1\4\1\6\1\23\1\20\1\30"+
    "\1\27\1\1\1\60\1\0\1\61\1\0\1\37\1\0\1\11\1\15"+
    "\1\24\1\25\1\7\1\10\1\32\1\31\1\22\1\1\1\34\1\12"+
    "\1\35\1\17\1\16\1\26\1\36\1\5\1\14\1\4\1\6\1\23"+
    "\1\20\1\30\1\27\1\1\1\62\1\57\1\63\7\0\1\66\252\0"+
    "\2\21\115\0\1\13\u1ea8\0\1\66\1\66\u0100\0\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\7\2\1\1\5\2"+
    "\1\1\10\2\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\10\1\7\1\1\1\12\1\13\1\14\1\10\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\10\1\24"+
    "\1\1\1\0\1\25\1\26\15\2\1\27\6\2\1\0"+
    "\1\2\4\0\10\2\1\30\1\2\1\31\5\2\1\0"+
    "\2\2\1\32\1\33\1\34\1\32\1\33\1\34\4\2"+
    "\1\35\1\2\1\0\12\2\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\2\0\1\24\1\0"+
    "\1\2\1\0\10\2\1\46\2\2\1\0\2\2\1\0"+
    "\1\2\1\0\2\2\1\47\1\0\4\2\1\50\1\2"+
    "\1\51\1\0\1\2\2\52\1\2\1\53\3\2\1\0"+
    "\1\2\5\0\12\2\1\54\1\2\1\55\1\2\1\56"+
    "\1\2\1\0\2\2\1\0\1\2\1\0\1\2\1\0"+
    "\5\2\1\0\3\2\1\0\1\2\1\57\1\2\1\0"+
    "\1\2\1\60\1\61\2\2\1\62\1\2\1\63\1\25"+
    "\1\2\2\64\1\2\1\65\1\66\6\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\67\1\0\1\67\2\2"+
    "\2\70\4\2\1\0\1\2\1\0\3\2\1\71\1\2"+
    "\1\0\1\2\5\0\5\2\1\0\2\2\1\72\2\2"+
    "\1\73\1\2\1\0\1\2\1\74\1\0\1\2\1\0"+
    "\1\2\2\75\1\0\5\2\1\0\4\2\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\1\76\1\2\1\0\7\2"+
    "\1\77\2\100\2\101\1\0\1\2\2\102\1\103\2\2"+
    "\1\25\1\104\1\0\1\2\1\0\1\2\1\105\1\0"+
    "\2\2\2\0\1\2\5\0\4\2\2\106\1\2\1\0"+
    "\2\2\1\0\2\107\1\0\1\2\1\0\2\2\1\110"+
    "\1\111\1\2\1\0\4\2\1\0\1\2\1\0\1\2"+
    "\1\0\3\2\1\0\1\2\1\112\1\113\1\2\1\0"+
    "\1\2\1\114\1\2\1\0\2\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\2\115\1\116\3\0\1\2\2\0"+
    "\1\117\1\0\2\2\1\117\2\2\1\0\2\120\1\2"+
    "\2\0\1\2\1\0\3\2\2\121\1\122\2\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\0"+
    "\1\2\2\123\2\124\1\125\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\126\1\0\1\2\2\0\2\127\1\130"+
    "\1\0\1\130\1\2\3\0\1\2\1\131\2\2\2\132"+
    "\2\133\1\0\1\2\2\134\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\135\2\136\1\0\2\137\2\0\2\140"+
    "\2\2\2\141\1\0\2\142\3\0\1\143\1\144\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[528];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\245\0\245\0\245"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\245"+
    "\0\245\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\u07bc\0\245\0\u07f3\0\u082a\0\245\0\245"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\334\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\334\0\u0f78\0\334\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\245\0\245\0\u1167"+
    "\0\334\0\334\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\334"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\245\0\u0785\0\u0785\0\u1545\0\u07f3\0\u07f3"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\334\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\334\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\334\0\u1b12\0\334\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\334\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\334\0\u20a8\0\334\0\u20df\0\334\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\334\0\u2562\0\u2599\0\u25d0\0\334\0\334"+
    "\0\u2607\0\u263e\0\334\0\u2675\0\245\0\u26ac\0\u26e3\0\245"+
    "\0\334\0\u271a\0\334\0\334\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\245\0\u29e5\0\334\0\u2a1c\0\u2a53\0\245\0\334\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\334\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3"+
    "\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\334\0\u3020\0\u3057\0\334\0\u308e\0\u30c5"+
    "\0\u30fc\0\334\0\u3133\0\u316a\0\u31a1\0\u31d8\0\245\0\334"+
    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390"+
    "\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548"+
    "\0\u357f\0\u35b6\0\334\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    "\0\u3700\0\u3737\0\u376e\0\u37a5\0\334\0\245\0\334\0\245"+
    "\0\334\0\u37dc\0\u3813\0\245\0\334\0\334\0\u384a\0\u3881"+
    "\0\334\0\334\0\u38b8\0\u38ef\0\u3926\0\u395d\0\334\0\u3994"+
    "\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\245\0\334"+
    "\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\245\0\334\0\u3de0"+
    "\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\334\0\334\0\u3ef3\0\u3f2a"+
    "\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2"+
    "\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\334\0\334"+
    "\0\u4263\0\u429a\0\u42d1\0\334\0\u4308\0\u433f\0\u4376\0\u43ad"+
    "\0\u43e4\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\245\0\334"+
    "\0\334\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a\0\u4641\0\245"+
    "\0\u4678\0\u46af\0\u46e6\0\334\0\u471d\0\u4754\0\u478b\0\245"+
    "\0\334\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c"+
    "\0\u4943\0\245\0\334\0\334\0\u497a\0\u49b1\0\u49e8\0\u4a1f"+
    "\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7"+
    "\0\u4c0e\0\245\0\334\0\245\0\334\0\334\0\u4c45\0\u4c7c"+
    "\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\245\0\334\0\u4d8f\0\u4dc6"+
    "\0\u4dfd\0\u1167\0\245\0\334\0\245\0\u4e34\0\334\0\u4e6b"+
    "\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\334\0\u4f7e\0\u4fb5\0\245"+
    "\0\334\0\245\0\334\0\u4fec\0\u5023\0\245\0\334\0\u505a"+
    "\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d\0\245\0\334\0\245"+
    "\0\334\0\u51a4\0\245\0\334\0\u51db\0\u5212\0\245\0\334"+
    "\0\u5249\0\u5280\0\245\0\334\0\u52b7\0\245\0\334\0\u52ee"+
    "\0\u5325\0\u535c\0\334\0\334\0\u5393\0\u53ca\0\u5401\0\u5438"+
    "\0\u546f\0\u54a6\0\u54dd\0\u5514\0\u554b\0\u5582\0\u55b9\0\u55f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[528];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\5\1\27\1\30\1\31\1\5"+
    "\1\32\1\5\1\33\1\4\1\5\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\2\64\50\4\1\65"+
    "\14\4\71\64\70\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\33\0\1\66\35\0\1\67"+
    "\30\0\1\70\64\0\2\5\1\0\3\5\1\71\1\5"+
    "\1\72\1\5\1\0\5\5\1\0\5\5\1\73\1\5"+
    "\1\74\1\5\1\0\3\5\31\0\2\5\1\0\3\5"+
    "\1\75\1\5\1\76\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\77\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\6\5\1\100\1\0\3\5\1\101\1\5\1\0"+
    "\6\5\1\102\2\5\1\0\3\5\31\0\2\5\1\0"+
    "\2\5\1\103\3\5\1\104\1\0\2\5\1\105\2\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\106"+
    "\1\107\4\5\1\110\1\0\1\5\1\111\1\5\1\112"+
    "\1\5\1\0\2\5\1\113\6\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\114\2\5\1\115"+
    "\1\116\10\5\1\0\3\5\34\0\1\117\1\0\1\120"+
    "\1\121\21\0\1\122\36\0\2\5\1\0\1\123\1\5"+
    "\1\124\1\125\3\5\1\0\5\5\1\0\7\5\1\126"+
    "\1\5\1\0\3\5\31\0\2\5\1\0\3\5\1\127"+
    "\3\5\1\0\2\5\1\130\2\5\1\0\5\5\1\131"+
    "\3\5\1\0\3\5\31\0\2\5\1\0\1\132\1\133"+
    "\1\134\1\5\1\135\2\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\2\5\1\136\1\137"+
    "\1\5\1\140\1\5\1\0\2\5\1\141\2\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\2\5\1\142\2\5\1\143\1\144\6\5\1\145\1\5"+
    "\1\0\3\5\40\0\1\146\2\0\2\147\2\0\1\150"+
    "\50\0\2\5\1\0\4\5\1\151\2\5\1\147\1\152"+
    "\2\5\1\153\1\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\5\5\1\154\1\5\1\0\2\5\1\155"+
    "\2\5\1\0\7\5\1\156\1\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\157\3\5\1\0\2\5\1\160"+
    "\1\5\1\161\1\162\1\163\10\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\5\1\164\1\165\2\5\1\166\1\5"+
    "\1\0\2\5\1\167\2\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\2\5\1\170\2\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\3\5"+
    "\1\171\3\5\1\0\2\5\1\172\2\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\2\5"+
    "\1\173\2\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\4\5\1\174\1\0\11\5\1\0"+
    "\3\5\73\0\1\175\66\0\1\176\67\0\1\177\64\0"+
    "\1\200\66\0\1\201\67\0\1\202\3\0\1\203\17\0"+
    "\50\204\1\205\14\204\66\0\1\206\2\0\50\207\1\210"+
    "\14\207\5\0\1\211\64\0\2\5\1\0\1\5\1\212"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\213\1\214\4\5\1\0\10\5"+
    "\1\215\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\4\5\1\216\4\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\217\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\220\6\5"+
    "\1\0\3\5\1\221\1\5\1\0\1\5\1\222\1\223"+
    "\6\5\1\0\1\5\1\224\1\225\31\0\2\5\1\0"+
    "\7\5\1\0\3\5\1\226\1\5\1\227\1\230\10\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\231\6\5\1\232"+
    "\1\233\4\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\234\1\235\4\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\236\6\5\1\0\5\5"+
    "\1\0\3\5\1\237\5\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\240\1\241\1\5\1\242"+
    "\6\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\3\5\1\243\1\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\244\2\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\5\1\245"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\5\1\246\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\6\5\1\247"+
    "\1\0\5\5\1\250\1\251\10\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\252\1\253\1\5\1\254\2\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\3\5\1\255\5\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\2\5"+
    "\1\256\6\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\2\5\1\257\1\260\1\5\1\0\11\5\1\0"+
    "\3\5\65\0\1\261\32\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\1\5\1\262\1\5\35\0"+
    "\1\263\76\0\1\264\63\0\1\265\13\0\1\266\56\0"+
    "\1\267\51\0\2\5\1\0\1\5\1\270\5\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\1\5\1\271\3\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\6\5\1\272\1\0\5\5"+
    "\1\0\4\5\1\273\4\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\2\5\1\274\2\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\10\5\1\275\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\2\5\1\276\2\5\1\0\3\5\1\277"+
    "\5\5\1\0\3\5\31\0\2\5\1\0\1\300\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\7\5\1\301\1\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\302\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\6\5\1\303\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\4\5\1\304\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\305\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\1\306\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\5\1\307\5\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\55\0\1\310\42\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\3\5\1\311"+
    "\5\5\1\0\3\5\31\0\2\5\1\0\3\5\1\312"+
    "\3\5\1\0\5\5\1\313\1\314\10\5\1\0\3\5"+
    "\34\0\1\315\63\0\2\5\1\0\1\316\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\317\1\320\4\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\3\5\1\321\1\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\5\5"+
    "\1\322\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\6\5\1\323\1\0\5\5\1\0"+
    "\2\5\1\324\6\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\2\5\1\142\2\5\1\0\11\5\1\0"+
    "\3\5\62\0\1\325\35\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\10\5\1\326\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\327\1\5\1\0\2\5\1\330\2\5"+
    "\1\331\1\332\10\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\333\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\2\5"+
    "\1\334\6\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\335\1\336\4\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\5\1\337\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\340\6\5"+
    "\1\0\3\5\1\341\1\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\342\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\3\5\1\343\5\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\344\2\5\1\0"+
    "\11\5\1\0\3\5\30\0\65\206\1\345\2\0\1\346"+
    "\2\0\7\346\1\0\5\346\1\0\11\346\1\0\3\346"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\11\5"+
    "\1\0\1\5\1\347\1\5\63\0\2\350\33\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\11\5\1\350\1\351"+
    "\2\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\352\1\0\3\5\31\0\2\5\1\0\3\5"+
    "\1\353\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\3\5\1\354\1\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\2\5"+
    "\1\355\4\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\5\5\1\356\1\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\3\5"+
    "\1\357\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\2\5\1\360\2\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\2\5"+
    "\1\361\4\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\10\5"+
    "\1\362\1\0\3\5\43\0\2\363\53\0\2\5\1\0"+
    "\7\5\1\363\1\364\4\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\365\1\366"+
    "\10\5\1\0\3\5\51\0\2\367\45\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\367\1\370\10\5\1\0\3\5"+
    "\37\0\1\371\11\0\2\372\45\0\2\5\1\0\3\5"+
    "\1\373\3\5\1\0\5\5\1\372\1\374\10\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\5\1\375\5\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\34\0\1\376\63\0"+
    "\2\5\1\0\1\377\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\u0100\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\2\5\1\u0101\6\5"+
    "\1\0\3\5\31\0\2\5\1\0\5\5\1\u0102\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\u0103\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\41\0\1\u0104\56\0\2\5\1\0\5\5"+
    "\1\u0105\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\34\0\1\u0106\63\0\2\5\1\0\1\u0107\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\5\1\u0108\5\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\3\5\1\u0109\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\4\5\1\u010a\4\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\u010b\1\0\3\5\51\0\2\u010c\45\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\u010c\1\u010d\10\5\1\0"+
    "\3\5\51\0\2\u010e\50\0\1\u010f\71\0\1\u0110\70\0"+
    "\1\u0111\62\0\1\u0112\62\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\u010e\1\u0113\10\5\1\0\3\5\31\0\2\5"+
    "\1\0\1\u0114\6\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\3\5\1\u0115\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\5\5\1\u0116\1\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\5\1\u0117\5\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\u0118\1\u0119\10\5\1\0\3\5"+
    "\31\0\2\5\1\0\6\5\1\u011a\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\5\5\1\u011b\3\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\u011c\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\3\5\1\u011d"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\6\5\1\u011e\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\2\5\1\u011f\4\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u011c\5\5"+
    "\1\0\3\5\37\0\1\u0120\60\0\2\5\1\0\3\5"+
    "\1\u0121\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\3\5\1\u0122\1\5"+
    "\1\0\11\5\1\0\3\5\42\0\1\u0123\55\0\2\5"+
    "\1\0\6\5\1\u0124\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\37\0\1\u0125\60\0\2\5\1\0\3\5\1\u0126"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\37\0"+
    "\1\u0127\60\0\2\5\1\0\3\5\1\u0128\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\u0129\1\u012a\4\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\5\1\u012b\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\u012c"+
    "\4\5\1\u012d\1\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\6\5\1\u012e\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\51\0\2\u012f\45\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\u012f\1\u0130\10\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\u0131\1\0\3\5\31\0\2\5\1\0\1\u0132"+
    "\6\5\1\0\5\5\1\0\2\5\1\u0133\6\5\1\0"+
    "\3\5\53\0\1\u0134\44\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\1\5\1\u0135\7\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\11\5\1\u0136"+
    "\1\u0137\2\5\51\0\2\u0138\45\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\u0138\1\u0139\10\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\u013a\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\2\5\1\u013b\2\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\5\1\u013c\5\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\346\1\0\7\346\1\0"+
    "\5\346\1\0\11\346\1\0\3\346\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\u013d\1\u013e\10\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u013f\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\1\5"+
    "\1\u0140\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\11\5"+
    "\1\0\1\5\1\u0141\1\5\31\0\2\5\1\0\1\5"+
    "\1\u0142\5\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\5\1\u0143\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\3\5"+
    "\1\u0144\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u0145\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\37\0\1\u0146\60\0\2\5"+
    "\1\0\3\5\1\u0147\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\42\0\1\u0148\55\0\2\5\1\0\6\5"+
    "\1\u0149\1\0\5\5\1\0\11\5\1\0\3\5\62\0"+
    "\1\u014a\35\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\u014b\1\0\3\5\40\0\1\u014c\57\0\2\5"+
    "\1\0\4\5\1\u014d\2\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\5\5"+
    "\1\0\5\5\1\u014e\3\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\4\5\1\u014f\4\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\u0150\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\u0151\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\0\5\5\1\0\5\5"+
    "\1\u0152\3\5\1\0\3\5\43\0\2\u0153\53\0\2\5"+
    "\1\0\7\5\1\u0153\1\u0154\4\5\1\0\11\5\1\0"+
    "\3\5\35\0\1\u0155\62\0\2\5\1\0\1\5\1\u0156"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\1\u0157\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\u0158\1\u0159"+
    "\4\5\1\0\4\5\1\u015a\4\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\1\u015b\33\0\1\u015c\63\0\2\5\1\0\1\u015d"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\47\0"+
    "\1\u015e\76\0\1\u015f\63\0\1\u0160\47\0\1\u0161\65\0"+
    "\1\u0162\63\0\2\5\1\0\7\5\1\0\3\5\1\u0163"+
    "\1\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\5\5\1\u0164\3\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\2\5\1\u0165\6\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\5\1\u0166\5\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\u010b\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\47\0\1\u0167\50\0\2\5"+
    "\1\0\7\5\1\0\3\5\1\u0168\1\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\3\5\1\u0169\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\1\u016a\30\0\2\5\1\0\1\5\1\u016b\5\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\1\5\1\u016c\5\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\67\0\1\u016d\30\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\1\u016d\36\0\1\u016e"+
    "\60\0\2\5\1\0\3\5\1\u016f\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\62\0\1\u0170\35\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\10\5\1\u0171\1\0"+
    "\3\5\34\0\1\u0172\63\0\2\5\1\0\1\u0173\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\5\5\1\u0174\1\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\5\5\1\u0175\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\5\5\1\u0176\3\5"+
    "\1\0\3\5\31\0\2\5\1\0\5\5\1\u0177\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\34\0\1\u0178"+
    "\63\0\2\5\1\0\1\u0179\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\0\11\5\1\0\1\5\1\u017a\1\5\31\0"+
    "\2\5\1\0\3\5\1\u017b\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\3\5\1\u017c"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\41\0"+
    "\1\u017d\56\0\2\5\1\0\5\5\1\u017e\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\41\0\1\u017f\56\0"+
    "\2\5\1\0\5\5\1\u0180\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\34\0\1\u0181\63\0\2\5\1\0"+
    "\1\u0182\6\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\5\1\u0183\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\3\5\1\u0184\5\5\1\0\3\5"+
    "\47\0\1\u0185\50\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u0186\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u0187\5\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u0188\1\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\3\5\1\u0189\3\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\7\5\1\u018a\1\u018b"+
    "\4\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\3\5\1\u018c\5\5\1\0"+
    "\3\5\31\0\2\5\1\0\2\5\1\u018d\4\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\47\0\1\u018e\50\0"+
    "\2\5\1\0\7\5\1\0\3\5\1\u018f\1\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\u0190\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\31\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\u0191\1\u0192\10\5\1\0"+
    "\3\5\37\0\1\u0193\60\0\2\5\1\0\3\5\1\u0194"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\41\0"+
    "\1\u0195\56\0\2\5\1\0\5\5\1\u0196\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\43\0\2\u0197\53\0"+
    "\2\5\1\0\7\5\1\u0197\1\u0198\4\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\u0199\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\40\0\1\u019a\10\0"+
    "\2\u019b\53\0\1\u019c\60\0\2\5\1\0\3\5\1\u019d"+
    "\3\5\1\0\5\5\1\0\11\5\1\0\3\5\62\0"+
    "\1\u019e\62\0\1\u019f\44\0\1\u01a0\73\0\1\u01a1\114\0"+
    "\1\u015b\30\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\10\5\1\u01a2\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\4\5\1\u01a3\4\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\u01a4\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\5\5\1\u01a5"+
    "\1\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\5\5\1\u01a6\1\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\45\0\1\u01a7\3\0\2\u019b\45\0"+
    "\2\5\1\0\7\5\1\u01a8\1\u01a9\4\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\5\5\1\u01aa\1\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\54\0\1\u01ab"+
    "\51\0\1\u01ac\60\0\2\5\1\0\3\5\1\u01ad\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\41\0\1\u01ae"+
    "\56\0\2\5\1\0\5\5\1\u01af\1\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\2\5\1\u01b0\6\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\5\1\u01b1\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\43\0\2\u01b2\53\0\2\5"+
    "\1\0\7\5\1\u01b2\1\u01b3\4\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\5\5\1\u01b4\1\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\2\5\1\u01b5\6\5\1\0"+
    "\3\5\31\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\3\5\1\u01b6\5\5\1\0\3\5\34\0\1\u01b7\63\0"+
    "\2\5\1\0\1\u01b8\6\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\62\0\1\u01b9\35\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\10\5\1\u01ba\1\0\3\5\51\0"+
    "\2\u01bb\45\0\2\5\1\0\7\5\1\0\5\5\1\u01bb"+
    "\1\u01bc\10\5\1\0\3\5\31\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\u01bd\1\u01be\10\5\1\0\3\5\31\0"+
    "\2\5\1\0\7\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\1\u01bf\40\0\1\u01c0\56\0\2\5\1\0\5\5"+
    "\1\u01c1\1\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\7\5\1\u01c2\1\u01c3\4\5\1\0"+
    "\11\5\1\0\3\5\37\0\1\u01c4\60\0\2\5\1\0"+
    "\3\5\1\u01c5\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\3\5\1\u01c6\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\37\0\1\u01c7\60\0"+
    "\2\5\1\0\3\5\1\u01c8\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\5\5\1\u01c9\1\u01ca\10\5\1\0\3\5\46\0\1\u01cb"+
    "\51\0\2\5\1\0\7\5\1\0\2\5\1\u01cc\2\5"+
    "\1\0\11\5\1\0\3\5\55\0\1\u01cd\42\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u01ce\5\5"+
    "\1\0\3\5\54\0\1\u01cf\43\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\2\5\1\u01d0\6\5\1\0\3\5"+
    "\42\0\1\u01d1\73\0\1\u01d2\74\0\1\u01d3\42\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\3\5\1\u01d4\5\5"+
    "\1\0\3\5\70\0\1\211\35\0\1\u01d5\63\0\1\u01d6"+
    "\63\0\2\5\1\0\7\5\1\0\5\5\1\0\11\5"+
    "\1\0\3\5\1\0\1\211\27\0\2\5\1\0\3\5"+
    "\1\u01d7\3\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\31\0\2\5\1\0\1\u01d8\6\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\7\5\1\0"+
    "\3\5\1\u0151\1\5\1\0\11\5\1\0\3\5\46\0"+
    "\1\u01d9\51\0\2\5\1\0\6\5\1\u0151\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\61\0\1\u01da\42\0\1\67"+
    "\62\0\2\5\1\0\1\5\1\u0151\5\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\47\0\1\u01db\50\0\2\5"+
    "\1\0\7\5\1\0\3\5\1\u01dc\1\5\1\0\11\5"+
    "\1\0\3\5\31\0\2\5\1\0\1\u0171\6\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\31\0\2\5\1\0"+
    "\3\5\1\u01dd\3\5\1\0\5\5\1\0\11\5\1\0"+
    "\3\5\31\0\2\5\1\0\1\u01de\6\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\31\0\2\5\1\0\2\5"+
    "\1\u01df\4\5\1\0\5\5\1\0\11\5\1\0\3\5"+
    "\37\0\1\u01e0\60\0\2\5\1\0\3\5\1\u01e1\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\37\0\1\u01e2"+
    "\60\0\2\5\1\0\3\5\1\u01e3\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\53\0\1\u01e4\44\0\2\5"+
    "\1\0\7\5\1\0\5\5\1\0\1\5\1\u01e5\7\5"+
    "\1\0\3\5\54\0\1\u01e6\43\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\2\5\1\u01e7\6\5\1\0\3\5"+
    "\51\0\2\u019b\50\0\1\u01e8\63\0\2\5\1\0\1\u01e9"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\55\0"+
    "\1\u01ea\42\0\2\5\1\0\7\5\1\0\5\5\1\0"+
    "\3\5\1\u01eb\5\5\1\0\3\5\46\0\1\u01ec\51\0"+
    "\2\5\1\0\7\5\1\0\2\5\1\u01ed\2\5\1\0"+
    "\11\5\1\0\3\5\47\0\1\u01ee\50\0\2\5\1\0"+
    "\7\5\1\0\3\5\1\u01ef\1\5\1\0\11\5\1\0"+
    "\3\5\34\0\1\u01f0\63\0\2\5\1\0\1\u01f1\6\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\46\0\1\u01f2"+
    "\57\0\1\u01f3\60\0\2\5\1\0\3\5\1\u01f4\3\5"+
    "\1\0\5\5\1\0\11\5\1\0\3\5\46\0\1\u01f5"+
    "\61\0\1\u01f6\61\0\1\u01f7\63\0\2\5\1\0\1\u01f8"+
    "\6\5\1\0\5\5\1\0\11\5\1\0\3\5\31\0"+
    "\2\5\1\0\3\5\1\u01f9\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\31\0\2\5\1\0\1\5\1\u01fa"+
    "\5\5\1\0\5\5\1\0\11\5\1\0\3\5\37\0"+
    "\1\67\60\0\2\5\1\0\3\5\1\u0151\3\5\1\0"+
    "\5\5\1\0\11\5\1\0\3\5\37\0\1\u01fb\60\0"+
    "\2\5\1\0\3\5\1\u01fc\3\5\1\0\5\5\1\0"+
    "\11\5\1\0\3\5\67\0\1\u01fd\30\0\2\5\1\0"+
    "\7\5\1\0\5\5\1\0\11\5\1\0\3\5\1\u01fd"+
    "\46\0\1\u01fe\50\0\2\5\1\0\7\5\1\0\3\5"+
    "\1\u01ff\1\5\1\0\11\5\1\0\3\5\41\0\1\u0200"+
    "\67\0\1\u0201\61\0\1\u0202\62\0\2\5\1\0\7\5"+
    "\1\0\5\5\1\0\3\5\1\u0203\5\5\1\0\3\5"+
    "\31\0\2\5\1\0\3\5\1\u0204\3\5\1\0\5\5"+
    "\1\0\11\5\1\0\3\5\45\0\1\u0205\2\0\1\u0206"+
    "\2\u019b\2\0\1\u0207\45\0\1\67\71\0\1\u0208\70\0"+
    "\1\u0209\104\0\1\u020a\55\0\1\u020b\70\0\1\u0206\57\0"+
    "\1\u020c\101\0\1\u020d\46\0\1\u020e\67\0\1\u020f\100\0"+
    "\1\67\53\0\1\u0170\71\0\1\u0210\104\0\1\u0210\100\0"+
    "\1\u01bf\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22055];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\31\1\3\11\7\1\13\11\1\1\1\11"+
    "\1\1\1\0\2\11\24\1\1\0\1\1\4\0\20\1"+
    "\1\0\2\1\2\11\12\1\1\0\12\1\7\11\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\13\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\7\1\1\0"+
    "\10\1\1\0\1\1\5\0\20\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1\1\0\3\1\1\0"+
    "\3\1\1\0\7\1\1\11\2\1\1\11\12\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\0\3\1"+
    "\1\11\5\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\5\0\5\1\1\0\7\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\5\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\10\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\6\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\2\0\1\1"+
    "\5\0\4\1\1\11\2\1\1\0\2\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\4\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\3\0\1\1\2\0\1\11\1\0"+
    "\5\1\1\0\1\11\2\1\2\0\1\1\1\0\3\1"+
    "\1\11\4\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\2\0\1\11\1\1\1\11\1\0\2\1"+
    "\3\0\4\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\1\2\0"+
    "\1\11\3\1\1\11\1\1\1\0\1\11\1\1\3\0"+
    "\2\1\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[528];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ada95(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 101: break;
          case 2: 
            { return new Symbol(sym.id, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 3: 
            { return new Symbol(sym.punto, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 4: 
            { return new Symbol(sym.guinb, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 5: 
            { return new Symbol(sym.lp, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 6: 
            { return new Symbol(sym.rp, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 7: 
            { return new Symbol(sym.oprel, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 8: 
            { return new Symbol(sym.op, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 9: 
            { return new Symbol(sym.dos, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 10: 
            { return new Symbol(sym.ns, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 11: 
            { return new Symbol(sym.am, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 12: 
            { return new Symbol(sym.ap, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 13: 
            { return new Symbol(sym.coma, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 14: 
            { return new Symbol(sym.pc, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 15: 
            { return new Symbol(sym.vertical, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 16: 
            { return new Symbol(sym.lsqb, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 17: 
            { return new Symbol(sym.rsqb, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 18: 
            { return new Symbol(sym.lcb, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 19: 
            { return new Symbol(sym.rcb, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 20: 
            { System.out.print(yytext());
            }
          case 120: break;
          case 21: 
            { return new Symbol(sym.dataTypes, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 22: 
            { return new Symbol(sym.doubd, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 23: 
            { return new Symbol(sym.at, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 24: 
            { return new Symbol(sym.or, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 25: 
            { return new Symbol(sym.of, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 26: 
            { return new Symbol(sym.if, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 27: 
            { return new Symbol(sym.is, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 28: 
            { return new Symbol(sym.in, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 29: 
            { return new Symbol(sym.do, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 30: 
            { return new Symbol(sym.arrow, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 31: 
            { return new Symbol(sym.rlb, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 32: 
            { return new Symbol(sym.doubaps, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 33: 
            { return new Symbol(sym.assign, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 34: 
            { return new Symbol(sym.noteq, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 35: 
            { return new Symbol(sym.box, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 36: 
            { return new Symbol(sym.llb, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 37: 
            { return new Symbol(sym.exp, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 38: 
            { return new Symbol(sym.rem, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 39: 
            { return new Symbol(sym.end, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 40: 
            { return new Symbol(sym.for, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 41: 
            { return new Symbol(sym.all, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 42: 
            { return new Symbol(sym.abs, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 43: 
            { return new Symbol(sym.and, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 44: 
            { return new Symbol(sym.out, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 45: 
            { return new Symbol(sym.new, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 46: 
            { return new Symbol(sym.not, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 47: 
            { return new Symbol(sym.put, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 48: 
            { return new Symbol(sym.xor, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 49: 
            { return new Symbol(sym.get, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 50: 
            { return new Symbol(sym.mod, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 51: 
            { return new Symbol(sym.comment, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 52: 
            { return new Symbol(sym.task, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 53: 
            { return new Symbol(sym.type, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 54: 
            { return new Symbol(sym.then, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 55: 
            { return new Symbol(sym.else, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 56: 
            { return new Symbol(sym.exit, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 57: 
            { return new Symbol(sym.loop, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 58: 
            { return new Symbol(sym.body, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 59: 
            { return new Symbol(sym.null, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 60: 
            { return new Symbol(sym.when, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 61: 
            { return new Symbol(sym.case, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 62: 
            { return new Symbol(sym.goto, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 63: 
            { return new Symbol(sym.range, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 64: 
            { return new Symbol(sym.raise, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 65: 
            { return new Symbol(sym.until, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 66: 
            { return new Symbol(sym.elsif, 0, 0);
            }
          case 166: break;
          case 67: 
            { return new Symbol(sym.entry, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 68: 
            { return new Symbol(sym.array, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 69: 
            { return new Symbol(sym.abort, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 70: 
            { return new Symbol(sym.begin, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 71: 
            { return new Symbol(sym.while, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 72: 
            { return new Symbol(sym.delta, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 73: 
            { return new Symbol(sym.delay, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 74: 
            { return new Symbol(sym.tagged, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 75: 
            { return new Symbol(sym.return, 0, 0);
            }
          case 175: break;
          case 76: 
            { return new Symbol(sym.record, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 77: 
            { return new Symbol(sym.access, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 78: 
            { return new Symbol(sym.accept, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 79: 
            { return new Symbol(sym.select, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 80: 
            { return new Symbol(sym.others, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 81: 
            { return new Symbol(sym.digits, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 82: 
            { return new Symbol(sym.pragma, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 83: 
            { return new Symbol(sym.renames, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 84: 
            { return new Symbol(sym.reverse, 0, 0);
            }
          case 184: break;
          case 85: 
            { return new Symbol(sym.requeue, 0, 0);
            }
          case 185: break;
          case 86: 
            { return new Symbol(sym.aliased, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 87: 
            { return new Symbol(sym.limited, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 88: 
            { return new Symbol(sym.subtype, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 89: 
            { return new Symbol(sym.declare, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 90: 
            { return new Symbol(sym.private, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 91: 
            { return new Symbol(sym.packageA, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 92: 
            { return new Symbol(sym.generic, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 93: 
            { return new Symbol(sym.function, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 94: 
            { return new Symbol(sym.abstract, 0, 0);
            }
          case 194: break;
          case 95: 
            { return new Symbol(sym.separate, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 96: 
            { return new Symbol(sym.constant, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 97: 
            { return new Symbol(sym.terminate, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 98: 
            { return new Symbol(sym.exception, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 99: 
            { return new Symbol(sym.protected, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 100: 
            { return new Symbol(sym.procedure, yycolumn, yyline, yytext());
            }
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ada95 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ada95 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ada95(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
