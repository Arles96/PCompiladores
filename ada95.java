/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ada95.lex</tt>
 */
class ada95 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int IMPORTS = 4;
  public static final int PROC = 6;
  public static final int ENDPROC = 8;
  public static final int COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\65\1\66\1\66\1\65\24\0\1\60\1\61\2\0\1\61"+
    "\1\61\1\4\1\61\1\55\1\62\1\61\1\64\1\54\1\56\12\2"+
    "\1\3\1\63\1\57\1\52\1\53\2\0\1\1\1\44\1\45\1\50"+
    "\1\1\1\43\2\1\1\35\2\1\1\40\1\1\1\36\1\1\1\37"+
    "\1\51\1\1\1\42\1\1\1\47\1\1\1\46\3\1\1\61\1\0"+
    "\1\61\1\0\1\41\1\0\1\5\1\6\1\23\1\24\1\12\1\21"+
    "\1\31\1\30\1\20\1\1\1\32\1\13\1\33\1\15\1\7\1\25"+
    "\1\34\1\10\1\14\1\11\1\17\1\22\1\16\1\27\1\26\1\1"+
    "\1\61\1\61\1\61\7\0\1\66\u1fa2\0\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\2\2\37\1\1\3\1\2\2\4\1\3"+
    "\1\1\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\1\15\2\0\1\16\63\0\1\17"+
    "\2\0\1\5\1\0\1\16\34\0\1\20\122\0\1\21"+
    "\37\0\1\22\14\0\1\21\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u014a\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u014a"+
    "\0\u09e2\0\u014a\0\u0a19\0\u014a\0\u0a50\0\u0a87\0\u014a\0\u0181"+
    "\0\u014a\0\u014a\0\u014a\0\u0abe\0\u0af5\0\u0181\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u09ab\0\u09ab\0\u15ea\0\u0a19\0\u0a19\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u0181\0\u1c93\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260"+
    "\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0"+
    "\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u0181\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u0181\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u014a\0\u376e\0\u37a5\0\u37dc\0\u3813"+
    "\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb"+
    "\0\u3a02";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\10\1\30\1\31\1\32\1\10\1\33"+
    "\1\10\1\34\1\10\1\35\1\10\1\36\1\37\1\40"+
    "\1\41\1\12\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\2\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\12\1\60\1\12\1\61\2\62\60\7\1\63\4\7"+
    "\2\62\63\7\1\64\1\7\2\62\1\7\1\65\3\7"+
    "\34\65\1\7\10\65\13\7\2\62\1\7\1\66\3\7"+
    "\34\66\1\7\10\66\11\7\1\67\1\7\71\62\70\0"+
    "\2\70\1\71\1\72\34\70\1\0\10\70\67\0\1\73"+
    "\15\0\2\70\1\71\1\72\1\70\1\74\1\70\1\75"+
    "\1\76\1\70\1\77\1\70\1\100\5\70\1\101\15\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\2\70\1\102"+
    "\2\70\1\103\26\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\3\70\1\76\1\104\5\70\1\105\1\70\1\76"+
    "\17\70\1\0\10\70\16\0\2\70\1\71\1\72\1\106"+
    "\4\70\1\107\26\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\1\110\4\70\1\111\13\70\1\112\1\70\1\113"+
    "\10\70\1\0\10\70\16\0\2\70\1\71\1\72\6\70"+
    "\1\114\1\70\1\115\11\70\1\116\11\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\2\70\1\117\10\70\1\120"+
    "\20\70\1\0\10\70\16\0\2\70\1\71\1\72\5\70"+
    "\1\121\4\70\1\122\21\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\2\70\1\105\2\70\1\123\4\70\1\124"+
    "\21\70\1\0\10\70\16\0\2\70\1\71\1\72\13\70"+
    "\1\125\7\70\1\126\10\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\7\70\1\127\1\130\23\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\7\70\2\76\3\70\1\76"+
    "\17\70\1\0\10\70\16\0\2\70\1\71\1\72\2\70"+
    "\1\131\7\70\1\132\21\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\1\133\1\70\1\134\31\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\2\70\1\76\2\70\1\135"+
    "\5\70\1\136\20\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\1\137\2\70\1\140\30\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\2\70\1\131\31\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\2\70\1\141\2\70\1\142"+
    "\26\70\1\0\10\70\16\0\2\70\1\71\1\72\2\70"+
    "\1\100\31\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\10\70\1\143\23\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\1\144\33\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\2\70\1\145\31\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\2\70\1\146\31\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\23\70\1\147\10\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\6\70\1\150\25\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\2\70\1\151\16\70"+
    "\1\152\12\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\23\70\1\153\10\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\2\70\1\154\10\70\1\155\20\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\10\70\1\156\23\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\11\70\1\157\22\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\11\70\1\160"+
    "\22\70\1\0\10\70\70\0\1\12\67\0\1\12\67\0"+
    "\1\12\63\0\1\12\67\0\1\12\3\0\1\12\7\0"+
    "\60\161\1\162\4\161\66\0\1\163\2\0\60\164\1\165"+
    "\4\164\3\0\2\65\2\0\34\65\1\0\10\65\16\0"+
    "\2\66\2\0\34\66\1\0\10\66\16\0\2\70\1\71"+
    "\1\72\2\70\1\166\4\70\1\167\24\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\3\70\1\170\30\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\6\70\1\76\4\70"+
    "\1\171\20\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\17\70\1\76\14\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\16\70\1\172\15\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\17\70\1\173\14\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\24\70\1\174\7\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\23\70\1\175\10\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\4\70\1\76\27\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\10\70\1\176"+
    "\2\70\1\133\20\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\4\70\1\177\3\70\1\200\4\70\1\201\1\202"+
    "\7\70\1\76\1\203\4\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\7\70\1\204\14\70\1\205\7\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\3\70\1\206\30\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\20\70\1\207"+
    "\13\70\1\0\10\70\16\0\2\70\1\71\1\72\5\70"+
    "\1\210\26\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\7\70\1\211\24\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\4\70\1\212\12\70\1\76\14\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\13\70\1\105\2\70\1\213"+
    "\15\70\1\0\10\70\16\0\2\70\1\71\1\72\2\70"+
    "\1\214\31\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\26\70\1\215\5\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\6\70\1\216\11\70\1\217\13\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\1\70\1\220\32\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\11\70\1\76\22\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\6\70\1\221"+
    "\25\70\1\0\10\70\16\0\2\70\1\71\1\72\4\70"+
    "\1\222\27\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\5\70\1\210\5\70\1\223\20\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\5\70\1\224\26\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\4\70\1\225\27\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\3\70\1\76\30\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\10\70\1\226"+
    "\23\70\1\0\10\70\16\0\2\70\1\71\1\72\7\70"+
    "\1\207\24\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\10\70\1\227\23\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\6\70\1\230\7\70\1\231\15\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\24\70\1\232\7\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\16\70\1\233\15\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\1\234\1\70"+
    "\1\235\10\70\1\236\20\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\4\70\1\237\27\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\10\70\1\240\23\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\4\70\1\241\27\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\4\70\1\242\27\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\7\70\1\243"+
    "\24\70\1\0\10\70\16\0\2\70\1\71\1\72\10\70"+
    "\1\244\23\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\2\70\1\245\31\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\2\70\1\246\31\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\2\70\1\247\31\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\4\70\1\250\27\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\1\251\33\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\3\70\1\252\30\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\17\70\1\253\14\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\7\70\1\254"+
    "\24\70\1\0\10\70\16\0\2\70\1\71\1\72\2\70"+
    "\1\154\31\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\2\70\1\255\31\70\1\0\10\70\15\0\65\163\1\7"+
    "\2\0\2\70\1\71\1\72\3\70\1\105\30\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\4\70\1\256\27\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\1\173\33\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\1\257\33\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\5\70\1\260"+
    "\26\70\1\0\10\70\16\0\2\70\1\71\1\72\21\70"+
    "\1\76\12\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\13\70\1\210\20\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\5\70\1\261\26\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\24\70\1\207\7\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\12\70\1\262\21\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\1\263\33\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\5\70\1\264\26\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\2\70\1\265\31\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\12\70\1\266"+
    "\21\70\1\0\10\70\16\0\2\70\1\71\1\72\25\70"+
    "\1\76\6\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\24\70\1\267\7\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\26\70\1\270\5\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\5\70\1\76\26\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\10\70\1\76\23\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\5\70\1\76\5\70\1\271"+
    "\20\70\1\0\10\70\16\0\2\70\1\71\1\72\3\70"+
    "\1\173\30\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\5\70\1\272\26\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\20\70\1\76\13\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\13\70\1\273\20\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\5\70\1\274\26\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\1\275\33\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\4\70\1\276\27\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\6\70\1\76\25\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\23\70\1\224"+
    "\10\70\1\0\10\70\16\0\2\70\1\71\1\72\6\70"+
    "\1\207\25\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\13\70\1\221\20\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\16\70\1\277\15\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\7\70\1\300\24\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\1\173\3\70\1\301\27\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\6\70\1\302\25\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\13\70\1\303"+
    "\20\70\1\0\10\70\16\0\2\70\1\71\1\72\25\70"+
    "\1\304\6\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\24\70\1\305\7\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\4\70\1\306\11\70\1\307\15\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\15\70\1\310\16\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\2\70\1\76\31\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\5\70\1\311"+
    "\26\70\1\0\10\70\16\0\2\70\1\71\1\72\5\70"+
    "\1\312\26\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\12\70\1\313\21\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\13\70\1\314\20\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\24\70\1\315\7\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\3\70\1\316\30\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\1\317\33\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\6\70\1\320\25\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\5\70\1\321\26\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\3\70\1\322"+
    "\30\70\1\0\10\70\16\0\2\70\1\71\1\72\17\70"+
    "\1\321\14\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\5\70\1\323\26\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\13\70\1\324\20\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\3\70\1\325\30\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\3\70\1\326\30\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\7\70\1\267\24\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\7\70\1\327\10\70"+
    "\1\105\13\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\3\70\1\327\30\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\3\70\1\210\30\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\26\70\1\330\5\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\3\70\1\133\30\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\3\70\1\100\30\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\5\70\1\331\26\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\5\70\1\100"+
    "\26\70\1\0\10\70\16\0\2\70\1\71\1\72\13\70"+
    "\1\332\20\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\14\70\1\76\17\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\20\70\1\333\13\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\4\70\1\267\27\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\16\70\1\105\15\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\3\70\1\310\30\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\21\70\1\112\12\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\4\70\1\334"+
    "\27\70\1\0\10\70\16\0\2\70\1\71\1\72\4\70"+
    "\1\335\27\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\1\76\33\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\1\336\33\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\4\70\1\327\27\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\1\176\33\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\26\70\1\301\5\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\5\70\1\337\26\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\5\70\1\340\26\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\1\341\33\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\3\70\1\342\30\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\24\70\1\343\7\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\3\70\1\344"+
    "\30\70\1\0\10\70\16\0\2\70\1\71\1\72\4\70"+
    "\1\345\27\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\34\70\1\346\10\70\16\0\2\70\1\71\1\72\4\70"+
    "\1\315\27\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\4\70\1\347\27\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\5\70\1\350\26\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\34\70\1\351\10\70\16\0\2\70\1\71"+
    "\1\72\1\352\33\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\34\70\1\353\10\70\16\0\2\70\1\71\1\72"+
    "\24\70\1\354\7\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\17\70\1\355\14\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\1\274\33\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\7\70\1\76\24\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\5\70\1\327\26\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\12\70\1\207\21\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\10\70\1\310\23\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\4\70\1\356"+
    "\27\70\1\0\10\70\16\0\2\70\1\71\1\72\13\70"+
    "\1\357\20\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\1\360\33\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\3\70\1\207\30\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\16\70\1\273\15\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\17\70\1\361\14\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\4\70\1\207\27\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\13\70\1\362\20\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\5\70\1\363\26\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\1\364\33\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\13\70\1\365"+
    "\20\70\1\0\10\70\52\0\1\366\5\0\1\367\24\0"+
    "\2\70\1\71\1\72\1\370\33\70\1\0\10\70\52\0"+
    "\1\366\6\0\1\371\23\0\2\70\1\71\1\72\16\70"+
    "\1\372\15\70\1\0\10\70\62\0\1\373\22\0\2\70"+
    "\1\71\1\72\10\70\1\374\23\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\34\70\1\375\10\70\16\0\2\70"+
    "\1\71\1\72\13\70\1\376\20\70\1\0\10\70\16\0"+
    "\2\70\1\71\1\72\2\70\1\377\31\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\10\70\1\105\23\70\1\0"+
    "\10\70\16\0\2\70\1\71\1\72\12\70\1\u0100\21\70"+
    "\1\0\10\70\16\0\2\70\1\71\1\72\16\70\1\76"+
    "\15\70\1\0\10\70\16\0\2\70\1\71\1\72\3\70"+
    "\1\347\30\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\6\70\1\347\25\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\15\70\1\u0101\16\70\1\0\10\70\32\0\1\u0102"+
    "\64\0\1\u0103\54\0\2\70\1\71\1\72\10\70\1\347"+
    "\23\70\1\0\10\70\24\0\1\u0104\60\0\2\70\1\71"+
    "\1\72\4\70\1\343\27\70\1\0\10\70\45\0\1\u0105"+
    "\37\0\2\70\1\71\1\72\5\70\1\u0106\26\70\1\0"+
    "\10\70\52\0\1\366\32\0\2\70\1\71\1\72\2\70"+
    "\1\210\31\70\1\0\10\70\16\0\2\70\1\71\1\72"+
    "\10\70\1\u0107\23\70\1\0\10\70\16\0\2\70\1\71"+
    "\1\72\3\70\1\u0108\30\70\1\0\10\70\16\0\2\70"+
    "\1\71\1\72\5\70\1\347\26\70\1\0\10\70\26\0"+
    "\1\u0109\64\0\1\u010a\66\0\1\u010b\64\0\1\u010c\62\0"+
    "\2\70\1\71\1\72\17\70\1\u010d\14\70\1\0\10\70"+
    "\16\0\2\70\1\71\1\72\5\70\1\u0107\26\70\1\0"+
    "\10\70\27\0\1\u010e\61\0\1\u010f\74\0\1\u0110\63\0"+
    "\1\u0111\57\0\2\70\1\71\1\72\34\70\1\u0112\10\70"+
    "\46\0\1\u0113\46\0\1\u0114\67\0\1\u0115\61\0\1\u0116"+
    "\116\0\1\366\6\0\1\u0117\1\0\1\u0118\1\0\1\u0119"+
    "\30\0\1\u011a\61\0\1\u011b\104\0\1\u011c\71\0\1\u011d"+
    "\47\0\1\u011e\75\0\1\u0118\60\0\1\u0114\73\0\1\u0114"+
    "\62\0\1\u0113\66\0\1\u011f\65\0\1\u0120\70\0\1\u0121"+
    "\100\0\1\u0121\103\0\1\375\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14905];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\45\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\0\3\11\2\0\1\1"+
    "\63\0\1\1\2\0\1\1\1\0\1\1\34\0\1\1"+
    "\122\0\1\1\37\0\1\1\14\0\1\11\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ada95(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 19: break;
          case 2: 
            { System.out.println(yytext());
            } 
            // fall through
          case 20: break;
          case 3: 
            { System.out.println("Operador relacional: " + yytext());
            } 
            // fall through
          case 21: break;
          case 4: 
            { System.out.println("Operador: " + yytext());
            } 
            // fall through
          case 22: break;
          case 5: 
            { System.out.print(yytext());
            } 
            // fall through
          case 23: break;
          case 6: 
            { System.out.println("\""); yybegin(YYINITIAL);
            } 
            // fall through
          case 24: break;
          case 7: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 25: break;
          case 8: 
            { System.out.println("Procedimiento: " + yytext()); yybegin(YYINITIAL);
            } 
            // fall through
          case 26: break;
          case 9: 
            { System.out.println("Procedimiento: " + yytext());
            } 
            // fall through
          case 27: break;
          case 10: 
            { System.out.println(yytext()); yybegin(YYINITIAL);
            } 
            // fall through
          case 28: break;
          case 11: 
            { System.out.println("ID: " + yytext());
            } 
            // fall through
          case 29: break;
          case 12: 
            { System.out.println("IDFunc: " + yytext());
            } 
            // fall through
          case 30: break;
          case 13: 
            { System.out.println("Asignacion: " + yytext());
            } 
            // fall through
          case 31: break;
          case 14: 
            { System.out.println("Palabra reservada: "+yytext());
            } 
            // fall through
          case 32: break;
          case 15: 
            { System.out.println("String: " + yytext());
            } 
            // fall through
          case 33: break;
          case 16: 
            { yybegin(IMPORTS);
            } 
            // fall through
          case 34: break;
          case 17: 
            { System.out.println("Tipo de datos: " + yytext());
            } 
            // fall through
          case 35: break;
          case 18: 
            { System.out.println("Palabra reservada: "+yytext()); yybegin(PROC);
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ada95 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ada95 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ada95(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
