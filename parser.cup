import java_cup.runtime.*;

/*Palabras reservadas*/
terminal abort, else, new, return, abs, elsif, not;
terminal reverse, abstract, end, null, accept, entry;
terminal select, access, exception, of, separate;
terminal aliased, exit, or, all, others, subtype, and;
terminal for, out, array, function, at, tagged, generic;
terminal package, task, begin, goto, pragma, terminate;
terminal body, private, then, if, procedure, type, case;
terminal in, protected, constant, until, is, raise;

/* terminal use, with; */
terminal declare, range, delay, limited, record, when;
terminal delta, loop, rem, while, digits, renames;
terminal do, mod, requeue, xor;

/* terminal de valores */
terminal num;

/* Tipo de datos */
terminal dataTypes;

/* Operadores */
terminal arrow, doubd, doubdaps, assign, noteq;
terminal llb, rlb, box, qm, ns, am, ap, lp, rp, op;
terminal coma, punto, oprel, dos, pc;
terminal vertical, lsqb, rsqb, lcb, rcb;

/* Observacion con el guinb*/
terminal guinb;

/* Funcion predefinidas */
terminal get, put;

/* id para variables, procedimientos y funciones */
terminal id, idProc, idFunc;

/* Sección de no terminales */

/* no terminales de procedimientos y funciones */
non terminal String F, G, H, I;

/* no terminales de terminales de ids*/
non terminal String X, X2, X3;

/*no terminales de tipos de datos*/
non terminal String Z;

/* no terminales de valores */
non terminal String N, N1;

/* no terminales de declaración de tipos */
non terminal String C, D;

/* no terminales de las condicionales */
non terminal String L, L2, L4;

/* no terminales del cuerpo de expresiones */
non terminal String E;

/* no terminales de iteraciones */
non terminal String M, M1;

/* no terminales de comparacion */
non terminal String L1, L3;

/* Procedimientos y Funciones */
F   :=  procedure X:x is G   {: :}
    ;
G   :=  C:c G                         {: :}
    |   function X2:x return is H     {: :}
    ;
H   :=  C H                           {: :}
    |   begin I                       {: :}
    ;
I   :=  L I                           {: :}
    |   M I                           {: :}




/* Contenedores de terminales id*/
X   :=  idProc:idp    {: RETURN = idp :}
    ;
X2  :=  idFunc:idf    {: RETURN = idf :}
    ;
X3  :=  id:i          {: RETURN = i :}
    ;

/* Contenedores de tipos de datos */
Z   :=  dataTypes:dt  {: RETURN = d :}
    ;

/* Contenedores de valores */
N   :=  num:n          {: RETURN = n :}
    ;
N1  :=  num doubd num  {:  :}
    ;

/* Declaración de Tipos */
C   :=  X3:x dos Z:z D {: :}
    ;
D   :=  assign N:n pc  {: :}
    |   pc             {: :}
    ;

/* Condicionales */
L   :=  if L1 then L2     {:  :}
    ;
L2  :=  L L2              {:  :}
    |   E L2              {:  :}
    |   M L2              {:  :}
    |   else L4           {:  :}
    |   elsif L1 then L4  {:  :}
    |   end if            {:  :}
    ;
L4  :=  E L4              {:  :}
    |   L L4              {:  :}
    |   M L4              {:  :}
    |   end if            {:  :}
    ;

/* Asignaciones */
E   :=  X assign N        {:  :}
    ;

/* Iteraciones */
M   :=  loop M1               {:  :}
    |   for N in N1 loop M1   {:  :}
    |   while L1 loop M1      {:  :}
    ;
M1  :=  M M1                  {:  :}
    |   E M1                  {:  :}
    |   L M1                  {:  :}
    |   end loop
    ;

/* Comparaciones */
L1  :=  L3 oprel L3      {:  :}
    ;
L3  :=  N:n              {: RETURN = n :}
    |   X3:x             {: RETURN = x :}
    ;