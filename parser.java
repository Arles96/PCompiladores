
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\004\000\002\004\011\000\002\004\002" +
    "\000\002\042\007\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\012\003" +
    "\000\002\013\005\000\002\014\006\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\010\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\002\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\021\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\034\004\000\002\035\005\000\002\036\005" +
    "\000\002\036\004\000\002\036\003\000\002\023\006\000" +
    "\002\023\006\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\002\000\002\026\004\000\002\027\007" +
    "\000\002\027\013\000\002\027\011\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\002\000\002\031\007\000\002\031\007\000\002\031" +
    "\006\000\002\032\003\000\002\032\003\000\002\033\004" +
    "\000\002\033\005\000\002\033\005\000\002\037\007\000" +
    "\002\037\007\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\056\005\001\002\000\004\002\267\001" +
    "\002\000\004\152\007\001\002\000\004\002\000\001\002" +
    "\000\024\007\ufff3\061\ufff3\065\ufff3\120\ufff3\131\ufff3\132" +
    "\ufff3\134\ufff3\137\ufff3\140\ufff3\001\002\000\004\065\011" +
    "\001\002\000\010\040\015\046\ufffc\152\007\001\002\000" +
    "\004\137\254\001\002\000\004\046\027\001\002\000\010" +
    "\040\015\046\ufffc\152\007\001\002\000\004\152\007\001" +
    "\002\000\006\134\017\137\ufff1\001\002\000\004\152\007" +
    "\001\002\000\004\137\ufff2\001\002\000\004\007\022\001" +
    "\002\000\004\113\023\001\002\000\010\065\ufff0\120\ufff0" +
    "\140\ufff0\001\002\000\004\065\025\001\002\000\010\040" +
    "\015\046\ufffc\152\007\001\002\000\004\046\027\001\002" +
    "\000\024\007\046\015\ufff4\035\034\055\037\076\035\100" +
    "\031\150\043\151\032\152\007\001\002\000\004\046\ufffd" +
    "\001\002\000\014\030\237\034\234\112\051\131\052\152" +
    "\007\001\002\000\004\131\225\001\002\000\006\120\201" +
    "\131\060\001\002\000\004\152\007\001\002\000\022\015" +
    "\uffc1\035\034\055\037\076\035\100\031\150\043\151\032" +
    "\152\007\001\002\000\024\007\046\015\ufff4\035\034\055" +
    "\037\076\035\100\031\150\043\151\032\152\007\001\002" +
    "\000\010\112\051\131\052\152\007\001\002\000\024\007" +
    "\046\015\ufff4\035\034\055\037\076\035\100\031\150\043" +
    "\151\032\152\007\001\002\000\024\007\046\015\ufff4\035" +
    "\034\055\037\076\035\100\031\150\043\151\032\152\007" +
    "\001\002\000\024\007\046\015\ufff4\035\034\055\037\076" +
    "\035\100\031\150\043\151\032\152\007\001\002\000\004" +
    "\131\113\001\002\000\024\007\046\015\ufff4\035\034\055" +
    "\037\076\035\100\031\150\043\151\032\152\007\001\002" +
    "\000\004\015\107\001\002\000\010\112\051\131\052\152" +
    "\007\001\002\000\024\007\046\015\ufff4\035\034\055\037" +
    "\076\035\100\031\150\043\151\032\152\007\001\002\000" +
    "\004\015\ufff8\001\002\000\046\007\uffef\015\uffef\030\uffef" +
    "\034\uffef\035\uffef\054\uffef\055\uffef\076\uffef\100\uffef\104" +
    "\uffef\132\uffef\133\uffef\134\uffef\136\uffef\140\uffef\150\uffef" +
    "\151\uffef\152\uffef\001\002\000\010\112\051\131\052\152" +
    "\007\001\002\000\044\007\uffd0\015\uffd0\030\uffd0\034\uffd0" +
    "\035\uffd0\054\uffd0\055\uffd0\076\uffd0\100\uffd0\104\074\132" +
    "\uffd0\133\073\136\uffd0\140\uffd0\150\uffd0\151\uffd0\152\uffd0" +
    "\001\002\000\024\007\uffc9\015\uffc9\035\uffc9\055\uffc9\076" +
    "\uffc9\100\uffc9\150\uffc9\151\uffc9\152\uffc9\001\002\000\044" +
    "\007\uffce\015\uffce\030\uffce\034\uffce\035\uffce\054\uffce\055" +
    "\uffce\076\uffce\100\uffce\104\uffce\132\uffce\133\uffce\136\uffce" +
    "\140\uffce\150\uffce\151\uffce\152\uffce\001\002\000\044\007" +
    "\uffcf\015\uffcf\030\uffcf\034\uffcf\035\uffcf\054\uffcf\055\uffcf" +
    "\076\uffcf\100\uffcf\104\uffcf\132\uffcf\133\uffcf\136\uffcf\140" +
    "\uffcf\150\uffcf\151\uffcf\152\uffcf\001\002\000\004\131\060" +
    "\001\002\000\010\112\051\132\064\152\007\001\002\000" +
    "\046\005\uffd7\007\uffd7\015\uffd7\030\uffd7\034\uffd7\035\uffd7" +
    "\054\uffd7\055\uffd7\076\uffd7\100\uffd7\104\uffd7\132\uffd7\133" +
    "\uffd7\136\uffd7\140\uffd7\150\uffd7\151\uffd7\152\uffd7\001\002" +
    "\000\006\132\071\134\070\001\002\000\004\140\067\001" +
    "\002\000\004\140\uffd3\001\002\000\006\132\uffbd\134\uffbd" +
    "\001\002\000\006\132\uffbc\134\uffbc\001\002\000\046\005" +
    "\uffd6\007\uffd6\015\uffd6\030\uffd6\034\uffd6\035\uffd6\054\uffd6" +
    "\055\uffd6\076\uffd6\100\uffd6\104\uffd6\132\uffd6\133\uffd6\136" +
    "\uffd6\140\uffd6\150\uffd6\151\uffd6\152\uffd6\001\002\000\010" +
    "\112\051\132\064\152\007\001\002\000\004\140\uffd4\001" +
    "\002\000\004\140\uffd5\001\002\000\010\112\051\131\052" +
    "\152\007\001\002\000\010\112\051\131\052\152\007\001" +
    "\002\000\044\007\uffca\015\uffca\030\uffca\034\uffca\035\uffca" +
    "\054\uffca\055\uffca\076\uffca\100\uffca\104\077\132\uffca\133" +
    "\076\136\uffca\140\uffca\150\uffca\151\uffca\152\uffca\001\002" +
    "\000\010\112\051\131\052\152\007\001\002\000\010\112" +
    "\051\131\052\152\007\001\002\000\040\007\uffd1\015\uffd1" +
    "\030\uffd1\034\uffd1\035\uffd1\054\uffd1\055\uffd1\076\uffd1\100" +
    "\uffd1\132\uffd1\136\uffd1\140\uffd1\150\uffd1\151\uffd1\152\uffd1" +
    "\001\002\000\040\007\uffcb\015\uffcb\030\uffcb\034\uffcb\035" +
    "\uffcb\054\uffcb\055\uffcb\076\uffcb\100\uffcb\132\uffcb\136\uffcb" +
    "\140\uffcb\150\uffcb\151\uffcb\152\uffcb\001\002\000\040\007" +
    "\uffcc\015\uffcc\030\uffcc\034\uffcc\035\uffcc\054\uffcc\055\uffcc" +
    "\076\uffcc\100\uffcc\132\uffcc\136\uffcc\140\uffcc\150\uffcc\151" +
    "\uffcc\152\uffcc\001\002\000\044\007\uffca\015\uffca\030\uffca" +
    "\034\uffca\035\uffca\054\uffca\055\uffca\076\uffca\100\uffca\104" +
    "\077\132\uffca\133\076\136\uffca\140\uffca\150\uffca\151\uffca" +
    "\152\uffca\001\002\000\040\007\uffd2\015\uffd2\030\uffd2\034" +
    "\uffd2\035\uffd2\054\uffd2\055\uffd2\076\uffd2\100\uffd2\132\uffd2" +
    "\136\uffd2\140\uffd2\150\uffd2\151\uffd2\152\uffd2\001\002\000" +
    "\004\132\106\001\002\000\044\007\uffcd\015\uffcd\030\uffcd" +
    "\034\uffcd\035\uffcd\054\uffcd\055\uffcd\076\uffcd\100\uffcd\104" +
    "\uffcd\132\uffcd\133\uffcd\136\uffcd\140\uffcd\150\uffcd\151\uffcd" +
    "\152\uffcd\001\002\000\004\152\007\001\002\000\004\140" +
    "\111\001\002\000\006\002\ufffb\046\ufffb\001\002\000\004" +
    "\015\ufff6\001\002\000\004\152\114\001\002\000\004\132" +
    "\uffb6\001\002\000\004\132\116\001\002\000\004\140\117" +
    "\001\002\000\026\005\uffb8\007\uffb8\015\uffb8\035\uffb8\055" +
    "\uffb8\076\uffb8\100\uffb8\150\uffb8\151\uffb8\152\uffb8\001\002" +
    "\000\004\015\ufff5\001\002\000\004\015\ufffa\001\002\000" +
    "\004\015\ufff9\001\002\000\024\005\137\015\uffe1\035\034" +
    "\055\037\076\035\100\031\150\043\151\032\152\007\001" +
    "\002\000\004\136\125\001\002\000\010\112\051\131\052" +
    "\152\007\001\002\000\010\030\131\034\130\054\127\001" +
    "\002\000\034\005\uffbe\015\uffbe\030\uffbe\034\uffbe\035\uffbe" +
    "\055\uffbe\076\uffbe\100\uffbe\112\uffbe\131\uffbe\150\uffbe\151" +
    "\uffbe\152\uffbe\001\002\000\010\112\051\131\052\152\007" +
    "\001\002\000\010\112\051\131\052\152\007\001\002\000" +
    "\034\005\uffbf\015\uffbf\030\uffbf\034\uffbf\035\uffbf\055\uffbf" +
    "\076\uffbf\100\uffbf\112\uffbf\131\uffbf\150\uffbf\151\uffbf\152" +
    "\uffbf\001\002\000\034\005\uffc0\015\uffc0\030\uffc0\034\uffc0" +
    "\035\uffc0\055\uffc0\076\uffc0\100\uffc0\112\uffc0\131\uffc0\150" +
    "\uffc0\151\uffc0\152\uffc0\001\002\000\004\015\163\001\002" +
    "\000\024\005\137\015\uffe1\035\034\055\037\076\035\100" +
    "\031\150\043\151\032\152\007\001\002\000\024\005\137" +
    "\015\uffe1\035\034\055\037\076\035\100\031\150\043\151" +
    "\032\152\007\001\002\000\020\035\034\055\037\076\035" +
    "\100\031\150\043\151\032\152\007\001\002\000\024\005" +
    "\137\015\uffe1\035\034\055\037\076\035\100\031\150\043" +
    "\151\032\152\007\001\002\000\024\005\137\015\uffe1\035" +
    "\034\055\037\076\035\100\031\150\043\151\032\152\007" +
    "\001\002\000\024\005\137\015\uffe1\035\034\055\037\076" +
    "\035\100\031\150\043\151\032\152\007\001\002\000\004" +
    "\015\uffe6\001\002\000\004\015\uffe3\001\002\000\004\015" +
    "\uffe7\001\002\000\004\015\uffe2\001\002\000\020\035\034" +
    "\055\037\076\035\100\031\150\043\151\032\152\007\001" +
    "\002\000\020\035\034\055\037\076\035\100\031\150\043" +
    "\151\032\152\007\001\002\000\020\035\034\055\037\076" +
    "\035\100\031\150\043\151\032\152\007\001\002\000\020" +
    "\035\034\055\037\076\035\100\031\150\043\151\032\152" +
    "\007\001\002\000\020\035\034\055\037\076\035\100\031" +
    "\150\043\151\032\152\007\001\002\000\004\015\uffe0\001" +
    "\002\000\004\015\uffdc\001\002\000\004\015\uffdf\001\002" +
    "\000\004\015\uffde\001\002\000\004\015\uffdd\001\002\000" +
    "\004\015\uffe5\001\002\000\004\015\uffe4\001\002\000\004" +
    "\055\164\001\002\000\004\140\165\001\002\000\026\005" +
    "\uffe8\007\uffe8\015\uffe8\035\uffe8\055\uffe8\076\uffe8\100\uffe8" +
    "\150\uffe8\151\uffe8\152\uffe8\001\002\000\004\015\ufff7\001" +
    "\002\000\004\015\207\001\002\000\004\120\201\001\002" +
    "\000\022\015\uffc1\035\034\055\037\076\035\100\031\150" +
    "\043\151\032\152\007\001\002\000\022\015\uffc1\035\034" +
    "\055\037\076\035\100\031\150\043\151\032\152\007\001" +
    "\002\000\022\015\uffc1\035\034\055\037\076\035\100\031" +
    "\150\043\151\032\152\007\001\002\000\022\015\uffc1\035" +
    "\034\055\037\076\035\100\031\150\043\151\032\152\007" +
    "\001\002\000\004\015\uffc4\001\002\000\004\015\uffc3\001" +
    "\002\000\004\015\uffc5\001\002\000\004\015\uffc2\001\002" +
    "\000\014\110\202\111\203\112\051\131\052\152\007\001" +
    "\002\000\004\140\uffda\001\002\000\004\140\uffd9\001\002" +
    "\000\004\140\uffd8\001\002\000\004\140\206\001\002\000" +
    "\026\005\uffdb\007\uffdb\015\uffdb\035\uffdb\055\uffdb\076\uffdb" +
    "\100\uffdb\150\uffdb\151\uffdb\152\uffdb\001\002\000\004\076" +
    "\210\001\002\000\004\140\211\001\002\000\026\005\uffc8" +
    "\007\uffc8\015\uffc8\035\uffc8\055\uffc8\076\uffc8\100\uffc8\150" +
    "\uffc8\151\uffc8\152\uffc8\001\002\000\004\061\213\001\002" +
    "\000\004\112\214\001\002\000\004\116\223\001\002\000" +
    "\004\076\216\001\002\000\022\015\uffc1\035\034\055\037" +
    "\076\035\100\031\150\043\151\032\152\007\001\002\000" +
    "\004\015\220\001\002\000\004\076\221\001\002\000\004" +
    "\140\222\001\002\000\026\005\uffc7\007\uffc7\015\uffc7\035" +
    "\uffc7\055\uffc7\076\uffc7\100\uffc7\150\uffc7\151\uffc7\152\uffc7" +
    "\001\002\000\004\112\224\001\002\000\004\076\uffee\001" +
    "\002\000\010\112\226\146\230\152\227\001\002\000\004" +
    "\132\uffb3\001\002\000\004\132\uffb5\001\002\000\004\132" +
    "\uffb4\001\002\000\004\132\232\001\002\000\004\140\233" +
    "\001\002\000\026\005\uffb7\007\uffb7\015\uffb7\035\uffb7\055" +
    "\uffb7\076\uffb7\100\uffb7\150\uffb7\151\uffb7\152\uffb7\001\002" +
    "\000\010\112\051\131\052\152\007\001\002\000\004\076" +
    "\243\001\002\000\014\030\237\034\234\112\051\131\052" +
    "\152\007\001\002\000\010\112\051\131\052\152\007\001" +
    "\002\000\014\030\237\034\234\112\051\131\052\152\007" +
    "\001\002\000\004\076\uffb9\001\002\000\004\076\uffbb\001" +
    "\002\000\022\015\uffc1\035\034\055\037\076\035\100\031" +
    "\150\043\151\032\152\007\001\002\000\004\015\245\001" +
    "\002\000\004\076\246\001\002\000\004\140\247\001\002" +
    "\000\026\005\uffc6\007\uffc6\015\uffc6\035\uffc6\055\uffc6\076" +
    "\uffc6\100\uffc6\150\uffc6\151\uffc6\152\uffc6\001\002\000\014" +
    "\030\237\034\234\112\051\131\052\152\007\001\002\000" +
    "\004\076\uffba\001\002\000\004\046\ufffe\001\002\000\004" +
    "\002\uffff\001\002\000\004\113\023\001\002\000\006\120" +
    "\260\140\256\001\002\000\010\040\uffe9\046\uffe9\152\uffe9" +
    "\001\002\000\010\040\uffed\046\uffed\152\uffed\001\002\000" +
    "\010\110\261\111\262\112\051\001\002\000\004\140\266" +
    "\001\002\000\004\140\265\001\002\000\004\140\264\001" +
    "\002\000\010\040\uffec\046\uffec\152\uffec\001\002\000\010" +
    "\040\uffea\046\uffea\152\uffea\001\002\000\010\040\uffeb\046" +
    "\uffeb\152\uffeb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\007\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\012\007\015\010" +
    "\011\014\013\001\001\000\002\001\001\000\004\042\252" +
    "\001\001\000\012\004\251\007\015\010\011\014\013\001" +
    "\001\000\004\007\020\001\001\000\002\001\001\000\006" +
    "\007\015\010\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\025\007\015\010\011\014\013\001" +
    "\001\000\004\042\027\001\001\000\022\006\044\007\032" +
    "\016\040\021\046\026\043\027\037\034\041\037\035\001" +
    "\001\000\002\001\001\000\020\007\056\012\055\023\123" +
    "\024\052\031\235\033\234\034\054\001\001\000\002\001" +
    "\001\000\004\035\060\001\001\000\004\007\211\001\001" +
    "\000\016\007\167\016\172\021\173\027\171\030\166\037" +
    "\170\001\001\000\022\006\165\007\032\016\040\021\046" +
    "\026\043\027\037\034\041\037\035\001\001\000\016\007" +
    "\056\012\055\023\123\024\052\031\122\034\054\001\001" +
    "\000\022\006\121\007\032\016\040\021\046\026\043\027" +
    "\037\034\041\037\035\001\001\000\022\006\120\007\032" +
    "\016\040\021\046\026\043\027\037\034\041\037\035\001" +
    "\001\000\022\006\117\007\032\016\040\021\046\026\043" +
    "\027\037\034\041\037\035\001\001\000\002\001\001\000" +
    "\022\006\111\007\032\016\040\021\046\026\043\027\037" +
    "\034\041\037\035\001\001\000\002\001\001\000\014\007" +
    "\056\012\055\023\053\024\052\034\054\001\001\000\022" +
    "\006\047\007\032\016\040\021\046\026\043\027\037\034" +
    "\041\037\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\056\012\055\023\104\024\052\034\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\060\001\001\000\012\007" +
    "\065\012\064\032\061\036\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\065\012\064\032\061\036\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\056\012\055\024\102" +
    "\034\054\001\001\000\012\007\056\012\055\024\074\034" +
    "\054\001\001\000\004\025\077\001\001\000\012\007\056" +
    "\012\055\024\101\034\054\001\001\000\012\007\056\012" +
    "\055\024\100\034\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\032\016\137\017\133\021\141\027\135\034\140\037" +
    "\134\001\001\000\002\001\001\000\014\007\056\012\055" +
    "\023\125\024\052\034\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\056\012\055\023\123\024\052" +
    "\031\132\034\054\001\001\000\016\007\056\012\055\023" +
    "\123\024\052\031\131\034\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\032\016" +
    "\137\017\161\021\141\027\135\034\140\037\134\001\001" +
    "\000\020\007\032\016\137\017\160\021\141\027\135\034" +
    "\140\037\134\001\001\000\020\007\032\016\150\020\145" +
    "\021\152\027\147\034\151\037\146\001\001\000\020\007" +
    "\032\016\137\017\144\021\141\027\135\034\140\037\134" +
    "\001\001\000\020\007\032\016\137\017\143\021\141\027" +
    "\135\034\140\037\134\001\001\000\020\007\032\016\137" +
    "\017\142\021\141\027\135\034\140\037\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\032\016\150\020\157\021\152\027" +
    "\147\034\151\037\146\001\001\000\020\007\032\016\150" +
    "\020\156\021\152\027\147\034\151\037\146\001\001\000" +
    "\020\007\032\016\150\020\155\021\152\027\147\034\151" +
    "\037\146\001\001\000\020\007\032\016\150\020\154\021" +
    "\152\027\147\034\151\037\146\001\001\000\020\007\032" +
    "\016\150\020\153\021\152\027\147\034\151\037\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\167\016\172\021\173\027\171\030\177" +
    "\037\170\001\001\000\016\007\167\016\172\021\173\027" +
    "\171\030\176\037\170\001\001\000\016\007\167\016\172" +
    "\021\173\027\171\030\175\037\170\001\001\000\016\007" +
    "\167\016\172\021\173\027\171\030\174\037\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\056\012\055\022\204\023\203" +
    "\024\052\034\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\167\016\172\021\173\027" +
    "\171\030\216\037\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\056" +
    "\012\055\023\123\024\052\031\247\034\054\001\001\000" +
    "\002\001\001\000\020\007\056\012\055\023\123\024\052" +
    "\031\235\033\241\034\054\001\001\000\016\007\056\012" +
    "\055\023\123\024\052\031\237\034\054\001\001\000\020" +
    "\007\056\012\055\023\123\024\052\031\235\033\240\034" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\167\016\172\021\173\027\171\030\243\037\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\056\012\055\023\123\024" +
    "\052\031\235\033\250\034\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\254\001" +
    "\001\000\004\015\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Nodo raiz;
  // Metodo al se llama automaticamente ante algun error sintactico
  public void syntax_error (Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
  }

  // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
  public void unrecover_syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*A.root = F*/ 
                                          raiz = new Nodo();
                                          raiz.setTag("Nodo de inicio");
                                          raiz.addHijo((Nodo)hijo);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G CUERPO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*procedure(G)*/ 
                                          Nodo nod = new Nodo();
                                          nod.setTag("Procedure");
                                          nod.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            if(((Nodo)hijo2).getInfo().equals("tem")){
                                            for(int i = 0; i < ((Nodo)hijo2).hijos.size();i++){
                                              nod.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }else{
                                            nod.addHijo((Nodo)hijo2);
                                          }
                                          }
                                          
                                          nod.addHijo((Nodo)hijo3);
                                          RESULT = nod;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= C G 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = nodo(C, G)*/   
                                          Nodo tem = new Nodo();
                                          tem.setTag("tem");
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 == null){

                                          }else{
                                            if(((Nodo)hijo2).getInfo().equals("tem")){
                                            
                                            for(int i = 0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }else{
                                            tem.addHijo((Nodo)hijo2);
                                          }
                                          }
                                          
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= FUNCTION X RETURN Z IS G CUERPO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo4 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = function(X,return(Z),H)*/ 
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("Function");
                                                      tem.addHijo((Nodo)hijo1);
                                                      Nodo ret = new Nodo();
                                                      ret.setTag("Return");
                                                      ret.addHijo((Nodo)hijo2);
                                                      tem.addHijo(ret);
                                                      if(hijo3 != null){
                                                        if(((Nodo)hijo3).getInfo().equals("tem")){
                                                          for(int i = 0; i < ((Nodo)hijo3).hijos.size();i++){
                                                            tem.addHijo(((Nodo)hijo3).hijos.get(i));
                                                          }
                                                        }else{
                                                        tem.addHijo((Nodo)hijo3);
                                                      }
                                                      }
                                                      
                                                      tem.addHijo((Nodo)hijo4);
                                                      //tem.addHijo((Nodo)hijo3);
                                                      RESULT = tem;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= BEGIN I END X PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = body(I)*/ 

                                           // System.out.println("++++++++++++++++++++++++++");
                                          Nodo tem = new Nodo();
                                          tem.setTag("Cuerpo");
                                          //tem.addHijo((Nodo)hijo1);
                                          if(hijo1 != null){
                                            for(int i=0; i < ((Nodo)hijo1).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo1).hijos.get(i));
                                            }
                                          }
                                          
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // I ::= L I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= M I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= E I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= P I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= E3 I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= E4 I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // X ::= ID 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* Result = ID(att:i) */ 
                          RESULT = new Nodo("ID",i);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // X2 ::= X COMA X2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = declaracion (att: arreglo = X + X2.arreglo)*/ 
                                    RESULT = new Nodo("Declaracion","arreglo");
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // X2 ::= X 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* result = X*/
                              RESULT = (Nodo)hijo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Z ::= DATATYPES 
            {
              Nodo RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = dt; */ 
                          RESULT = new Nodo("DATA TYPE",dt);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N ::= NUM 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ RESULT = new Nodo("NUM",n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N1 ::= NUM DOUBD NUM 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = range(att: num1, num2)*/ RESULT = new Nodo("Rango",n1 + t + n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= X2 DOS Z D 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/ 
                                          ((Nodo)hijo2).addHijo((Nodo)hijo1);
                                          if(((Nodo)hijo3).getInfo().equals("nulo")){
                                          }else{
                                            ((Nodo)hijo2).addHijo((Nodo)hijo3);
                                          }
                                          RESULT = (Nodo)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // D ::= ASSIGN N PC 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = num*/ 
                          Nodo tem = new Nodo();
                          tem.setTag("ASSIGN");
                          tem.addHijo((Nodo)n);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // D ::= ASSIGN TRUE PC 
            {
              Nodo RESULT =null;
		/*result = true*/
                          RESULT = new Nodo("ASSIGN","TRUE");

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // D ::= ASSIGN FALSE PC 
            {
              Nodo RESULT =null;
		/*result = false*/
                          RESULT = new Nodo("ASSIGN","TRUE");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D ::= PC 
            {
              Nodo RESULT =null;
		/*result = null*/ 
                          RESULT = new Nodo("nulo","-1");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L ::= IF L1 L2 END IF PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*result = if(L1,body(L2))*/ 
                                            Nodo tem = new Nodo();
                                            tem.setTag("IF");
                                            tem.addHijo((Nodo)hijo1);
                                            Nodo tem2 = new Nodo();
                                            tem2.setTag("Cuerpo");
                                            if(hijo2 != null){
                                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                              }
                                            }
                                            tem.addHijo(tem2);
                                            RESULT = tem;
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L2 ::= L L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(L+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }     
                            RESULT = tem;                       
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L2 ::= E L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(E+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }     
                            RESULT = tem;  
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L2 ::= M L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(M+l2)*/ 
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }     
                            RESULT = tem;  
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L2 ::= P L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(P+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }     
                            RESULT = tem;  
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L2 ::= E4 L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }     
                            RESULT = tem;  
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L2 ::= ELSE L4 
            {
              Nodo RESULT =null;
		/**/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L2 ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L4 ::= E L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L4 ::= L L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L4 ::= M L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L4 ::= P L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L4 ::= E4 L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= X ASSIGN E2 PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = asign(X, E2)*/ 
                                                Nodo tem = new Nodo("Asignacion","::=");
                                                tem.addHijo((Nodo)hijo1);
                                                tem.addHijo((Nodo)hijo2);
                                                RESULT = tem;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E2 ::= TRUE 
            {
              Nodo RESULT =null;
		 /*result = true*/ 
                      RESULT = new Nodo("TRUE","1");
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E2 ::= FALSE 
            {
              Nodo RESULT =null;
		 /*result = false*/RESULT = new Nodo("FALSE","0"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E2 ::= E5 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* */RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E4 ::= X PA 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = ejec(X, PA)*/
                                  Nodo tem = new Nodo();
                                  tem.setTag("Ejecucion");
                                  tem.addHijo((Nodo)hijo1);
                                  tem.addHijo((Nodo)hijo2);
                                  RESULT = tem;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PA ::= LP PA2 PC 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = pa2*/ 
                                        RESULT = hijo != null ? (Nodo)hijo : null;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PA2 ::= L3 COMA PA2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(L3+PA2)*/ 
                                    Nodo tem = new Nodo("Argumentos","arg");
                                    tem.addHijo((Nodo)hijo1);
                                    if(hijo2 != null){
                                      for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                        tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                      }
                                    }
                                    RESULT = (Nodo)tem;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PA2 ::= L3 RP 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*rsult = arreglo(L3)*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PA2 ::= RP 
            {
              Nodo RESULT =null;
		 /*result = null*/ 
                                    RESULT = null;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E5 ::= E6 OP E6 E7 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E7.op(op(E6, E6),E7.E6) */ 
                                            Nodo tem = new Nodo("OP",t);
                                            tem.addHijo((Nodo)hijo1);
                                            tem.addHijo((Nodo)hijo2);
                                            if(hijo3 == null){
                                              RESULT = tem;
                                            }else{
                                              ((Nodo)hijo3).addHijo((Nodo)tem);
                                              RESULT = (Nodo)hijo3;
                                            }
                                            
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E5 ::= E6 MOD E6 E7 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            Nodo tem = new Nodo("MOD",t);
                                            tem.addHijo((Nodo)hijo1);
                                            tem.addHijo((Nodo)hijo2);
                                            if(hijo3 == null){
                                              RESULT = tem;
                                            }else{
                                              ((Nodo)hijo3).addHijo((Nodo)tem);
                                              RESULT = (Nodo)hijo3;
                                            }
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E5 ::= E6 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Nodo)hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E6 ::= N 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l3*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E6 ::= E4 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E4*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E6 ::= LP E5 RP 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = E5*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E7 ::= OP E6 
            {
              Nodo RESULT =null;
		 /*result = arreglo(op,E6)*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E7 ::= MOD E6 
            {
              Nodo RESULT =null;
		 /*result = arreglo(mod,E6)*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E7 ::= 
            {
              Nodo RESULT =null;
		 /*result = null*/ RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= RETURN E5 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // M ::= LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                              Nodo tem = new Nodo("Loop","0");
                                              Nodo tem2 = new Nodo();
                                              tem2.setTag("Cuerpo");
                                              for(int i=0; i < ((Nodo)hijo).hijos.size();i++){
                                                tem2.addHijo(((Nodo)hijo).hijos.get(i));
                                              }
                                              tem.addHijo(tem2);
                                              RESULT = tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // M ::= FOR X IN N1 LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                                                            Nodo tem = new Nodo("FOR","0");
                                                            Nodo tem2 = new Nodo();
                                                            tem.addHijo((Nodo)hijo1);
                                                            tem2.setTag("Cuerpo");
                                                            if(hijo2 != null){
                                                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                                tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                                              }
                                                            }
                                                            
                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = tem;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // M ::= WHILE L6 LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                                                          Nodo tem = new Nodo();
                                                          tem.setTag("WHILE");
                                                          tem.addHijo((Nodo)hijo1);
                                                          Nodo tem2 = new Nodo();
                                                          tem2.setTag("Cuerpo");
                                                          if(hijo2 != null){
                                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                              tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                                            }
                                                          }
                                                            
                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = tem;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // M1 ::= M M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // M1 ::= E M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // M1 ::= L M1 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // M1 ::= P M1 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // M1 ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L1 ::= E5 OPREL E5 AND L1 
            {
              Nodo RESULT =null;
		 /* result = AND (OPREL(e5,e5), L1)*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L1 ::= E5 OPREL E5 OR L1 
            {
              Nodo RESULT =null;
		  /*result = OR (OPREL(e5,e5), L1)*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L1 ::= E5 OPREL E5 THEN 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  /* result = oprel(e5, e5)*/
                                Nodo tem = new Nodo("OPREL",t);
                                tem.addHijo((Nodo)hijo1);
                                tem.addHijo((Nodo)hijo2);
                                RESULT = tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L3 ::= N 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ 
                            RESULT = (Nodo)n;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L3 ::= X 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */ 
                            RESULT = (Nodo)x;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L6 ::= L1 L6 
            {
              Nodo RESULT =null;
		 /*result = l1*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L6 ::= AND L1 L6 
            {
              Nodo RESULT =null;
		 /*result = l1*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L6 ::= OR L1 L6 
            {
              Nodo RESULT =null;
		 /*result = l1*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // P ::= GET LP P1 RP PC 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // P ::= PUT LP P2 RP PC 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // P1 ::= ID 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // P2 ::= ID 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // P2 ::= EXP 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // P2 ::= NUM 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
