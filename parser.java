
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\004\004\000\002\004\011\000\002\004\004" +
    "\000\002\005\004\000\002\005\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\012\003\000\002\013\005\000" +
    "\002\014\006\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\005" +
    "\000\002\017\005\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\005\000\002" +
    "\021\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\034\004\000\002\035\004\000\002\036\005" +
    "\000\002\036\004\000\002\036\003\000\002\023\006\000" +
    "\002\023\006\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\002\000\002\026\004\000\002\027\004" +
    "\000\002\027\010\000\002\027\005\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\005\000\002\031\007\000\002\031\007\000\002\031" +
    "\006\000\002\032\003\000\002\032\003\000\002\033\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\037\007\000\002\037\007\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\056\005\001\002\000\004\002\264\001" +
    "\002\000\004\152\007\001\002\000\004\002\000\001\002" +
    "\000\060\003\ufff1\007\ufff1\015\ufff1\030\ufff1\034\ufff1\035" +
    "\ufff1\054\ufff1\055\ufff1\065\ufff1\076\ufff1\100\ufff1\104\ufff1" +
    "\120\ufff1\131\ufff1\132\ufff1\133\ufff1\134\ufff1\136\ufff1\137" +
    "\ufff1\140\ufff1\150\ufff1\151\ufff1\152\ufff1\001\002\000\004" +
    "\065\011\001\002\000\010\040\016\046\014\152\007\001" +
    "\002\000\004\137\255\001\002\000\004\002\uffff\001\002" +
    "\000\026\003\051\007\037\015\036\035\052\055\042\076" +
    "\035\100\034\150\053\151\046\152\007\001\002\000\010" +
    "\040\016\046\014\152\007\001\002\000\004\152\007\001" +
    "\002\000\006\134\020\137\uffef\001\002\000\004\152\007" +
    "\001\002\000\004\137\ufff0\001\002\000\004\007\023\001" +
    "\002\000\004\113\025\001\002\000\004\065\026\001\002" +
    "\000\010\065\uffee\120\uffee\140\uffee\001\002\000\006\046" +
    "\030\152\007\001\002\000\010\040\016\046\014\152\007" +
    "\001\002\000\026\003\051\007\037\015\036\035\052\055" +
    "\042\076\035\100\034\150\053\151\046\152\007\001\002" +
    "\000\006\046\030\152\007\001\002\000\010\040\ufffb\046" +
    "\ufffb\152\ufffb\001\002\000\006\120\104\131\132\001\002" +
    "\000\016\030\243\034\237\076\241\112\061\131\105\152" +
    "\007\001\002\000\022\015\074\035\052\055\042\076\035" +
    "\100\034\150\053\151\046\152\007\001\002\000\004\152" +
    "\007\001\002\000\010\112\061\131\105\152\007\001\002" +
    "\000\026\003\051\007\037\015\036\035\052\055\042\076" +
    "\035\100\034\150\053\151\046\152\007\001\002\000\026" +
    "\003\051\007\037\015\036\035\052\055\042\076\035\100" +
    "\034\150\053\151\046\152\007\001\002\000\010\112\061" +
    "\131\105\152\007\001\002\000\026\003\051\007\037\015" +
    "\036\035\052\055\042\076\035\100\034\150\053\151\046" +
    "\152\007\001\002\000\026\003\051\007\037\015\036\035" +
    "\052\055\042\076\035\100\034\150\053\151\046\152\007" +
    "\001\002\000\026\003\051\007\037\015\036\035\052\055" +
    "\042\076\035\100\034\150\053\151\046\152\007\001\002" +
    "\000\004\131\152\001\002\000\010\040\016\046\014\152" +
    "\007\001\002\000\026\003\051\007\037\015\036\035\052" +
    "\055\042\076\035\100\034\150\053\151\046\152\007\001" +
    "\002\000\026\003\051\007\037\015\036\035\052\055\042" +
    "\076\035\100\034\150\053\151\046\152\007\001\002\000" +
    "\004\112\061\001\002\000\004\131\054\001\002\000\004" +
    "\152\056\001\002\000\004\132\057\001\002\000\004\132" +
    "\uffb5\001\002\000\004\140\060\001\002\000\032\003\uffb7" +
    "\005\uffb7\007\uffb7\011\uffb7\015\uffb7\035\uffb7\055\uffb7\076" +
    "\uffb7\100\uffb7\150\uffb7\151\uffb7\152\uffb7\001\002\000\052" +
    "\003\uffed\007\uffed\015\uffed\030\uffed\034\uffed\035\uffed\054" +
    "\uffed\055\uffed\061\uffed\076\uffed\100\uffed\104\uffed\132\uffed" +
    "\133\uffed\134\uffed\136\uffed\140\uffed\150\uffed\151\uffed\152" +
    "\uffed\001\002\000\004\061\063\001\002\000\004\112\064" +
    "\001\002\000\004\116\145\001\002\000\004\076\066\001" +
    "\002\000\022\015\074\035\052\055\042\076\035\100\034" +
    "\150\053\151\046\152\007\001\002\000\032\003\uffc7\005" +
    "\uffc7\007\uffc7\011\uffc7\015\uffc7\035\uffc7\055\uffc7\076\uffc7" +
    "\100\uffc7\150\uffc7\151\uffc7\152\uffc7\001\002\000\004\120" +
    "\104\001\002\000\022\015\074\035\052\055\042\076\035" +
    "\100\034\150\053\151\046\152\007\001\002\000\022\015" +
    "\074\035\052\055\042\076\035\100\034\150\053\151\046" +
    "\152\007\001\002\000\022\015\074\035\052\055\042\076" +
    "\035\100\034\150\053\151\046\152\007\001\002\000\004" +
    "\076\077\001\002\000\022\015\074\035\052\055\042\076" +
    "\035\100\034\150\053\151\046\152\007\001\002\000\032" +
    "\003\uffc4\005\uffc4\007\uffc4\011\uffc4\015\uffc4\035\uffc4\055" +
    "\uffc4\076\uffc4\100\uffc4\150\uffc4\151\uffc4\152\uffc4\001\002" +
    "\000\004\140\100\001\002\000\032\003\uffc1\005\uffc1\007" +
    "\uffc1\011\uffc1\015\uffc1\035\uffc1\055\uffc1\076\uffc1\100\uffc1" +
    "\150\uffc1\151\uffc1\152\uffc1\001\002\000\032\003\uffc3\005" +
    "\uffc3\007\uffc3\011\uffc3\015\uffc3\035\uffc3\055\uffc3\076\uffc3" +
    "\100\uffc3\150\uffc3\151\uffc3\152\uffc3\001\002\000\032\003" +
    "\uffc5\005\uffc5\007\uffc5\011\uffc5\015\uffc5\035\uffc5\055\uffc5" +
    "\076\uffc5\100\uffc5\150\uffc5\151\uffc5\152\uffc5\001\002\000" +
    "\032\003\uffc2\005\uffc2\007\uffc2\011\uffc2\015\uffc2\035\uffc2" +
    "\055\uffc2\076\uffc2\100\uffc2\150\uffc2\151\uffc2\152\uffc2\001" +
    "\002\000\014\110\110\111\112\112\061\131\105\152\007" +
    "\001\002\000\010\112\061\131\105\152\007\001\002\000" +
    "\050\003\uffbc\007\uffbc\015\uffbc\030\uffbc\034\uffbc\035\uffbc" +
    "\054\uffbc\055\uffbc\076\uffbc\100\uffbc\104\uffbc\131\132\132" +
    "\uffbc\133\uffbc\136\uffbc\140\uffbc\150\uffbc\151\uffbc\152\uffbc" +
    "\001\002\000\046\003\uffcf\007\uffcf\015\uffcf\030\uffcf\034" +
    "\uffcf\035\uffcf\054\uffcf\055\uffcf\076\uffcf\100\uffcf\104\uffcf" +
    "\132\uffcf\133\uffcf\136\uffcf\140\uffcf\150\uffcf\151\uffcf\152" +
    "\uffcf\001\002\000\004\140\uffda\001\002\000\050\003\uffbd" +
    "\007\uffbd\015\uffbd\030\uffbd\034\uffbd\035\uffbd\054\uffbd\055" +
    "\uffbd\076\uffbd\100\uffbd\104\uffbd\132\uffbd\133\uffbd\134\uffbd" +
    "\136\uffbd\140\uffbd\150\uffbd\151\uffbd\152\uffbd\001\002\000" +
    "\004\140\uffd9\001\002\000\046\003\uffd0\007\uffd0\015\uffd0" +
    "\030\uffd0\034\uffd0\035\uffd0\054\uffd0\055\uffd0\076\uffd0\100" +
    "\uffd0\104\121\132\uffd0\133\120\136\uffd0\140\uffd0\150\uffd0" +
    "\151\uffd0\152\uffd0\001\002\000\004\140\uffd8\001\002\000" +
    "\046\003\uffce\007\uffce\015\uffce\030\uffce\034\uffce\035\uffce" +
    "\054\uffce\055\uffce\076\uffce\100\uffce\104\uffce\132\uffce\133" +
    "\uffce\136\uffce\140\uffce\150\uffce\151\uffce\152\uffce\001\002" +
    "\000\004\140\117\001\002\000\032\003\uffdb\005\uffdb\007" +
    "\uffdb\011\uffdb\015\uffdb\035\uffdb\055\uffdb\076\uffdb\100\uffdb" +
    "\150\uffdb\151\uffdb\152\uffdb\001\002\000\010\112\061\131" +
    "\105\152\007\001\002\000\010\112\061\131\105\152\007" +
    "\001\002\000\046\003\uffca\007\uffca\015\uffca\030\uffca\034" +
    "\uffca\035\uffca\054\uffca\055\uffca\076\uffca\100\uffca\104\124" +
    "\132\uffca\133\123\136\uffca\140\uffca\150\uffca\151\uffca\152" +
    "\uffca\001\002\000\010\112\061\131\105\152\007\001\002" +
    "\000\010\112\061\131\105\152\007\001\002\000\042\003" +
    "\uffd1\007\uffd1\015\uffd1\030\uffd1\034\uffd1\035\uffd1\054\uffd1" +
    "\055\uffd1\076\uffd1\100\uffd1\132\uffd1\136\uffd1\140\uffd1\150" +
    "\uffd1\151\uffd1\152\uffd1\001\002\000\042\003\uffcb\007\uffcb" +
    "\015\uffcb\030\uffcb\034\uffcb\035\uffcb\054\uffcb\055\uffcb\076" +
    "\uffcb\100\uffcb\132\uffcb\136\uffcb\140\uffcb\150\uffcb\151\uffcb" +
    "\152\uffcb\001\002\000\042\003\uffcc\007\uffcc\015\uffcc\030" +
    "\uffcc\034\uffcc\035\uffcc\054\uffcc\055\uffcc\076\uffcc\100\uffcc" +
    "\132\uffcc\136\uffcc\140\uffcc\150\uffcc\151\uffcc\152\uffcc\001" +
    "\002\000\046\003\uffca\007\uffca\015\uffca\030\uffca\034\uffca" +
    "\035\uffca\054\uffca\055\uffca\076\uffca\100\uffca\104\124\132" +
    "\uffca\133\123\136\uffca\140\uffca\150\uffca\151\uffca\152\uffca" +
    "\001\002\000\042\003\uffd2\007\uffd2\015\uffd2\030\uffd2\034" +
    "\uffd2\035\uffd2\054\uffd2\055\uffd2\076\uffd2\100\uffd2\132\uffd2" +
    "\136\uffd2\140\uffd2\150\uffd2\151\uffd2\152\uffd2\001\002\000" +
    "\010\112\061\132\136\152\007\001\002\000\046\003\uffd7" +
    "\007\uffd7\015\uffd7\030\uffd7\034\uffd7\035\uffd7\054\uffd7\055" +
    "\uffd7\076\uffd7\100\uffd7\104\uffd7\132\uffd7\133\uffd7\136\uffd7" +
    "\140\uffd7\150\uffd7\151\uffd7\152\uffd7\001\002\000\006\132" +
    "\141\134\140\001\002\000\046\003\uffd6\007\uffd6\015\uffd6" +
    "\030\uffd6\034\uffd6\035\uffd6\054\uffd6\055\uffd6\076\uffd6\100" +
    "\uffd6\104\uffd6\132\uffd6\133\uffd6\136\uffd6\140\uffd6\150\uffd6" +
    "\151\uffd6\152\uffd6\001\002\000\046\003\uffd3\007\uffd3\015" +
    "\uffd3\030\uffd3\034\uffd3\035\uffd3\054\uffd3\055\uffd3\076\uffd3" +
    "\100\uffd3\104\uffd3\132\uffd3\133\uffd3\136\uffd3\140\uffd3\150" +
    "\uffd3\151\uffd3\152\uffd3\001\002\000\006\132\uffbc\134\uffbc" +
    "\001\002\000\010\112\061\132\136\152\007\001\002\000" +
    "\046\003\uffd4\007\uffd4\015\uffd4\030\uffd4\034\uffd4\035\uffd4" +
    "\054\uffd4\055\uffd4\076\uffd4\100\uffd4\104\uffd4\132\uffd4\133" +
    "\uffd4\136\uffd4\140\uffd4\150\uffd4\151\uffd4\152\uffd4\001\002" +
    "\000\046\003\uffd5\007\uffd5\015\uffd5\030\uffd5\034\uffd5\035" +
    "\uffd5\054\uffd5\055\uffd5\076\uffd5\100\uffd5\104\uffd5\132\uffd5" +
    "\133\uffd5\136\uffd5\140\uffd5\150\uffd5\151\uffd5\152\uffd5\001" +
    "\002\000\004\132\144\001\002\000\046\003\uffcd\007\uffcd" +
    "\015\uffcd\030\uffcd\034\uffcd\035\uffcd\054\uffcd\055\uffcd\076" +
    "\uffcd\100\uffcd\104\uffcd\132\uffcd\133\uffcd\136\uffcd\140\uffcd" +
    "\150\uffcd\151\uffcd\152\uffcd\001\002\000\004\112\146\001" +
    "\002\000\004\076\uffec\001\002\000\012\002\ufff3\040\ufff3" +
    "\046\ufff3\152\ufff3\001\002\000\012\002\ufff7\040\ufff7\046" +
    "\ufff7\152\ufff7\001\002\000\010\040\ufffa\046\ufffa\152\ufffa" +
    "\001\002\000\010\112\154\146\155\152\153\001\002\000" +
    "\004\132\uffb4\001\002\000\004\132\uffb2\001\002\000\004" +
    "\132\uffb3\001\002\000\004\132\157\001\002\000\004\140" +
    "\160\001\002\000\032\003\uffb6\005\uffb6\007\uffb6\011\uffb6" +
    "\015\uffb6\035\uffb6\055\uffb6\076\uffb6\100\uffb6\150\uffb6\151" +
    "\uffb6\152\uffb6\001\002\000\012\002\ufff5\040\ufff5\046\ufff5" +
    "\152\ufff5\001\002\000\012\002\ufff9\040\ufff9\046\ufff9\152" +
    "\ufff9\001\002\000\012\002\ufff4\040\ufff4\046\ufff4\152\ufff4" +
    "\001\002\000\026\005\177\011\202\015\203\035\052\055" +
    "\042\076\035\100\034\150\053\151\046\152\007\001\002" +
    "\000\004\136\166\001\002\000\010\112\061\131\105\152" +
    "\007\001\002\000\010\030\172\034\171\054\170\001\002" +
    "\000\036\005\uffbe\011\uffbe\015\uffbe\030\uffbe\034\uffbe\035" +
    "\uffbe\055\uffbe\076\uffbe\100\uffbe\112\uffbe\131\uffbe\150\uffbe" +
    "\151\uffbe\152\uffbe\001\002\000\010\112\061\131\105\152" +
    "\007\001\002\000\010\112\061\131\105\152\007\001\002" +
    "\000\036\005\uffbf\011\uffbf\015\uffbf\030\uffbf\034\uffbf\035" +
    "\uffbf\055\uffbf\076\uffbf\100\uffbf\112\uffbf\131\uffbf\150\uffbf" +
    "\151\uffbf\152\uffbf\001\002\000\036\005\uffc0\011\uffc0\015" +
    "\uffc0\030\uffc0\034\uffc0\035\uffc0\055\uffc0\076\uffc0\100\uffc0" +
    "\112\uffc0\131\uffc0\150\uffc0\151\uffc0\152\uffc0\001\002\000" +
    "\032\003\uffe8\005\uffe8\007\uffe8\011\uffe8\015\uffe8\035\uffe8" +
    "\055\uffe8\076\uffe8\100\uffe8\150\uffe8\151\uffe8\152\uffe8\001" +
    "\002\000\026\005\177\011\202\015\203\035\052\055\042" +
    "\076\035\100\034\150\053\151\046\152\007\001\002\000" +
    "\022\015\215\035\052\055\042\076\035\100\034\150\053" +
    "\151\046\152\007\001\002\000\026\005\177\011\202\015" +
    "\203\035\052\055\042\076\035\100\034\150\053\151\046" +
    "\152\007\001\002\000\026\005\177\011\202\015\203\035" +
    "\052\055\042\076\035\100\034\150\053\151\046\152\007" +
    "\001\002\000\010\112\061\131\105\152\007\001\002\000" +
    "\004\055\206\001\002\000\026\005\177\011\202\015\203" +
    "\035\052\055\042\076\035\100\034\150\053\151\046\152" +
    "\007\001\002\000\032\003\uffe6\005\uffe6\007\uffe6\011\uffe6" +
    "\015\uffe6\035\uffe6\055\uffe6\076\uffe6\100\uffe6\150\uffe6\151" +
    "\uffe6\152\uffe6\001\002\000\004\140\207\001\002\000\032" +
    "\003\uffe1\005\uffe1\007\uffe1\011\uffe1\015\uffe1\035\uffe1\055" +
    "\uffe1\076\uffe1\100\uffe1\150\uffe1\151\uffe1\152\uffe1\001\002" +
    "\000\022\015\215\035\052\055\042\076\035\100\034\150" +
    "\053\151\046\152\007\001\002\000\032\003\uffe2\005\uffe2" +
    "\007\uffe2\011\uffe2\015\uffe2\035\uffe2\055\uffe2\076\uffe2\100" +
    "\uffe2\150\uffe2\151\uffe2\152\uffe2\001\002\000\022\015\215" +
    "\035\052\055\042\076\035\100\034\150\053\151\046\152" +
    "\007\001\002\000\022\015\215\035\052\055\042\076\035" +
    "\100\034\150\053\151\046\152\007\001\002\000\022\015" +
    "\215\035\052\055\042\076\035\100\034\150\053\151\046" +
    "\152\007\001\002\000\004\055\220\001\002\000\022\015" +
    "\215\035\052\055\042\076\035\100\034\150\053\151\046" +
    "\152\007\001\002\000\032\003\uffe0\005\uffe0\007\uffe0\011" +
    "\uffe0\015\uffe0\035\uffe0\055\uffe0\076\uffe0\100\uffe0\150\uffe0" +
    "\151\uffe0\152\uffe0\001\002\000\004\140\221\001\002\000" +
    "\032\003\uffdc\005\uffdc\007\uffdc\011\uffdc\015\uffdc\035\uffdc" +
    "\055\uffdc\076\uffdc\100\uffdc\150\uffdc\151\uffdc\152\uffdc\001" +
    "\002\000\032\003\uffdf\005\uffdf\007\uffdf\011\uffdf\015\uffdf" +
    "\035\uffdf\055\uffdf\076\uffdf\100\uffdf\150\uffdf\151\uffdf\152" +
    "\uffdf\001\002\000\032\003\uffde\005\uffde\007\uffde\011\uffde" +
    "\015\uffde\035\uffde\055\uffde\076\uffde\100\uffde\150\uffde\151" +
    "\uffde\152\uffde\001\002\000\032\003\uffdd\005\uffdd\007\uffdd" +
    "\011\uffdd\015\uffdd\035\uffdd\055\uffdd\076\uffdd\100\uffdd\150" +
    "\uffdd\151\uffdd\152\uffdd\001\002\000\032\003\uffe7\005\uffe7" +
    "\007\uffe7\011\uffe7\015\uffe7\035\uffe7\055\uffe7\076\uffe7\100" +
    "\uffe7\150\uffe7\151\uffe7\152\uffe7\001\002\000\032\003\uffe5" +
    "\005\uffe5\007\uffe5\011\uffe5\015\uffe5\035\uffe5\055\uffe5\076" +
    "\uffe5\100\uffe5\150\uffe5\151\uffe5\152\uffe5\001\002\000\032" +
    "\003\uffe3\005\uffe3\007\uffe3\011\uffe3\015\uffe3\035\uffe3\055" +
    "\uffe3\076\uffe3\100\uffe3\150\uffe3\151\uffe3\152\uffe3\001\002" +
    "\000\032\003\uffe4\005\uffe4\007\uffe4\011\uffe4\015\uffe4\035" +
    "\uffe4\055\uffe4\076\uffe4\100\uffe4\150\uffe4\151\uffe4\152\uffe4" +
    "\001\002\000\012\002\ufff8\040\ufff8\046\ufff8\152\ufff8\001" +
    "\002\000\012\002\ufff6\040\ufff6\046\ufff6\152\ufff6\001\002" +
    "\000\026\003\uffc9\007\uffc9\015\uffc9\035\uffc9\055\uffc9\076" +
    "\uffc9\100\uffc9\150\uffc9\151\uffc9\152\uffc9\001\002\000\004" +
    "\140\235\001\002\000\012\002\ufff2\040\ufff2\046\ufff2\152" +
    "\ufff2\001\002\000\032\003\uffc8\005\uffc8\007\uffc8\011\uffc8" +
    "\015\uffc8\035\uffc8\055\uffc8\076\uffc8\100\uffc8\150\uffc8\151" +
    "\uffc8\152\uffc8\001\002\000\010\112\061\131\105\152\007" +
    "\001\002\000\022\015\074\035\052\055\042\076\035\100" +
    "\034\150\053\151\046\152\007\001\002\000\022\015\uffb8" +
    "\035\uffb8\055\uffb8\076\uffb8\100\uffb8\150\uffb8\151\uffb8\152" +
    "\uffb8\001\002\000\016\030\243\034\237\076\241\112\061" +
    "\131\105\152\007\001\002\000\010\112\061\131\105\152" +
    "\007\001\002\000\016\030\243\034\237\076\241\112\061" +
    "\131\105\152\007\001\002\000\022\015\uffb9\035\uffb9\055" +
    "\uffb9\076\uffb9\100\uffb9\150\uffb9\151\uffb9\152\uffb9\001\002" +
    "\000\022\015\uffbb\035\uffbb\055\uffbb\076\uffbb\100\uffbb\150" +
    "\uffbb\151\uffbb\152\uffbb\001\002\000\032\003\uffc6\005\uffc6" +
    "\007\uffc6\011\uffc6\015\uffc6\035\uffc6\055\uffc6\076\uffc6\100" +
    "\uffc6\150\uffc6\151\uffc6\152\uffc6\001\002\000\016\030\243" +
    "\034\237\076\241\112\061\131\105\152\007\001\002\000" +
    "\022\015\uffba\035\uffba\055\uffba\076\uffba\100\uffba\150\uffba" +
    "\151\uffba\152\uffba\001\002\000\012\002\ufffd\040\ufffd\046" +
    "\ufffd\152\ufffd\001\002\000\012\002\ufffe\040\ufffe\046\ufffe" +
    "\152\ufffe\001\002\000\012\002\ufffc\040\ufffc\046\ufffc\152" +
    "\ufffc\001\002\000\004\113\025\001\002\000\006\120\261" +
    "\140\257\001\002\000\010\040\uffe9\046\uffe9\152\uffe9\001" +
    "\002\000\010\040\uffeb\046\uffeb\152\uffeb\001\002\000\004" +
    "\112\061\001\002\000\004\140\263\001\002\000\010\040" +
    "\uffea\046\uffea\152\uffea\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\007\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\012\007\016\010" +
    "\011\014\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\253\007\032\016\043\021\047\026\044\027" +
    "\040\034\042\037\037\001\001\000\012\004\252\007\016" +
    "\010\011\014\014\001\001\000\004\007\021\001\001\000" +
    "\002\001\001\000\006\007\016\010\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\026\007\016" +
    "\010\011\014\030\001\001\000\012\004\251\007\016\010" +
    "\011\014\014\001\001\000\022\006\046\007\032\016\043" +
    "\021\047\026\044\027\040\034\042\037\037\001\001\000" +
    "\012\005\031\007\016\010\011\014\030\001\001\000\002" +
    "\001\001\000\004\035\132\001\001\000\022\007\105\012" +
    "\110\023\164\024\112\031\241\032\106\033\237\034\114" +
    "\001\001\000\016\007\067\016\072\021\074\027\071\030" +
    "\235\037\070\001\001\000\004\007\233\001\001\000\016" +
    "\007\105\012\110\023\232\024\112\032\106\034\114\001" +
    "\001\000\022\006\231\007\032\016\043\021\047\026\044" +
    "\027\040\034\042\037\037\001\001\000\022\006\230\007" +
    "\032\016\043\021\047\026\044\027\040\034\042\037\037" +
    "\001\001\000\020\007\105\012\110\023\164\024\112\031" +
    "\163\032\106\034\114\001\001\000\022\006\162\007\032" +
    "\016\043\021\047\026\044\027\040\034\042\037\037\001" +
    "\001\000\022\006\161\007\032\016\043\021\047\026\044" +
    "\027\040\034\042\037\037\001\001\000\022\006\160\007" +
    "\032\016\043\021\047\026\044\027\040\034\042\037\037" +
    "\001\001\000\002\001\001\000\012\004\150\007\016\010" +
    "\011\014\014\001\001\000\022\006\147\007\032\016\043" +
    "\021\047\026\044\027\040\034\042\037\037\001\001\000" +
    "\022\006\146\007\032\016\043\021\047\026\044\027\040" +
    "\034\042\037\037\001\001\000\004\012\061\001\001\000" +
    "\002\001\001\000\004\040\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\067\016" +
    "\072\021\074\027\071\030\066\037\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\067\016\072\021" +
    "\074\027\071\030\102\037\070\001\001\000\016\007\067" +
    "\016\072\021\074\027\071\030\101\037\070\001\001\000" +
    "\016\007\067\016\072\021\074\027\071\030\100\037\070" +
    "\001\001\000\002\001\001\000\016\007\067\016\072\021" +
    "\074\027\071\030\075\037\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\105\012\110" +
    "\022\115\023\113\024\112\032\106\034\114\001\001\000" +
    "\016\007\105\012\110\023\142\024\112\032\106\034\114" +
    "\001\001\000\004\035\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\105\012\110\024\127" +
    "\032\106\034\114\001\001\000\014\007\105\012\110\024" +
    "\121\032\106\034\114\001\001\000\004\025\124\001\001" +
    "\000\014\007\105\012\110\024\126\032\106\034\114\001" +
    "\001\000\014\007\105\012\110\024\125\032\106\034\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\130\001\001\000\002\001\001\000\012" +
    "\007\136\012\110\032\133\036\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\136\012\110\032\133\036" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\067\016\200\017\174\021\203" +
    "\027\177\037\175\001\001\000\002\001\001\000\016\007" +
    "\105\012\110\023\166\024\112\032\106\034\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\105\012" +
    "\110\023\164\024\112\031\173\032\106\034\114\001\001" +
    "\000\020\007\105\012\110\023\164\024\112\031\172\032" +
    "\106\034\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\067\016\200\017\227\021" +
    "\203\027\177\037\175\001\001\000\016\007\067\016\213" +
    "\020\226\021\215\027\212\037\211\001\001\000\016\007" +
    "\067\016\200\017\225\021\203\027\177\037\175\001\001" +
    "\000\016\007\067\016\200\017\224\021\203\027\177\037" +
    "\175\001\001\000\020\007\105\012\110\023\164\024\112" +
    "\031\207\032\106\034\114\001\001\000\002\001\001\000" +
    "\016\007\067\016\200\017\204\021\203\027\177\037\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\067\016\213\020\210\021\215\027\212" +
    "\037\211\001\001\000\002\001\001\000\016\007\067\016" +
    "\213\020\223\021\215\027\212\037\211\001\001\000\016" +
    "\007\067\016\213\020\222\021\215\027\212\037\211\001" +
    "\001\000\016\007\067\016\213\020\221\021\215\027\212" +
    "\037\211\001\001\000\002\001\001\000\016\007\067\016" +
    "\213\020\216\021\215\027\212\037\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\105\012\110\023\164\024\112\031\247\032\106\034\114" +
    "\001\001\000\016\007\067\016\072\021\074\027\071\030" +
    "\246\037\070\001\001\000\002\001\001\000\022\007\105" +
    "\012\110\023\164\024\112\031\241\032\106\033\245\034" +
    "\114\001\001\000\020\007\105\012\110\023\164\024\112" +
    "\031\243\032\106\034\114\001\001\000\022\007\105\012" +
    "\110\023\164\024\112\031\241\032\106\033\244\034\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\105\012\110\023\164\024\112\031\241" +
    "\032\106\033\250\034\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\255\001\001\000\004\015\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static LinkedList<String> msgErrores = new LinkedList<String>();

  public void report_error (String message, Object info) {
    /* if (s != null) {
      Symbol s2 = (Symbol) s;
      int fila = s2.right;
      int columna = s2.left;
      String currentToken = "Hola";
      System.out.println(message + " fila: " + fila + " columna: " + columna +
        " token inesperado " + currentToken);
    } */

    if (message.equalsIgnoreCase("Syntax error")) {
      message = "Error Sintactico";
    } else if (message.equalsIgnoreCase("Couldn't repair and continue parse")) {
      message = "Error";
    }
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.right >= 0) {
        System.out.println(s.right);
        message += ": en linea " + (s.right + 1);
        if (s.left >= 0) {
          message += ", columna " + (s.left + 1);
        }
        if(getScanner() instanceof Ada95) {
          message += "; no se esperaba '" + ((Ada95)getScanner()).getCurrentText()+"'";
        }
      }
    }
    msgErrores.add(message);
  }

  public void report_fatal_error (String message, Object info) {
    /* Symbol s2 = (Symbol) s;
    int fila = s2.right;
    int columna = s2.left;
    String currentToken = s2.value.toString();
    System.out.println(message + " fila: " + fila + " columna: " + columna +
      " token inesperado " + currentToken); */
    /* System.out.println("Error Sintactico"); */
    report_error(message, info);
  }

  // Metodo al se llama automaticamente ante algun error sintactico
  /* public void syntax_error (Symbol s) {
    int fila = s.right;
    int columna = s.left;
    String currentToken = s.value.toString();
    System.out.println("Error Sintactico " + " fila: " + fila + " columna: " + columna +
      " token inesperado " + currentToken);
    report_error("Error Sintactico", s);
  } */

  // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
  /* public void unrecover_syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
    report_fatal_error("Error fatal en la Sintaxis", s);
  } */



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*procedure(G)*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= C G 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= FUNCTION X RETURN Z IS H G 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= BEGIN I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // H ::= C H 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // H ::= BEGIN I G 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= L I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= M I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= E I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= P I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= E3 I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= E4 I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I ::= error I 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I ::= END X PC 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // X ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = i; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // X2 ::= X COMA X2 
            {
              String RESULT =null;
		 /**/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // X2 ::= X 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Z ::= DATATYPES 
            {
              String RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = d; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N1 ::= NUM DOUBD NUM 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= X2 DOS Z D 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // D ::= ASSIGN N PC 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D ::= PC 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L ::= IF L1 L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L2 ::= L L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L2 ::= E L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L2 ::= M L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L2 ::= P L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L2 ::= ELSE L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L2 ::= ELSIF L1 L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L2 ::= END IF PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L4 ::= E L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L4 ::= L L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L4 ::= M L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L4 ::= P L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L4 ::= END IF PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= X ASSIGN E2 PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E2 ::= TRUE 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E2 ::= FALSE 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E2 ::= E5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E4 ::= X PA 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PA ::= LP PA2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PA2 ::= L3 COMA PA2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PA2 ::= L3 RP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PA2 ::= RP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E5 ::= E6 OP E6 E7 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E5 ::= E6 MOD E6 E7 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E5 ::= E6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E6 ::= L3 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E6 ::= E4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E6 ::= LP E5 RP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E7 ::= OP E6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E7 ::= MOD E6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E7 ::= 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= RETURN E5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // M ::= LOOP M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // M ::= FOR N IN N1 LOOP M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // M ::= WHILE L6 M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // M1 ::= M M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // M1 ::= E M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // M1 ::= L M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // M1 ::= P M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // M1 ::= END LOOP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L1 ::= E5 OPREL E5 AND L1 
            {
              String RESULT =null;
		 /* result = AND (OPREL(e5,e5), L1)*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L1 ::= E5 OPREL E5 OR L1 
            {
              String RESULT =null;
		  /*result = OR (OPREL(e5,e5), L1)*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L1 ::= E5 OPREL E5 THEN 
            {
              String RESULT =null;
		  /* result = oprel(e5, e5)*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L3 ::= N 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L3 ::= X 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L6 ::= L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L6 ::= AND L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L6 ::= OR L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L6 ::= LOOP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // P ::= GET LP P1 RP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // P ::= PUT LP P2 RP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // P1 ::= ID 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // P2 ::= ID 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // P2 ::= EXP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // P2 ::= NUM 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
