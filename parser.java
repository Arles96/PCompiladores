
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\004\000\002\004\004\000\002\004\014" +
    "\000\002\004\002\000\002\004\004\000\002\044\007\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\005\000\002\006" +
    "\002\000\002\006\004\000\002\007\003\000\002\010\005" +
    "\000\002\010\003\000\002\011\003\000\002\012\003\000" +
    "\002\013\005\000\002\016\006\000\002\016\002\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\002\000\002\014\006\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\017\010\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\020\005\000\002\020\002" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\002\000\002\022\006\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\035\004" +
    "\000\002\036\004\000\002\037\005\000\002\037\004\000" +
    "\002\037\003\000\002\024\006\000\002\024\006\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\025\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\002\000\002\027\004\000\002\030\007\000" +
    "\002\030\013\000\002\030\011\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\002\000\002\032\007\000\002\032\007\000\002\032\006" +
    "\000\002\033\003\000\002\033\003\000\002\034\005\000" +
    "\002\034\007\000\002\034\007\000\002\040\007\000\002" +
    "\040\007\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\003\006\056\005\001\002\000\004\002" +
    "\324\001\002\000\004\152\010\001\002\000\012\002\ufffb" +
    "\003\011\040\015\152\010\001\002\000\004\002\000\001" +
    "\002\000\062\003\ufff0\007\ufff0\015\ufff0\030\ufff0\034\ufff0" +
    "\035\ufff0\054\ufff0\055\ufff0\061\ufff0\065\ufff0\076\ufff0\100" +
    "\ufff0\104\ufff0\120\ufff0\131\ufff0\132\ufff0\133\ufff0\134\ufff0" +
    "\136\ufff0\137\ufff0\140\ufff0\150\ufff0\151\ufff0\152\ufff0\001" +
    "\002\000\014\002\ufffb\003\011\040\015\046\ufffb\152\010" +
    "\001\002\000\004\137\304\001\002\000\004\002\ufffe\001" +
    "\002\000\014\002\ufffb\003\011\040\015\046\ufffb\152\010" +
    "\001\002\000\004\152\010\001\002\000\006\134\017\137" +
    "\uffee\001\002\000\004\152\010\001\002\000\004\137\uffef" +
    "\001\002\000\004\131\022\001\002\000\006\132\uffe9\152" +
    "\010\001\002\000\004\137\274\001\002\000\004\132\025" +
    "\001\002\000\004\007\026\001\002\000\004\113\027\001" +
    "\002\000\012\065\uffed\120\uffed\132\uffed\140\uffed\001\002" +
    "\000\004\065\031\001\002\000\012\003\011\040\015\046" +
    "\ufffb\152\010\001\002\000\004\046\033\001\002\000\026" +
    "\003\046\007\053\015\ufff2\035\036\055\043\076\041\100" +
    "\035\150\050\151\040\152\010\001\002\000\006\002\ufffc" +
    "\046\ufffc\001\002\000\010\112\056\131\057\152\010\001" +
    "\002\000\004\152\010\001\002\000\006\120\173\131\065" +
    "\001\002\000\004\131\240\001\002\000\022\015\uffb1\035" +
    "\036\055\043\076\041\100\035\150\050\151\040\152\010" +
    "\001\002\000\026\003\046\007\053\015\ufff2\035\036\055" +
    "\043\076\041\100\035\150\050\151\040\152\010\001\002" +
    "\000\010\112\056\131\057\152\010\001\002\000\026\003" +
    "\046\007\053\015\ufff2\035\036\055\043\076\041\100\035" +
    "\150\050\151\040\152\010\001\002\000\026\003\046\007" +
    "\053\015\ufff2\035\036\055\043\076\041\100\035\150\050" +
    "\151\040\152\010\001\002\000\026\003\046\007\053\015" +
    "\ufff2\035\036\055\043\076\041\100\035\150\050\151\040" +
    "\152\010\001\002\000\004\140\124\001\002\000\004\131" +
    "\117\001\002\000\026\003\046\007\053\015\ufff2\035\036" +
    "\055\043\076\041\100\035\150\050\151\040\152\010\001" +
    "\002\000\004\015\113\001\002\000\010\112\056\131\057" +
    "\152\010\001\002\000\026\003\046\007\053\015\ufff2\035" +
    "\036\055\043\076\041\100\035\150\050\151\040\152\010" +
    "\001\002\000\004\015\ufff6\001\002\000\050\003\uffec\007" +
    "\uffec\015\uffec\030\uffec\034\uffec\035\uffec\054\uffec\055\uffec" +
    "\076\uffec\100\uffec\104\uffec\132\uffec\133\uffec\134\uffec\136" +
    "\uffec\140\uffec\150\uffec\151\uffec\152\uffec\001\002\000\010" +
    "\112\056\131\057\152\010\001\002\000\046\003\uffc1\007" +
    "\uffc1\015\uffc1\030\uffc1\034\uffc1\035\uffc1\054\uffc1\055\uffc1" +
    "\076\uffc1\100\uffc1\104\100\132\uffc1\133\077\136\uffc1\140" +
    "\uffc1\150\uffc1\151\uffc1\152\uffc1\001\002\000\030\003\uffb9" +
    "\007\uffb9\015\uffb9\035\uffb9\055\uffb9\076\uffb9\100\uffb9\140" +
    "\uffb9\150\uffb9\151\uffb9\152\uffb9\001\002\000\046\003\uffbf" +
    "\007\uffbf\015\uffbf\030\uffbf\034\uffbf\035\uffbf\054\uffbf\055" +
    "\uffbf\076\uffbf\100\uffbf\104\uffbf\132\uffbf\133\uffbf\136\uffbf" +
    "\140\uffbf\150\uffbf\151\uffbf\152\uffbf\001\002\000\046\003" +
    "\uffc0\007\uffc0\015\uffc0\030\uffc0\034\uffc0\035\uffc0\054\uffc0" +
    "\055\uffc0\076\uffc0\100\uffc0\104\uffc0\132\uffc0\133\uffc0\136" +
    "\uffc0\140\uffc0\150\uffc0\151\uffc0\152\uffc0\001\002\000\050" +
    "\003\uffbd\007\uffbd\015\uffbd\030\uffbd\034\uffbd\035\uffbd\054" +
    "\uffbd\055\uffbd\076\uffbd\100\uffbd\104\uffbd\131\065\132\uffbd" +
    "\133\uffbd\136\uffbd\140\uffbd\150\uffbd\151\uffbd\152\uffbd\001" +
    "\002\000\010\112\056\132\071\152\010\001\002\000\046" +
    "\003\uffc8\007\uffc8\015\uffc8\030\uffc8\034\uffc8\035\uffc8\054" +
    "\uffc8\055\uffc8\076\uffc8\100\uffc8\104\uffc8\132\uffc8\133\uffc8" +
    "\136\uffc8\140\uffc8\150\uffc8\151\uffc8\152\uffc8\001\002\000" +
    "\046\003\uffc7\007\uffc7\015\uffc7\030\uffc7\034\uffc7\035\uffc7" +
    "\054\uffc7\055\uffc7\076\uffc7\100\uffc7\104\uffc7\132\uffc7\133" +
    "\uffc7\136\uffc7\140\uffc7\150\uffc7\151\uffc7\152\uffc7\001\002" +
    "\000\006\132\075\134\074\001\002\000\046\003\uffc4\007" +
    "\uffc4\015\uffc4\030\uffc4\034\uffc4\035\uffc4\054\uffc4\055\uffc4" +
    "\076\uffc4\100\uffc4\104\uffc4\132\uffc4\133\uffc4\136\uffc4\140" +
    "\uffc4\150\uffc4\151\uffc4\152\uffc4\001\002\000\006\132\uffad" +
    "\134\uffad\001\002\000\006\132\uffac\134\uffac\001\002\000" +
    "\010\112\056\132\071\152\010\001\002\000\046\003\uffc5" +
    "\007\uffc5\015\uffc5\030\uffc5\034\uffc5\035\uffc5\054\uffc5\055" +
    "\uffc5\076\uffc5\100\uffc5\104\uffc5\132\uffc5\133\uffc5\136\uffc5" +
    "\140\uffc5\150\uffc5\151\uffc5\152\uffc5\001\002\000\046\003" +
    "\uffc6\007\uffc6\015\uffc6\030\uffc6\034\uffc6\035\uffc6\054\uffc6" +
    "\055\uffc6\076\uffc6\100\uffc6\104\uffc6\132\uffc6\133\uffc6\136" +
    "\uffc6\140\uffc6\150\uffc6\151\uffc6\152\uffc6\001\002\000\010" +
    "\112\056\131\057\152\010\001\002\000\010\112\056\131" +
    "\057\152\010\001\002\000\046\003\uffba\007\uffba\015\uffba" +
    "\030\uffba\034\uffba\035\uffba\054\uffba\055\uffba\076\uffba\100" +
    "\uffba\104\103\132\uffba\133\102\136\uffba\140\uffba\150\uffba" +
    "\151\uffba\152\uffba\001\002\000\010\112\056\131\057\152" +
    "\010\001\002\000\010\112\056\131\057\152\010\001\002" +
    "\000\042\003\uffc2\007\uffc2\015\uffc2\030\uffc2\034\uffc2\035" +
    "\uffc2\054\uffc2\055\uffc2\076\uffc2\100\uffc2\132\uffc2\136\uffc2" +
    "\140\uffc2\150\uffc2\151\uffc2\152\uffc2\001\002\000\042\003" +
    "\uffbb\007\uffbb\015\uffbb\030\uffbb\034\uffbb\035\uffbb\054\uffbb" +
    "\055\uffbb\076\uffbb\100\uffbb\132\uffbb\136\uffbb\140\uffbb\150" +
    "\uffbb\151\uffbb\152\uffbb\001\002\000\042\003\uffbc\007\uffbc" +
    "\015\uffbc\030\uffbc\034\uffbc\035\uffbc\054\uffbc\055\uffbc\076" +
    "\uffbc\100\uffbc\132\uffbc\136\uffbc\140\uffbc\150\uffbc\151\uffbc" +
    "\152\uffbc\001\002\000\046\003\uffba\007\uffba\015\uffba\030" +
    "\uffba\034\uffba\035\uffba\054\uffba\055\uffba\076\uffba\100\uffba" +
    "\104\103\132\uffba\133\102\136\uffba\140\uffba\150\uffba\151" +
    "\uffba\152\uffba\001\002\000\042\003\uffc3\007\uffc3\015\uffc3" +
    "\030\uffc3\034\uffc3\035\uffc3\054\uffc3\055\uffc3\076\uffc3\100" +
    "\uffc3\132\uffc3\136\uffc3\140\uffc3\150\uffc3\151\uffc3\152\uffc3" +
    "\001\002\000\004\132\112\001\002\000\046\003\uffbe\007" +
    "\uffbe\015\uffbe\030\uffbe\034\uffbe\035\uffbe\054\uffbe\055\uffbe" +
    "\076\uffbe\100\uffbe\104\uffbe\132\uffbe\133\uffbe\136\uffbe\140" +
    "\uffbe\150\uffbe\151\uffbe\152\uffbe\001\002\000\004\152\010" +
    "\001\002\000\004\140\115\001\002\000\006\002\ufff9\046" +
    "\ufff9\001\002\000\004\015\ufff4\001\002\000\004\152\120" +
    "\001\002\000\004\132\uffa6\001\002\000\004\132\122\001" +
    "\002\000\004\140\123\001\002\000\032\003\uffa8\005\uffa8" +
    "\007\uffa8\011\uffa8\015\uffa8\035\uffa8\055\uffa8\076\uffa8\100" +
    "\uffa8\150\uffa8\151\uffa8\152\uffa8\001\002\000\026\003\046" +
    "\007\053\015\ufff2\035\036\055\043\076\041\100\035\150" +
    "\050\151\040\152\010\001\002\000\004\015\ufff3\001\002" +
    "\000\004\015\ufff1\001\002\000\004\015\ufff8\001\002\000" +
    "\004\015\ufff7\001\002\000\030\005\142\007\053\011\144" +
    "\015\uffd5\035\036\055\043\076\041\100\035\150\050\151" +
    "\040\152\010\001\002\000\004\136\133\001\002\000\010" +
    "\112\056\131\057\152\010\001\002\000\010\030\137\034" +
    "\136\054\135\001\002\000\030\005\uffae\007\uffae\011\uffae" +
    "\015\uffae\035\uffae\055\uffae\076\uffae\100\uffae\150\uffae\151" +
    "\uffae\152\uffae\001\002\000\010\112\056\131\057\152\010" +
    "\001\002\000\010\112\056\131\057\152\010\001\002\000" +
    "\030\005\uffaf\007\uffaf\011\uffaf\015\uffaf\035\uffaf\055\uffaf" +
    "\076\uffaf\100\uffaf\150\uffaf\151\uffaf\152\uffaf\001\002\000" +
    "\030\005\uffb0\007\uffb0\011\uffb0\015\uffb0\035\uffb0\055\uffb0" +
    "\076\uffb0\100\uffb0\150\uffb0\151\uffb0\152\uffb0\001\002\000" +
    "\024\007\053\015\uffcd\035\036\055\043\076\041\100\035" +
    "\150\050\151\040\152\010\001\002\000\012\120\173\131" +
    "\065\134\017\137\uffee\001\002\000\010\112\056\131\057" +
    "\152\010\001\002\000\030\005\142\007\053\011\144\015" +
    "\uffd5\035\036\055\043\076\041\100\035\150\050\151\040" +
    "\152\010\001\002\000\030\005\142\007\053\011\144\015" +
    "\uffd5\035\036\055\043\076\041\100\035\150\050\151\040" +
    "\152\010\001\002\000\004\140\165\001\002\000\030\005" +
    "\142\007\053\011\144\015\uffd5\035\036\055\043\076\041" +
    "\100\035\150\050\151\040\152\010\001\002\000\004\140" +
    "\162\001\002\000\030\005\142\007\053\011\144\015\uffd5" +
    "\035\036\055\043\076\041\100\035\150\050\151\040\152" +
    "\010\001\002\000\030\005\142\007\053\011\144\015\uffd5" +
    "\035\036\055\043\076\041\100\035\150\050\151\040\152" +
    "\010\001\002\000\004\015\155\001\002\000\004\055\156" +
    "\001\002\000\004\140\157\001\002\000\032\003\uffdf\005" +
    "\uffdf\007\uffdf\011\uffdf\015\uffdf\035\uffdf\055\uffdf\076\uffdf" +
    "\100\uffdf\150\uffdf\151\uffdf\152\uffdf\001\002\000\004\015" +
    "\uffd8\001\002\000\004\015\uffdd\001\002\000\030\005\142" +
    "\007\053\011\144\015\uffd5\035\036\055\043\076\041\100" +
    "\035\150\050\151\040\152\010\001\002\000\004\015\uffd9" +
    "\001\002\000\004\015\uffde\001\002\000\030\005\142\007" +
    "\053\011\144\015\uffd5\035\036\055\043\076\041\100\035" +
    "\150\050\151\040\152\010\001\002\000\004\015\uffda\001" +
    "\002\000\004\015\uffdc\001\002\000\004\015\uffdb\001\002" +
    "\000\030\005\142\007\053\011\144\015\uffd5\035\036\055" +
    "\043\076\041\100\035\150\050\151\040\152\010\001\002" +
    "\000\004\015\uffd6\001\002\000\014\110\174\111\175\112" +
    "\056\131\057\152\010\001\002\000\006\132\uffcb\140\uffcb" +
    "\001\002\000\006\132\uffca\140\uffca\001\002\000\006\132" +
    "\uffc9\140\uffc9\001\002\000\004\140\200\001\002\000\032" +
    "\003\uffcc\005\uffcc\007\uffcc\011\uffcc\015\uffcc\035\uffcc\055" +
    "\uffcc\076\uffcc\100\uffcc\150\uffcc\151\uffcc\152\uffcc\001\002" +
    "\000\024\007\053\015\uffcd\035\036\055\043\076\041\100" +
    "\035\150\050\151\040\152\010\001\002\000\024\007\053" +
    "\015\uffcd\035\036\055\043\076\041\100\035\150\050\151" +
    "\040\152\010\001\002\000\024\007\053\015\uffcd\035\036" +
    "\055\043\076\041\100\035\150\050\151\040\152\010\001" +
    "\002\000\004\140\215\001\002\000\004\140\213\001\002" +
    "\000\024\007\053\015\uffcd\035\036\055\043\076\041\100" +
    "\035\150\050\151\040\152\010\001\002\000\024\007\053" +
    "\015\uffcd\035\036\055\043\076\041\100\035\150\050\151" +
    "\040\152\010\001\002\000\004\015\uffd7\001\002\000\004" +
    "\015\uffd3\001\002\000\004\015\uffd4\001\002\000\024\007" +
    "\053\015\uffcd\035\036\055\043\076\041\100\035\150\050" +
    "\151\040\152\010\001\002\000\004\015\uffce\001\002\000" +
    "\024\007\053\015\uffcd\035\036\055\043\076\041\100\035" +
    "\150\050\151\040\152\010\001\002\000\004\015\uffcf\001" +
    "\002\000\004\015\uffd2\001\002\000\004\015\uffd1\001\002" +
    "\000\004\015\uffd0\001\002\000\004\015\ufff5\001\002\000" +
    "\004\015\235\001\002\000\004\120\173\001\002\000\022" +
    "\015\uffb1\035\036\055\043\076\041\100\035\150\050\151" +
    "\040\152\010\001\002\000\022\015\uffb1\035\036\055\043" +
    "\076\041\100\035\150\050\151\040\152\010\001\002\000" +
    "\022\015\uffb1\035\036\055\043\076\041\100\035\150\050" +
    "\151\040\152\010\001\002\000\022\015\uffb1\035\036\055" +
    "\043\076\041\100\035\150\050\151\040\152\010\001\002" +
    "\000\004\015\uffb4\001\002\000\004\015\uffb3\001\002\000" +
    "\004\015\uffb5\001\002\000\004\015\uffb2\001\002\000\004" +
    "\076\236\001\002\000\004\140\237\001\002\000\032\003" +
    "\uffb8\005\uffb8\007\uffb8\011\uffb8\015\uffb8\035\uffb8\055\uffb8" +
    "\076\uffb8\100\uffb8\150\uffb8\151\uffb8\152\uffb8\001\002\000" +
    "\014\110\174\111\175\112\056\131\057\152\010\001\002" +
    "\000\004\132\242\001\002\000\004\140\243\001\002\000" +
    "\032\003\uffa7\005\uffa7\007\uffa7\011\uffa7\015\uffa7\035\uffa7" +
    "\055\uffa7\076\uffa7\100\uffa7\150\uffa7\151\uffa7\152\uffa7\001" +
    "\002\000\004\061\245\001\002\000\004\112\246\001\002" +
    "\000\004\116\255\001\002\000\004\076\250\001\002\000" +
    "\022\015\uffb1\035\036\055\043\076\041\100\035\150\050" +
    "\151\040\152\010\001\002\000\004\015\252\001\002\000" +
    "\004\076\253\001\002\000\004\140\254\001\002\000\032" +
    "\003\uffb7\005\uffb7\007\uffb7\011\uffb7\015\uffb7\035\uffb7\055" +
    "\uffb7\076\uffb7\100\uffb7\150\uffb7\151\uffb7\152\uffb7\001\002" +
    "\000\004\112\256\001\002\000\004\076\uffeb\001\002\000" +
    "\004\076\267\001\002\000\004\136\261\001\002\000\010" +
    "\112\056\131\057\152\010\001\002\000\010\030\264\034" +
    "\263\076\uffab\001\002\000\010\112\056\131\057\152\010" +
    "\001\002\000\010\112\056\131\057\152\010\001\002\000" +
    "\004\076\uffa9\001\002\000\004\076\uffaa\001\002\000\022" +
    "\015\uffb1\035\036\055\043\076\041\100\035\150\050\151" +
    "\040\152\010\001\002\000\004\015\271\001\002\000\004" +
    "\076\272\001\002\000\004\140\273\001\002\000\032\003" +
    "\uffb6\005\uffb6\007\uffb6\011\uffb6\015\uffb6\035\uffb6\055\uffb6" +
    "\076\uffb6\100\uffb6\150\uffb6\151\uffb6\152\uffb6\001\002\000" +
    "\004\113\027\001\002\000\006\120\277\132\uffe5\001\002" +
    "\000\004\132\uffea\001\002\000\010\110\300\111\301\112" +
    "\056\001\002\000\004\132\uffe7\001\002\000\004\132\uffe6" +
    "\001\002\000\004\132\uffe8\001\002\000\006\002\ufffd\046" +
    "\ufffd\001\002\000\004\113\027\001\002\000\006\120\310" +
    "\140\306\001\002\000\040\002\uffe0\003\uffe0\005\uffe0\007" +
    "\uffe0\011\uffe0\015\uffe0\035\uffe0\040\uffe0\046\uffe0\055\uffe0" +
    "\076\uffe0\100\uffe0\150\uffe0\151\uffe0\152\uffe0\001\002\000" +
    "\040\002\uffe4\003\uffe4\005\uffe4\007\uffe4\011\uffe4\015\uffe4" +
    "\035\uffe4\040\uffe4\046\uffe4\055\uffe4\076\uffe4\100\uffe4\150" +
    "\uffe4\151\uffe4\152\uffe4\001\002\000\010\110\311\111\312" +
    "\112\056\001\002\000\004\140\316\001\002\000\004\140" +
    "\315\001\002\000\004\140\314\001\002\000\040\002\uffe3" +
    "\003\uffe3\005\uffe3\007\uffe3\011\uffe3\015\uffe3\035\uffe3\040" +
    "\uffe3\046\uffe3\055\uffe3\076\uffe3\100\uffe3\150\uffe3\151\uffe3" +
    "\152\uffe3\001\002\000\040\002\uffe1\003\uffe1\005\uffe1\007" +
    "\uffe1\011\uffe1\015\uffe1\035\uffe1\040\uffe1\046\uffe1\055\uffe1" +
    "\076\uffe1\100\uffe1\150\uffe1\151\uffe1\152\uffe1\001\002\000" +
    "\040\002\uffe2\003\uffe2\005\uffe2\007\uffe2\011\uffe2\015\uffe2" +
    "\035\uffe2\040\uffe2\046\uffe2\055\uffe2\076\uffe2\100\uffe2\150" +
    "\uffe2\151\uffe2\152\uffe2\001\002\000\006\002\ufffa\046\ufffa" +
    "\001\002\000\004\065\321\001\002\000\012\003\011\040" +
    "\015\046\ufffb\152\010\001\002\000\004\046\033\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\004\007\317\001\001\000\012\004\012\007\015" +
    "\010\011\014\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\316\007\015\010\011\014\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\302\007" +
    "\015\010\011\014\013\001\001\000\004\007\020\001\001" +
    "\000\002\001\001\000\006\007\015\010\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\015\010\022" +
    "\016\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\031\007\015\010\011\014" +
    "\013\001\001\000\004\044\033\001\001\000\022\006\051" +
    "\007\036\017\044\022\053\027\050\030\043\035\046\040" +
    "\041\001\001\000\002\001\001\000\016\007\063\012\062" +
    "\024\257\025\057\034\256\035\061\001\001\000\004\007" +
    "\243\001\001\000\004\036\065\001\001\000\002\001\001" +
    "\000\016\007\223\017\226\022\227\030\225\031\222\040" +
    "\224\001\001\000\022\006\221\007\036\017\044\022\053" +
    "\027\050\030\043\035\046\040\041\001\001\000\016\007" +
    "\063\012\062\024\131\025\057\032\130\035\061\001\001" +
    "\000\022\006\127\007\036\017\044\022\053\027\050\030" +
    "\043\035\046\040\041\001\001\000\022\006\126\007\036" +
    "\017\044\022\053\027\050\030\043\035\046\040\041\001" +
    "\001\000\022\006\125\007\036\017\044\022\053\027\050" +
    "\030\043\035\046\040\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\115\007\036\017\044\022\053" +
    "\027\050\030\043\035\046\040\041\001\001\000\002\001" +
    "\001\000\014\007\063\012\062\024\060\025\057\035\061" +
    "\001\001\000\022\006\054\007\036\017\044\022\053\027" +
    "\050\030\043\035\046\040\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\063\012\062\024\110\025" +
    "\057\035\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\065\001" +
    "\001\000\012\007\072\012\071\033\067\037\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\072\012\071\033\067\037\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\063\012\062\025\106" +
    "\035\061\001\001\000\012\007\063\012\062\025\100\035" +
    "\061\001\001\000\004\026\103\001\001\000\012\007\063" +
    "\012\062\025\105\035\061\001\001\000\012\007\063\012" +
    "\062\025\104\035\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\124\007\036\017\044\022\053\027\050\030\043" +
    "\035\046\040\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\142" +
    "\010\011\014\152\017\147\020\153\022\151\027\150\030" +
    "\145\035\146\040\144\001\001\000\002\001\001\000\014" +
    "\007\063\012\062\024\133\025\057\035\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\063\012\062" +
    "\024\131\025\057\032\140\035\061\001\001\000\016\007" +
    "\063\012\062\024\131\025\057\032\137\035\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\142\010" +
    "\011\014\206\017\202\021\207\022\205\027\204\030\201" +
    "\035\203\040\200\001\001\000\004\036\065\001\001\000" +
    "\016\007\063\012\062\024\131\025\057\032\170\035\061" +
    "\001\001\000\026\007\142\010\011\014\152\017\147\020" +
    "\167\022\151\027\150\030\145\035\146\040\144\001\001" +
    "\000\026\007\142\010\011\014\152\017\147\020\166\022" +
    "\151\027\150\030\145\035\146\040\144\001\001\000\002" +
    "\001\001\000\026\007\142\010\011\014\152\017\147\020" +
    "\163\022\151\027\150\030\145\035\146\040\144\001\001" +
    "\000\002\001\001\000\026\007\142\010\011\014\152\017" +
    "\147\020\160\022\151\027\150\030\145\035\146\040\144" +
    "\001\001\000\026\007\142\010\011\014\152\017\147\020" +
    "\157\022\151\027\150\030\145\035\146\040\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\142\010\011\014\152\017\147\020\162\022\151\027" +
    "\150\030\145\035\146\040\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\142\010\011\014\152\017" +
    "\147\020\165\022\151\027\150\030\145\035\146\040\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\142\010\011\014\152\017\147\020\171" +
    "\022\151\027\150\030\145\035\146\040\144\001\001\000" +
    "\002\001\001\000\016\007\063\012\062\023\176\024\175" +
    "\025\057\035\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\142\010\011\014\206\017\202\021\220\022" +
    "\205\027\204\030\201\035\203\040\200\001\001\000\026" +
    "\007\142\010\011\014\206\017\202\021\217\022\205\027" +
    "\204\030\201\035\203\040\200\001\001\000\026\007\142" +
    "\010\011\014\206\017\202\021\216\022\205\027\204\030" +
    "\201\035\203\040\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\142\010\011\014\206\017\202\021" +
    "\211\022\205\027\204\030\201\035\203\040\200\001\001" +
    "\000\026\007\142\010\011\014\206\017\202\021\210\022" +
    "\205\027\204\030\201\035\203\040\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\142\010\011\014\206\017\202\021\213\022\205\027\204" +
    "\030\201\035\203\040\200\001\001\000\002\001\001\000" +
    "\026\007\142\010\011\014\206\017\202\021\215\022\205" +
    "\027\204\030\201\035\203\040\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\223\017\226\022\227\030\225\031\233\040\224" +
    "\001\001\000\016\007\223\017\226\022\227\030\225\031" +
    "\232\040\224\001\001\000\016\007\223\017\226\022\227" +
    "\030\225\031\231\040\224\001\001\000\016\007\223\017" +
    "\226\022\227\030\225\031\230\040\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\063\012\062\023\240\024\175\025\057\035" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\223\017\226" +
    "\022\227\030\225\031\250\040\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\063\012\062\024\261\025\057" +
    "\035\061\001\001\000\002\001\001\000\016\007\063\012" +
    "\062\024\257\025\057\034\265\035\061\001\001\000\016" +
    "\007\063\012\062\024\257\025\057\034\264\035\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\223" +
    "\017\226\022\227\030\225\031\267\040\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\274\001\001\000\004\041\275\001" +
    "\001\000\002\001\001\000\004\012\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\304\001\001\000\004\015\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\321\007\015" +
    "\010\011\014\013\001\001\000\004\044\322\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static LinkedList<String> msgErrores = new LinkedList<String>();

  public void report_error (String message, Object info) {
    /* if (s != null) {
      Symbol s2 = (Symbol) s;
      int fila = s2.right;
      int columna = s2.left;
      String currentToken = "Hola";
      System.out.println(message + " fila: " + fila + " columna: " + columna +
        " token inesperado " + currentToken);
    } */

    if (message.equalsIgnoreCase("Syntax error")) {
      message = "Error Sintactico";
    } else if (message.equalsIgnoreCase("Couldn't repair and continue parse")) {
      message = "Error Fatal";
    }
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.right >= 0) {
        message += ": en linea " + (s.right + 1);
        if (s.left >= 0) {
          message += ", columna " + (s.left + 1);
        }
        if(getScanner() instanceof Ada95) {
          message += "; no se esperaba '" + ((Ada95)getScanner()).getCurrentText()+"'";
        }
      }
    }
    msgErrores.add(message);
  }

  public void report_fatal_error (String message, Object info) {
    /* Symbol s2 = (Symbol) s;
    int fila = s2.right;
    int columna = s2.left;
    String currentToken = s2.value.toString();
    System.out.println(message + " fila: " + fila + " columna: " + columna +
      " token inesperado " + currentToken); */
    /* System.out.println("Error Sintactico"); */
    report_error(message, info);
  }

  public Nodo raiz;
  // Metodo al se llama automaticamente ante algun error sintactico
  /* public void syntax_error (Symbol s) {
    int fila = s.right;
    int columna = s.left;
    String currentToken = s.value.toString();
    System.out.println("Error Sintactico " + " fila: " + fila + " columna: " + columna +
      " token inesperado " + currentToken);
    report_error("Error Sintactico", s);
  } */

  // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
  /* public void unrecover_syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
    report_fatal_error("Error fatal en la Sintaxis", s);
  } */



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*A.root = F*/
                                          raiz = new Nodo();
                                          raiz.setTag("Nodo de inicio");
                                          raiz.addHijo((Nodo)hijo);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G CUERPO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*procedure(G)*/
                                          Nodo nod = new Nodo();
                                          nod.setTag("Procedure");
                                          nod.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            if(((Nodo)hijo2).getInfo().equals("tem")){
                                            for(int i = 0; i < ((Nodo)hijo2).hijos.size();i++){
                                              nod.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }else{
                                            nod.addHijo((Nodo)hijo2);
                                          }
                                          }

                                          nod.addHijo((Nodo)hijo3);
                                          RESULT = nod;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // F ::= error G 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= C G 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = nodo(C, G)*/
                                          Nodo tem = new Nodo();
                                          tem.setTag("tem");
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 == null){

                                          }else{
                                            if(((Nodo)hijo2).getInfo().equals("tem")){

                                            for(int i = 0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }else{
                                            tem.addHijo((Nodo)hijo2);
                                          }
                                          }

                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= FUNCTION X LP ARG RP RETURN Z IS G CUERPO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo4 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = function(X,return(Z),H)*/
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("Function");
                                                      tem.addHijo((Nodo)hijo1);
                                                      Nodo ret = new Nodo();
                                                      ret.setTag("Return");
                                                      ret.addHijo((Nodo)hijo2);
                                                      tem.addHijo(ret);
                                                      if(hijo3 != null){
                                                        if(((Nodo)hijo3).getInfo().equals("tem")){
                                                          for(int i = 0; i < ((Nodo)hijo3).hijos.size();i++){
                                                            tem.addHijo(((Nodo)hijo3).hijos.get(i));
                                                          }
                                                        }else{
                                                        tem.addHijo((Nodo)hijo3);
                                                      }
                                                      }

                                                      tem.addHijo((Nodo)hijo4);
                                                      //tem.addHijo((Nodo)hijo3);
                                                      RESULT = tem;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // G ::= error G 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= BEGIN I END X PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = body(I)*/

                                           // System.out.println("++++++++++++++++++++++++++");
                                          Nodo tem = new Nodo();
                                          tem.setTag("Cuerpo");
                                          //tem.addHijo((Nodo)hijo1);
                                          if(hijo1 != null){
                                            for(int i=0; i < ((Nodo)hijo1).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo1).hijos.get(i));
                                            }
                                          }

                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= L I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= M I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= E I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= P I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= E3 I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I ::= E4 PC I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // I ::= error I 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // X ::= ID 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* Result = ID(att:i) */
                          RESULT = new Nodo("ID",i);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // X2 ::= X COMA X2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = declaracion (att: arreglo = X + X2.arreglo)*/
                                    RESULT = new Nodo("Declaracion","arreglo");
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // X2 ::= X 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* result = X*/
                              RESULT = (Nodo)hijo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Z ::= DATATYPES 
            {
              Nodo RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = dt; */
                          RESULT = new Nodo("DATA TYPE",dt);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N ::= NUM 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ RESULT = new Nodo("NUM",n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N1 ::= NUM DOUBD NUM 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = range(att: num1, num2)*/ RESULT = new Nodo("Rango",n1 + t + n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARG ::= X2 DOS Z ARG2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Nodo)hijo2).addHijo((Nodo)hijo1);
                                          if(((Nodo)hijo3).getInfo().equals("nulo")){
                                          }else{
                                            ((Nodo)hijo2).addHijo((Nodo)hijo3);
                                          }
                                          RESULT = (Nodo)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARG ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARG2 ::= ASSIGN N 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag("ASSIGN");
                          tem.addHijo((Nodo)n);
                          RESULT = tem;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARG2 ::= ASSIGN TRUE 
            {
              Nodo RESULT =null;
		/*result = true*/
                          RESULT = new Nodo("ASSIGN","TRUE");

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARG2 ::= ASSIGN FALSE 
            {
              Nodo RESULT =null;
		/*result = false*/
                          RESULT = new Nodo("ASSIGN","TRUE");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARG2 ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("nulo","0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // C ::= X2 DOS Z D 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Nodo)hijo2).addHijo((Nodo)hijo1);
                                          if(((Nodo)hijo3).getInfo().equals("nulo")){
                                          }else{
                                            ((Nodo)hijo2).addHijo((Nodo)hijo3);
                                          }
                                          RESULT = (Nodo)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // D ::= ASSIGN N PC 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag("ASSIGN");
                          tem.addHijo((Nodo)n);
                          RESULT = tem;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D ::= ASSIGN TRUE PC 
            {
              Nodo RESULT =null;
		/*result = true*/
                          RESULT = new Nodo("ASSIGN","TRUE");

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D ::= ASSIGN FALSE PC 
            {
              Nodo RESULT =null;
		/*result = false*/
                          RESULT = new Nodo("ASSIGN","TRUE");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D ::= PC 
            {
              Nodo RESULT =null;
		/*result = null*/
                          RESULT = new Nodo("nulo","-1");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L ::= IF L1 L2 END IF PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*result = if(L1,body(L2))*/
                                            Nodo tem = new Nodo();
                                            tem.setTag("IF");
                                            tem.addHijo((Nodo)hijo1);
                                            Nodo tem2 = new Nodo();
                                            tem2.setTag("Cuerpo");
                                            if(hijo2 != null){
                                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                              }
                                            }
                                            tem.addHijo(tem2);
                                            RESULT = tem;
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L2 ::= L L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(L+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L2 ::= E L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(E+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L2 ::= M L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(M+l2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L2 ::= P L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(P+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L2 ::= E4 PC L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L2 ::= E3 PC L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo((Nodo)hijo1);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                    tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                  }
                                }
                                RESULT = tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L2 ::= C L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo tem = new Nodo();
                              tem.addHijo((Nodo)hijo1);
                              if(hijo2 != null){
                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                }
                              }
                              RESULT = tem;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L2 ::= ELSE L4 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/**/
                                  Nodo tem = new Nodo();
                                  Nodo tem2 = new Nodo();
                                  tem2.setTag("Else");
                                  Nodo cuerpo = new Nodo();
                                  cuerpo.setTag("Cuerpo");
                                  if(hijo != null){
                                    for(int i=0; i < ((Nodo)hijo).hijos.size();i++){
                                      cuerpo.addHijo(((Nodo)hijo).hijos.get(i));
                                    }
                                  }
                                  tem2.addHijo((Nodo)cuerpo);
                                  tem.addHijo((Nodo)tem2);
                                  RESULT = tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L2 ::= ELSIF L1 L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.setTag("ELSIF");
                                tem.addHijo((Nodo)hijo1);
                                Nodo tem2 = new Nodo();
                                tem2.setTag("Cuerpo");
                                if(hijo2 != null){
                                  for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                    tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                  }
                                }
                                tem.addHijo(tem2);
                                Nodo res = new Nodo();
                                res.addHijo((Nodo)tem);
                                RESULT = (Nodo)res;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L2 ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L4 ::= E L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(E+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo((Nodo)hijo1);
                              if(hijo2 != null){
                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                }
                              }
                              RESULT = tem;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L4 ::= C L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Nodo tem = new Nodo();
                              tem.addHijo((Nodo)hijo1);
                              if(hijo2 != null){
                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                }
                              }
                              RESULT = tem;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L4 ::= L L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(L+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo((Nodo)hijo1);
                              if(hijo2 != null){
                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                }
                              }
                              RESULT = tem;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L4 ::= M L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(M+l2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo((Nodo)hijo1);
                              if(hijo2 != null){
                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                }
                              }
                              RESULT = tem;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L4 ::= P L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(P+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo((Nodo)hijo1);
                              if(hijo2 != null){
                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                }
                              }
                              RESULT = tem;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L4 ::= E4 PC L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo((Nodo)hijo1);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                    tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                  }
                                }
                                RESULT = tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L4 ::= E3 PC L4 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo((Nodo)hijo1);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                    tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                  }
                                }
                                RESULT = tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L4 ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= X ASSIGN E2 PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = asign(X, E2)*/
                                                Nodo tem = new Nodo("Asignacion","::=");
                                                tem.addHijo((Nodo)hijo1);
                                                tem.addHijo((Nodo)hijo2);
                                                RESULT = tem;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= TRUE 
            {
              Nodo RESULT =null;
		 /*result = true*/
                      RESULT = new Nodo("TRUE","1");
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E2 ::= FALSE 
            {
              Nodo RESULT =null;
		 /*result = false*/RESULT = new Nodo("FALSE","0"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= E5 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* */RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= X PA 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = ejec(X, PA)*/
                                  Nodo tem = new Nodo();
                                  tem.setTag("Ejecucion");
                                  tem.addHijo((Nodo)hijo1);
                                  tem.addHijo((Nodo)hijo2);
                                  RESULT = tem;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PA ::= LP PA2 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = pa2*/
                                        RESULT = hijo != null ? (Nodo)hijo : null;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PA2 ::= L3 COMA PA2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(L3+PA2)*/
                                    Nodo tem = new Nodo("Argumentos","arg");
                                    tem.addHijo((Nodo)hijo1);
                                    if(hijo2 != null){
                                      for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                        tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                      }
                                    }
                                    RESULT = (Nodo)tem;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PA2 ::= L3 RP 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*rsult = arreglo(L3)*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PA2 ::= RP 
            {
              Nodo RESULT =null;
		 /*result = null*/
                                    RESULT = null;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E6 OP E6 E7 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E7.op(op(E6, E6),E7.E6) */
                                            Nodo tem = new Nodo("OP",t);
                                            tem.addHijo((Nodo)hijo1);
                                            tem.addHijo((Nodo)hijo2);
                                            if(hijo3 == null){
                                              RESULT = tem;
                                            }else{
                                              ((Nodo)hijo3).addHijo((Nodo)tem);
                                              RESULT = (Nodo)hijo3;
                                            }

                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E5 ::= E6 MOD E6 E7 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            Nodo tem = new Nodo("MOD",t);
                                            tem.addHijo((Nodo)hijo1);
                                            tem.addHijo((Nodo)hijo2);
                                            if(hijo3 == null){
                                              RESULT = tem;
                                            }else{
                                              ((Nodo)hijo3).addHijo((Nodo)tem);
                                              RESULT = (Nodo)hijo3;
                                            }
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= E6 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Nodo)hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E6 ::= N 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l3*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= E4 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E4*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= LP E5 RP 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = E5*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E6 ::= X 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E5*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= OP E6 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(op,E6)*/
                                  Nodo tem = new Nodo("OP",t);
                                  tem.addHijo((Nodo)hijo);
                                  RESULT = tem;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= MOD E6 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(mod,E6)*/
                                  Nodo tem = new Nodo("MOD",t);
                                  tem.addHijo((Nodo)hijo);
                                  RESULT = tem;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= 
            {
              Nodo RESULT =null;
		 /*result = null*/ RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= RETURN E5 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  Nodo tem = new Nodo("Return","0");
                                  tem.addHijo((Nodo)hijo);
                                  RESULT = tem;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M ::= LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                              Nodo tem = new Nodo("Loop","0");
                                              Nodo tem2 = new Nodo();
                                              tem2.setTag("Cuerpo");
                                              for(int i=0; i < ((Nodo)hijo).hijos.size();i++){
                                                tem2.addHijo(((Nodo)hijo).hijos.get(i));
                                              }
                                              tem.addHijo(tem2);
                                              RESULT = tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // M ::= FOR X IN N1 LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                            Nodo tem = new Nodo("FOR","0");
                                                            Nodo tem2 = new Nodo();
                                                            tem.addHijo((Nodo)hijo1);
                                                            tem2.setTag("Cuerpo");
                                                            if(hijo2 != null){
                                                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                                tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                                              }
                                                            }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = tem;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // M ::= WHILE L6 LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                          Nodo tem = new Nodo();
                                                          tem.setTag("WHILE");
                                                          tem.addHijo((Nodo)hijo1);
                                                          Nodo tem2 = new Nodo();
                                                          tem2.setTag("Cuerpo");
                                                          if(hijo2 != null){
                                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                              tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                                            }
                                                          }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = tem;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // M1 ::= M M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // M1 ::= E M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // M1 ::= L M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // M1 ::= P M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // M1 ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L1 ::= E5 OPREL E5 AND L1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = AND (OPREL(e5,e5), L1)*/
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("AND");
                                                      Nodo tem2 = new Nodo("OPREL",t);
                                                      tem2.addHijo((Nodo)hijo1);
                                                      tem2.addHijo((Nodo)hijo2);
                                                      tem.addHijo((Nodo)tem2);
                                                      tem.addHijo((Nodo)hijo3);

                                                      RESULT = (Nodo)tem;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L1 ::= E5 OPREL E5 OR L1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = OR (OPREL(e5,e5), L1)*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("OR");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo((Nodo)hijo1);
                                                    tem2.addHijo((Nodo)hijo2);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo((Nodo)hijo3);

                                                    RESULT = (Nodo)tem;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L1 ::= E5 OPREL E5 THEN 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  /* result = oprel(e5, e5)*/
                                Nodo tem = new Nodo("OPREL",t);
                                tem.addHijo((Nodo)hijo1);
                                tem.addHijo((Nodo)hijo2);
                                RESULT = (Nodo)tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L3 ::= N 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */
                            RESULT = (Nodo)n;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // L3 ::= X 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */
                            RESULT = (Nodo)x;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // L6 ::= E5 OPREL E5 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem2 = new Nodo("OPREL",t);
                                              tem2.addHijo((Nodo)hijo1);
                                              tem2.addHijo((Nodo)hijo2);
                                              RESULT = tem2;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // L6 ::= E5 OPREL E5 AND L6 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("AND");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo((Nodo)hijo1);
                                                    tem2.addHijo((Nodo)hijo2);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo((Nodo)hijo3);
                                                    RESULT = (Nodo)tem;
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // L6 ::= E5 OPREL E5 OR L6 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("OR");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo((Nodo)hijo1);
                                                    tem2.addHijo((Nodo)hijo2);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo((Nodo)hijo3);
                                                    RESULT = (Nodo)tem;
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // P ::= GET LP P1 RP PC 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String hijo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo("Get",hijo);
                                      RESULT =  tem;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // P ::= PUT LP E2 RP PC 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo("Put", lp);
                                      tem.addHijo(hijo);
                                      RESULT =  tem;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // P1 ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
