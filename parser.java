
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import Nodos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\015\000\002\004\002\000\002\004\004\000" +
    "\002\044\007\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\006\002\000\002\006\004\000\002\007\003" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\012\003\000\002\013\005\000\002\016\006\000\002" +
    "\016\002\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\002\000\002\014\006\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\017\010\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\005\000\002\020\002" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\002\000\002\022\006\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\035\004\000\002\036\004" +
    "\000\002\037\005\000\002\037\004\000\002\037\003\000" +
    "\002\024\006\000\002\024\006\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\002" +
    "\000\002\027\004\000\002\030\007\000\002\030\013\000" +
    "\002\030\011\000\002\031\004\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\002\000\002\032" +
    "\007\000\002\032\007\000\002\032\006\000\002\033\003" +
    "\000\002\033\003\000\002\034\005\000\002\034\007\000" +
    "\002\034\007\000\002\040\007\000\002\040\007\000\002" +
    "\043\003\000\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\003\006\056\005\001\002\000\004\002" +
    "\325\001\002\000\004\152\010\001\002\000\014\002\ufffa" +
    "\003\012\040\015\056\011\152\010\001\002\000\004\002" +
    "\000\001\002\000\062\003\uffef\007\uffef\015\uffef\030\uffef" +
    "\034\uffef\035\uffef\054\uffef\055\uffef\061\uffef\065\uffef\076" +
    "\uffef\100\uffef\104\uffef\120\uffef\131\uffef\132\uffef\133\uffef" +
    "\134\uffef\136\uffef\137\uffef\140\uffef\150\uffef\151\uffef\152" +
    "\uffef\001\002\000\004\152\010\001\002\000\016\002\ufffa" +
    "\003\012\040\015\046\ufffa\056\011\152\010\001\002\000" +
    "\004\137\301\001\002\000\004\002\ufffe\001\002\000\004" +
    "\152\010\001\002\000\016\002\ufffa\003\012\040\015\046" +
    "\ufffa\056\011\152\010\001\002\000\006\134\020\137\uffed" +
    "\001\002\000\004\152\010\001\002\000\004\137\uffee\001" +
    "\002\000\006\002\ufffd\046\ufffd\001\002\000\004\131\024" +
    "\001\002\000\006\132\uffe8\152\010\001\002\000\004\137" +
    "\272\001\002\000\004\132\027\001\002\000\004\007\030" +
    "\001\002\000\004\113\031\001\002\000\012\065\uffec\120" +
    "\uffec\132\uffec\140\uffec\001\002\000\004\065\033\001\002" +
    "\000\014\003\012\040\015\046\ufffa\056\011\152\010\001" +
    "\002\000\004\046\035\001\002\000\026\003\050\007\056" +
    "\015\ufff1\035\042\055\046\076\044\100\040\150\054\151" +
    "\041\152\010\001\002\000\016\002\ufffa\003\012\040\015" +
    "\046\ufffa\056\011\152\010\001\002\000\006\002\ufffb\046" +
    "\ufffb\001\002\000\010\112\061\131\062\152\010\001\002" +
    "\000\004\131\247\001\002\000\004\152\010\001\002\000" +
    "\006\120\223\131\070\001\002\000\022\015\uffb2\035\042" +
    "\055\046\076\044\100\040\150\054\151\041\152\010\001" +
    "\002\000\026\003\050\007\056\015\ufff1\035\042\055\046" +
    "\076\044\100\040\150\054\151\041\152\010\001\002\000" +
    "\010\112\061\131\062\152\010\001\002\000\026\003\050" +
    "\007\056\015\ufff1\035\042\055\046\076\044\100\040\150" +
    "\054\151\041\152\010\001\002\000\026\003\050\007\056" +
    "\015\ufff1\035\042\055\046\076\044\100\040\150\054\151" +
    "\041\152\010\001\002\000\026\003\050\007\056\015\ufff1" +
    "\035\042\055\046\076\044\100\040\150\054\151\041\152" +
    "\010\001\002\000\004\140\125\001\002\000\026\003\050" +
    "\007\056\015\ufff1\035\042\055\046\076\044\100\040\150" +
    "\054\151\041\152\010\001\002\000\004\131\117\001\002" +
    "\000\004\015\114\001\002\000\010\112\061\131\062\152" +
    "\010\001\002\000\026\003\050\007\056\015\ufff1\035\042" +
    "\055\046\076\044\100\040\150\054\151\041\152\010\001" +
    "\002\000\004\015\ufff5\001\002\000\050\003\uffeb\007\uffeb" +
    "\015\uffeb\030\uffeb\034\uffeb\035\uffeb\054\uffeb\055\uffeb\076" +
    "\uffeb\100\uffeb\104\uffeb\132\uffeb\133\uffeb\134\uffeb\136\uffeb" +
    "\140\uffeb\150\uffeb\151\uffeb\152\uffeb\001\002\000\010\112" +
    "\061\131\062\152\010\001\002\000\050\003\uffc2\007\uffc2" +
    "\015\uffc2\030\uffc2\034\uffc2\035\uffc2\054\uffc2\055\uffc2\076" +
    "\uffc2\100\uffc2\104\101\132\uffc2\133\100\134\uffc2\136\uffc2" +
    "\140\uffc2\150\uffc2\151\uffc2\152\uffc2\001\002\000\030\003" +
    "\uffba\007\uffba\015\uffba\035\uffba\055\uffba\076\uffba\100\uffba" +
    "\140\uffba\150\uffba\151\uffba\152\uffba\001\002\000\050\003" +
    "\uffc0\007\uffc0\015\uffc0\030\uffc0\034\uffc0\035\uffc0\054\uffc0" +
    "\055\uffc0\076\uffc0\100\uffc0\104\uffc0\132\uffc0\133\uffc0\134" +
    "\uffc0\136\uffc0\140\uffc0\150\uffc0\151\uffc0\152\uffc0\001\002" +
    "\000\050\003\uffc1\007\uffc1\015\uffc1\030\uffc1\034\uffc1\035" +
    "\uffc1\054\uffc1\055\uffc1\076\uffc1\100\uffc1\104\uffc1\132\uffc1" +
    "\133\uffc1\134\uffc1\136\uffc1\140\uffc1\150\uffc1\151\uffc1\152" +
    "\uffc1\001\002\000\052\003\uffbe\007\uffbe\015\uffbe\030\uffbe" +
    "\034\uffbe\035\uffbe\054\uffbe\055\uffbe\076\uffbe\100\uffbe\104" +
    "\uffbe\131\070\132\uffbe\133\uffbe\134\uffbe\136\uffbe\140\uffbe" +
    "\150\uffbe\151\uffbe\152\uffbe\001\002\000\012\112\061\131" +
    "\062\132\074\152\010\001\002\000\050\003\uffc9\007\uffc9" +
    "\015\uffc9\030\uffc9\034\uffc9\035\uffc9\054\uffc9\055\uffc9\076" +
    "\uffc9\100\uffc9\104\uffc9\132\uffc9\133\uffc9\134\uffc9\136\uffc9" +
    "\140\uffc9\150\uffc9\151\uffc9\152\uffc9\001\002\000\050\003" +
    "\uffc8\007\uffc8\015\uffc8\030\uffc8\034\uffc8\035\uffc8\054\uffc8" +
    "\055\uffc8\076\uffc8\100\uffc8\104\uffc8\132\uffc8\133\uffc8\134" +
    "\uffc8\136\uffc8\140\uffc8\150\uffc8\151\uffc8\152\uffc8\001\002" +
    "\000\006\132\076\134\075\001\002\000\050\003\uffc5\007" +
    "\uffc5\015\uffc5\030\uffc5\034\uffc5\035\uffc5\054\uffc5\055\uffc5" +
    "\076\uffc5\100\uffc5\104\uffc5\132\uffc5\133\uffc5\134\uffc5\136" +
    "\uffc5\140\uffc5\150\uffc5\151\uffc5\152\uffc5\001\002\000\012" +
    "\112\061\131\062\132\074\152\010\001\002\000\050\003" +
    "\uffc6\007\uffc6\015\uffc6\030\uffc6\034\uffc6\035\uffc6\054\uffc6" +
    "\055\uffc6\076\uffc6\100\uffc6\104\uffc6\132\uffc6\133\uffc6\134" +
    "\uffc6\136\uffc6\140\uffc6\150\uffc6\151\uffc6\152\uffc6\001\002" +
    "\000\050\003\uffc7\007\uffc7\015\uffc7\030\uffc7\034\uffc7\035" +
    "\uffc7\054\uffc7\055\uffc7\076\uffc7\100\uffc7\104\uffc7\132\uffc7" +
    "\133\uffc7\134\uffc7\136\uffc7\140\uffc7\150\uffc7\151\uffc7\152" +
    "\uffc7\001\002\000\010\112\061\131\062\152\010\001\002" +
    "\000\010\112\061\131\062\152\010\001\002\000\050\003" +
    "\uffbb\007\uffbb\015\uffbb\030\uffbb\034\uffbb\035\uffbb\054\uffbb" +
    "\055\uffbb\076\uffbb\100\uffbb\104\104\132\uffbb\133\103\134" +
    "\uffbb\136\uffbb\140\uffbb\150\uffbb\151\uffbb\152\uffbb\001\002" +
    "\000\010\112\061\131\062\152\010\001\002\000\010\112" +
    "\061\131\062\152\010\001\002\000\044\003\uffc3\007\uffc3" +
    "\015\uffc3\030\uffc3\034\uffc3\035\uffc3\054\uffc3\055\uffc3\076" +
    "\uffc3\100\uffc3\132\uffc3\134\uffc3\136\uffc3\140\uffc3\150\uffc3" +
    "\151\uffc3\152\uffc3\001\002\000\044\003\uffbc\007\uffbc\015" +
    "\uffbc\030\uffbc\034\uffbc\035\uffbc\054\uffbc\055\uffbc\076\uffbc" +
    "\100\uffbc\132\uffbc\134\uffbc\136\uffbc\140\uffbc\150\uffbc\151" +
    "\uffbc\152\uffbc\001\002\000\044\003\uffbd\007\uffbd\015\uffbd" +
    "\030\uffbd\034\uffbd\035\uffbd\054\uffbd\055\uffbd\076\uffbd\100" +
    "\uffbd\132\uffbd\134\uffbd\136\uffbd\140\uffbd\150\uffbd\151\uffbd" +
    "\152\uffbd\001\002\000\050\003\uffbb\007\uffbb\015\uffbb\030" +
    "\uffbb\034\uffbb\035\uffbb\054\uffbb\055\uffbb\076\uffbb\100\uffbb" +
    "\104\104\132\uffbb\133\103\134\uffbb\136\uffbb\140\uffbb\150" +
    "\uffbb\151\uffbb\152\uffbb\001\002\000\044\003\uffc4\007\uffc4" +
    "\015\uffc4\030\uffc4\034\uffc4\035\uffc4\054\uffc4\055\uffc4\076" +
    "\uffc4\100\uffc4\132\uffc4\134\uffc4\136\uffc4\140\uffc4\150\uffc4" +
    "\151\uffc4\152\uffc4\001\002\000\004\132\113\001\002\000" +
    "\050\003\uffbf\007\uffbf\015\uffbf\030\uffbf\034\uffbf\035\uffbf" +
    "\054\uffbf\055\uffbf\076\uffbf\100\uffbf\104\uffbf\132\uffbf\133" +
    "\uffbf\134\uffbf\136\uffbf\140\uffbf\150\uffbf\151\uffbf\152\uffbf" +
    "\001\002\000\004\152\010\001\002\000\004\140\116\001" +
    "\002\000\016\002\ufff8\003\ufff8\040\ufff8\046\ufff8\056\ufff8" +
    "\152\ufff8\001\002\000\004\152\121\001\002\000\004\132" +
    "\122\001\002\000\004\132\uffa7\001\002\000\004\140\123" +
    "\001\002\000\032\003\uffa9\005\uffa9\007\uffa9\011\uffa9\015" +
    "\uffa9\035\uffa9\055\uffa9\076\uffa9\100\uffa9\150\uffa9\151\uffa9" +
    "\152\uffa9\001\002\000\004\015\ufff3\001\002\000\026\003" +
    "\050\007\056\015\ufff1\035\042\055\046\076\044\100\040" +
    "\150\054\151\041\152\010\001\002\000\004\015\ufff2\001" +
    "\002\000\004\015\ufff7\001\002\000\004\015\ufff0\001\002" +
    "\000\004\015\ufff6\001\002\000\030\005\143\007\056\011" +
    "\144\015\uffd5\035\042\055\046\076\044\100\040\150\054" +
    "\151\041\152\010\001\002\000\004\136\134\001\002\000" +
    "\010\112\061\131\062\152\010\001\002\000\010\030\140" +
    "\034\137\054\136\001\002\000\030\005\uffaf\007\uffaf\011" +
    "\uffaf\015\uffaf\035\uffaf\055\uffaf\076\uffaf\100\uffaf\150\uffaf" +
    "\151\uffaf\152\uffaf\001\002\000\010\112\061\131\062\152" +
    "\010\001\002\000\010\112\061\131\062\152\010\001\002" +
    "\000\030\005\uffb0\007\uffb0\011\uffb0\015\uffb0\035\uffb0\055" +
    "\uffb0\076\uffb0\100\uffb0\150\uffb0\151\uffb0\152\uffb0\001\002" +
    "\000\030\005\uffb1\007\uffb1\011\uffb1\015\uffb1\035\uffb1\055" +
    "\uffb1\076\uffb1\100\uffb1\150\uffb1\151\uffb1\152\uffb1\001\002" +
    "\000\024\007\056\015\uffce\035\042\055\046\076\044\100" +
    "\040\150\054\151\041\152\010\001\002\000\010\112\061" +
    "\131\062\152\010\001\002\000\030\005\143\007\056\011" +
    "\144\015\uffd5\035\042\055\046\076\044\100\040\150\054" +
    "\151\041\152\010\001\002\000\030\005\143\007\056\011" +
    "\144\015\uffd5\035\042\055\046\076\044\100\040\150\054" +
    "\151\041\152\010\001\002\000\004\140\163\001\002\000" +
    "\030\005\143\007\056\011\144\015\uffd5\035\042\055\046" +
    "\076\044\100\040\150\054\151\041\152\010\001\002\000" +
    "\004\140\160\001\002\000\030\005\143\007\056\011\144" +
    "\015\uffd5\035\042\055\046\076\044\100\040\150\054\151" +
    "\041\152\010\001\002\000\004\015\154\001\002\000\004" +
    "\055\155\001\002\000\004\140\156\001\002\000\032\003" +
    "\uffde\005\uffde\007\uffde\011\uffde\015\uffde\035\uffde\055\uffde" +
    "\076\uffde\100\uffde\150\uffde\151\uffde\152\uffde\001\002\000" +
    "\004\015\uffdc\001\002\000\030\005\143\007\056\011\144" +
    "\015\uffd5\035\042\055\046\076\044\100\040\150\054\151" +
    "\041\152\010\001\002\000\004\015\uffd8\001\002\000\004" +
    "\015\uffdd\001\002\000\030\005\143\007\056\011\144\015" +
    "\uffd5\035\042\055\046\076\044\100\040\150\054\151\041" +
    "\152\010\001\002\000\004\015\uffd9\001\002\000\004\015" +
    "\uffdb\001\002\000\004\015\uffda\001\002\000\030\005\143" +
    "\007\056\011\144\015\uffd5\035\042\055\046\076\044\100" +
    "\040\150\054\151\041\152\010\001\002\000\004\015\uffd6" +
    "\001\002\000\004\015\uffd7\001\002\000\024\007\056\015" +
    "\uffce\035\042\055\046\076\044\100\040\150\054\151\041" +
    "\152\010\001\002\000\024\007\056\015\uffce\035\042\055" +
    "\046\076\044\100\040\150\054\151\041\152\010\001\002" +
    "\000\024\007\056\015\uffce\035\042\055\046\076\044\100" +
    "\040\150\054\151\041\152\010\001\002\000\004\140\203" +
    "\001\002\000\004\140\201\001\002\000\024\007\056\015" +
    "\uffce\035\042\055\046\076\044\100\040\150\054\151\041" +
    "\152\010\001\002\000\004\015\uffd4\001\002\000\024\007" +
    "\056\015\uffce\035\042\055\046\076\044\100\040\150\054" +
    "\151\041\152\010\001\002\000\004\015\uffcf\001\002\000" +
    "\024\007\056\015\uffce\035\042\055\046\076\044\100\040" +
    "\150\054\151\041\152\010\001\002\000\004\015\uffd0\001" +
    "\002\000\004\015\uffd3\001\002\000\004\015\uffd2\001\002" +
    "\000\004\015\uffd1\001\002\000\004\015\ufff4\001\002\000" +
    "\004\015\231\001\002\000\004\120\223\001\002\000\022" +
    "\015\uffb2\035\042\055\046\076\044\100\040\150\054\151" +
    "\041\152\010\001\002\000\022\015\uffb2\035\042\055\046" +
    "\076\044\100\040\150\054\151\041\152\010\001\002\000" +
    "\022\015\uffb2\035\042\055\046\076\044\100\040\150\054" +
    "\151\041\152\010\001\002\000\022\015\uffb2\035\042\055" +
    "\046\076\044\100\040\150\054\151\041\152\010\001\002" +
    "\000\004\015\uffb5\001\002\000\004\015\uffb4\001\002\000" +
    "\004\015\uffb6\001\002\000\004\015\uffb3\001\002\000\014" +
    "\110\224\111\225\112\061\131\062\152\010\001\002\000" +
    "\006\132\uffcc\140\uffcc\001\002\000\006\132\uffcb\140\uffcb" +
    "\001\002\000\006\132\uffca\140\uffca\001\002\000\004\140" +
    "\230\001\002\000\032\003\uffcd\005\uffcd\007\uffcd\011\uffcd" +
    "\015\uffcd\035\uffcd\055\uffcd\076\uffcd\100\uffcd\150\uffcd\151" +
    "\uffcd\152\uffcd\001\002\000\004\076\232\001\002\000\004" +
    "\140\233\001\002\000\032\003\uffb9\005\uffb9\007\uffb9\011" +
    "\uffb9\015\uffb9\035\uffb9\055\uffb9\076\uffb9\100\uffb9\150\uffb9" +
    "\151\uffb9\152\uffb9\001\002\000\004\061\235\001\002\000" +
    "\004\112\236\001\002\000\004\116\245\001\002\000\004" +
    "\076\240\001\002\000\022\015\uffb2\035\042\055\046\076" +
    "\044\100\040\150\054\151\041\152\010\001\002\000\004" +
    "\015\242\001\002\000\004\076\243\001\002\000\004\140" +
    "\244\001\002\000\032\003\uffb8\005\uffb8\007\uffb8\011\uffb8" +
    "\015\uffb8\035\uffb8\055\uffb8\076\uffb8\100\uffb8\150\uffb8\151" +
    "\uffb8\152\uffb8\001\002\000\004\112\246\001\002\000\004" +
    "\076\uffea\001\002\000\016\110\224\111\225\112\061\131" +
    "\062\146\251\152\010\001\002\000\004\132\uffa5\001\002" +
    "\000\004\132\uffa6\001\002\000\004\132\253\001\002\000" +
    "\004\140\254\001\002\000\032\003\uffa8\005\uffa8\007\uffa8" +
    "\011\uffa8\015\uffa8\035\uffa8\055\uffa8\076\uffa8\100\uffa8\150" +
    "\uffa8\151\uffa8\152\uffa8\001\002\000\004\076\265\001\002" +
    "\000\004\136\257\001\002\000\010\112\061\131\062\152" +
    "\010\001\002\000\010\030\262\034\261\076\uffac\001\002" +
    "\000\010\112\061\131\062\152\010\001\002\000\010\112" +
    "\061\131\062\152\010\001\002\000\004\076\uffaa\001\002" +
    "\000\004\076\uffab\001\002\000\022\015\uffb2\035\042\055" +
    "\046\076\044\100\040\150\054\151\041\152\010\001\002" +
    "\000\004\015\267\001\002\000\004\076\270\001\002\000" +
    "\004\140\271\001\002\000\032\003\uffb7\005\uffb7\007\uffb7" +
    "\011\uffb7\015\uffb7\035\uffb7\055\uffb7\076\uffb7\100\uffb7\150" +
    "\uffb7\151\uffb7\152\uffb7\001\002\000\004\113\031\001\002" +
    "\000\006\120\275\132\uffe4\001\002\000\004\132\uffe9\001" +
    "\002\000\010\110\276\111\277\112\061\001\002\000\004" +
    "\132\uffe6\001\002\000\004\132\uffe5\001\002\000\004\132" +
    "\uffe7\001\002\000\004\113\031\001\002\000\006\120\305" +
    "\140\303\001\002\000\016\002\uffdf\003\uffdf\040\uffdf\046" +
    "\uffdf\056\uffdf\152\uffdf\001\002\000\016\002\uffe3\003\uffe3" +
    "\040\uffe3\046\uffe3\056\uffe3\152\uffe3\001\002\000\010\110" +
    "\306\111\307\112\061\001\002\000\004\140\313\001\002" +
    "\000\004\140\312\001\002\000\004\140\311\001\002\000" +
    "\016\002\uffe2\003\uffe2\040\uffe2\046\uffe2\056\uffe2\152\uffe2" +
    "\001\002\000\016\002\uffe0\003\uffe0\040\uffe0\046\uffe0\056" +
    "\uffe0\152\uffe0\001\002\000\016\002\uffe1\003\uffe1\040\uffe1" +
    "\046\uffe1\056\uffe1\152\uffe1\001\002\000\006\002\ufff9\046" +
    "\ufff9\001\002\000\004\065\316\001\002\000\014\003\012" +
    "\040\015\046\ufffa\056\011\152\010\001\002\000\004\046" +
    "\035\001\002\000\006\002\ufffc\046\ufffc\001\002\000\004" +
    "\065\322\001\002\000\014\003\012\040\015\046\ufffa\056" +
    "\011\152\010\001\002\000\004\046\035\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\004\007\320\001\001\000\012\004\013\007\016" +
    "\010\012\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\314\001\001\000\012\004\313\007\016" +
    "\010\012\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\022\001\001\000\012\004\021\007\016" +
    "\010\012\014\015\001\001\000\002\001\001\000\006\007" +
    "\016\010\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\016\010\024\016\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\033\007\016\010\012\014\015\001\001" +
    "\000\004\044\035\001\001\000\022\006\054\007\042\017" +
    "\050\022\056\027\052\030\046\035\051\040\044\001\001" +
    "\000\012\004\036\007\016\010\012\014\015\001\001\000" +
    "\002\001\001\000\016\007\066\012\065\024\255\025\062" +
    "\034\254\035\064\001\001\000\002\001\001\000\004\007" +
    "\233\001\001\000\004\036\070\001\001\000\016\007\211" +
    "\017\214\022\215\030\213\031\210\040\212\001\001\000" +
    "\022\006\207\007\042\017\050\022\056\027\052\030\046" +
    "\035\051\040\044\001\001\000\016\007\066\012\065\024" +
    "\132\025\062\032\131\035\064\001\001\000\022\006\130" +
    "\007\042\017\050\022\056\027\052\030\046\035\051\040" +
    "\044\001\001\000\022\006\127\007\042\017\050\022\056" +
    "\027\052\030\046\035\051\040\044\001\001\000\022\006" +
    "\126\007\042\017\050\022\056\027\052\030\046\035\051" +
    "\040\044\001\001\000\002\001\001\000\022\006\123\007" +
    "\042\017\050\022\056\027\052\030\046\035\051\040\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\066\012\065\024\063\025\062\035\064\001\001\000\022" +
    "\006\057\007\042\017\050\022\056\027\052\030\046\035" +
    "\051\040\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\066\012\065\024\111\025\062\035\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\070\001\001\000\016\007" +
    "\066\012\065\024\072\025\062\035\064\037\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\066\012\065\024\072\025\062" +
    "\035\064\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\066\012\065\025\107\035\064\001\001" +
    "\000\012\007\066\012\065\025\101\035\064\001\001\000" +
    "\004\026\104\001\001\000\012\007\066\012\065\025\106" +
    "\035\064\001\001\000\012\007\066\012\065\025\105\035" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\125\007" +
    "\042\017\050\022\056\027\052\030\046\035\051\040\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\042\017\147\020\152" +
    "\022\151\027\150\030\145\035\146\040\144\001\001\000" +
    "\002\001\001\000\014\007\066\012\065\024\134\025\062" +
    "\035\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\066\012\065\024\132\025\062\032\141\035\064" +
    "\001\001\000\016\007\066\012\065\024\132\025\062\032" +
    "\140\035\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\042\017\173\021\170\022\176\027\175\030" +
    "\172\035\174\040\171\001\001\000\016\007\066\012\065" +
    "\024\132\025\062\032\166\035\064\001\001\000\022\007" +
    "\042\017\147\020\165\022\151\027\150\030\145\035\146" +
    "\040\144\001\001\000\022\007\042\017\147\020\164\022" +
    "\151\027\150\030\145\035\146\040\144\001\001\000\002" +
    "\001\001\000\022\007\042\017\147\020\161\022\151\027" +
    "\150\030\145\035\146\040\144\001\001\000\002\001\001" +
    "\000\022\007\042\017\147\020\156\022\151\027\150\030" +
    "\145\035\146\040\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\042\017\147\020\160\022\151\027\150" +
    "\030\145\035\146\040\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\042\017\147\020\163\022\151" +
    "\027\150\030\145\035\146\040\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\042" +
    "\017\147\020\167\022\151\027\150\030\145\035\146\040" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\042\017\173\021\206\022\176\027\175\030\172\035" +
    "\174\040\171\001\001\000\022\007\042\017\173\021\205" +
    "\022\176\027\175\030\172\035\174\040\171\001\001\000" +
    "\022\007\042\017\173\021\204\022\176\027\175\030\172" +
    "\035\174\040\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\042\017\173\021\177\022\176\027\175" +
    "\030\172\035\174\040\171\001\001\000\002\001\001\000" +
    "\022\007\042\017\173\021\201\022\176\027\175\030\172" +
    "\035\174\040\171\001\001\000\002\001\001\000\022\007" +
    "\042\017\173\021\203\022\176\027\175\030\172\035\174" +
    "\040\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\211\017\214\022" +
    "\215\030\213\031\221\040\212\001\001\000\016\007\211" +
    "\017\214\022\215\030\213\031\220\040\212\001\001\000" +
    "\016\007\211\017\214\022\215\030\213\031\217\040\212" +
    "\001\001\000\016\007\211\017\214\022\215\030\213\031" +
    "\216\040\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\066\012" +
    "\065\023\226\024\225\025\062\035\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\211" +
    "\017\214\022\215\030\213\031\240\040\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\066\012\065\023\247\024\225\025\062\035\064\042\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\066\012\065\024\257\025" +
    "\062\035\064\001\001\000\002\001\001\000\016\007\066" +
    "\012\065\024\255\025\062\034\263\035\064\001\001\000" +
    "\016\007\066\012\065\024\255\025\062\034\262\035\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\211\017\214\022\215\030\213\031\265\040\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\272\001\001\000\004\041\273" +
    "\001\001\000\002\001\001\000\004\012\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\301\001\001\000\004\015\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\316\007\016\010\012\014" +
    "\015\001\001\000\004\044\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\322\007\016\010\012\014" +
    "\015\001\001\000\004\044\323\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static LinkedList<String> msgErroresSintactico = new LinkedList<String>();

  public static LinkedList<String> msgErroresSemantico = new LinkedList<String>();

  public void report_error (String message, Object info) {
    if (message.equalsIgnoreCase("Syntax error")) {
      message = "Error Sintactico";
    } else if (message.equalsIgnoreCase("Couldn't repair and continue parse")) {
      message = "Error Fatal";
    }
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.right >= 0) {
        message += ": en linea " + (s.right + 1);
        if (s.left >= 0) {
          message += ", columna " + (s.left + 1);
        }
        if(getScanner() instanceof Ada95) {
          message += "; no se esperaba '" + ((Ada95)getScanner()).getCurrentText()+"'";
        }
      }
    }
    msgErroresSintactico.add(message);
  }

  public void report_fatal_error (String message, Object info) {
    report_error(message, info);
  }

  public boolean insertarSimbolo(String id, String tipo, String ambito){
        for (String[] strings : tablaSimbolos) {
            if(strings[0].compareToIgnoreCase(id) == 0)
                return false;
        }
        tablaSimbolos.add(new String[]{id, tipo, ambito});
        return true;
  }

  public boolean isInteger (String value) {
    if (value.indexOf(".") == 1) {
      return false;
    } else {
      return true;
    }
  }

  public Nodo raiz;
  public LinkedList<String[]> tablaSimbolos = new LinkedList();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*A.root = F*/
                                          raiz = new Nodo();
                                          raiz.setTag("Nodo de inicio");
                                          raiz.addHijo(((Container)hijo).nodo);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G CUERPO 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*procedure(G)*/
                                          Nodo nod = new Nodo();
                                          nod.setTag("Procedure");
                                          nod.addHijo(((Container)hijo1).nodo);

                                          if (insertarSimbolo(((Container)hijo1).nodo.valor, "null", "")){
                                            int simFun = tablaSimbolos.size() - 1;
                                            while(simFun >= 0 && tablaSimbolos.get(simFun)[2] == ""){
                                              tablaSimbolos.set(simFun, new String[]{tablaSimbolos.get(simFun)[0], tablaSimbolos.get(simFun)[1], hijo1.nodo.valor});
                                              tablaSimbolos.set(tablaSimbolos.size() -1, new String[]{tablaSimbolos.get(tablaSimbolos.size() -1)[0], tablaSimbolos.get(tablaSimbolos.size() -1)[1], tablaSimbolos.get(tablaSimbolos.size() -1)[2] + ";" + tablaSimbolos.get(simFun)[0]});
                                              simFun--;
                                            }
                                          }

                                          if(hijo2 != null){
                                            if(((Container)hijo2).nodo.getInfo().equals("tem")){
                                              for(int i = 0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                nod.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }
                                            }else{
                                              nod.addHijo(((Container)hijo2).nodo);
                                            }
                                          }

                                          nod.addHijo(((Container)hijo3).nodo);
                                          RESULT = new Container(nod);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // F ::= error G 
            {
              Container RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= C G 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = nodo(C, G)*/
                                          Nodo tem = new Nodo();
                                          tem.setTag("tem");
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 == null){

                                          }else{
                                            if(((Container)hijo2).nodo.getInfo().equals("tem")){

                                            for(int i = 0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }else{
                                            tem.addHijo(((Container)hijo2).nodo);
                                          }
                                          }

                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= PROCEDURE X IS G CUERPO 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*procedure(G)*/
                                          Nodo nod = new Nodo();
                                          nod.setTag("Procedure");
                                          nod.addHijo(((Container)hijo1).nodo);

                                          if (insertarSimbolo(((Container)hijo1).nodo.valor, "null", "")){
                                            int simFun = tablaSimbolos.size() - 1;
                                            while(simFun >= 0 && tablaSimbolos.get(simFun)[2] == ""){
                                              tablaSimbolos.set(simFun, new String[]{tablaSimbolos.get(simFun)[0], tablaSimbolos.get(simFun)[1], hijo1.nodo.valor});
                                              tablaSimbolos.set(tablaSimbolos.size() -1, new String[]{tablaSimbolos.get(tablaSimbolos.size() -1)[0], tablaSimbolos.get(tablaSimbolos.size() -1)[1], tablaSimbolos.get(tablaSimbolos.size() -1)[2] + ";" + tablaSimbolos.get(simFun)[0]});
                                              simFun--;
                                            }
                                          }

                                          if(hijo2 != null){
                                            if(((Container)hijo2).nodo.getInfo().equals("tem")){
                                              for(int i = 0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                nod.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }
                                            }else{
                                              nod.addHijo(((Container)hijo2).nodo);
                                            }
                                          }

                                          nod.addHijo(((Container)hijo3).nodo);
                                          RESULT = new Container(nod);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= FUNCTION X LP ARG RP RETURN Z IS G CUERPO G 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo4 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = function(X,return(Z),H)*/
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("Function");
                                                      tem.addHijo(((Container)hijo1).nodo);
                                                      Nodo ret = new Nodo();
                                                      ret.setTag("Return");
                                                      ret.addHijo(((Container)hijo2).nodo);
                                                      tem.addHijo(ret);
                                                      if(hijo3 != null){
                                                        if(((Container)hijo3).nodo.getInfo().equals("tem")){
                                                          for(int i = 0; i < ((Container)hijo3).nodo.hijos.size();i++){
                                                            tem.addHijo(((Container)hijo3).nodo.hijos.get(i));
                                                          }
                                                        }else{
                                                        tem.addHijo(((Container)hijo3).nodo);
                                                      }
                                                      }

                                                      tem.addHijo(((Container)hijo4).nodo);

                                                      if (insertarSimbolo(hijo1.nodo.valor, "null", "")){
                                                        int simFun = tablaSimbolos.size() - 1;
                                                        while(simFun >= 0 && tablaSimbolos.get(simFun)[2] == ""){
                                                          tablaSimbolos.set(simFun, new String[]{tablaSimbolos.get(simFun)[0], tablaSimbolos.get(simFun)[1], hijo1.nodo.valor});
                                                          tablaSimbolos.set(tablaSimbolos.size() -1, new String[]{tablaSimbolos.get(tablaSimbolos.size() -1)[0], tablaSimbolos.get(tablaSimbolos.size() -1)[1], tablaSimbolos.get(tablaSimbolos.size() -1)[2] + ";" + tablaSimbolos.get(simFun)[0]});
                                                          simFun--;
                                                        }
                                                      }
                                                      //tem.addHijo((Nodo)hijo3);
                                                      RESULT = new Container(tem);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // G ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // G ::= error G 
            {
              Container RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= BEGIN I END X PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = body(I)*/

                                           // System.out.println("++++++++++++++++++++++++++");
                                          Nodo tem = new Nodo();
                                          tem.setTag("Cuerpo");
                                          //tem.addHijo((Nodo)hijo1);
                                          if(hijo1 != null){
                                            for(int i=0; i < ((Container)hijo1).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo1).nodo.hijos.get(i));
                                            }
                                          }

                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= L I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= M I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= E I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= P I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I ::= E3 I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I ::= E4 PC I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // I ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // I ::= error I 
            {
              Container RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // X ::= ID 
            {
              Container RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* Result = ID(att:i) */
                          RESULT = new Container(new Nodo("ID",i));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // X2 ::= X COMA X2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = declaracion (att: arreglo = X + X2.arreglo)*/
                                    RESULT = new Container(new Nodo("Declaracion","arreglo"));
                                    insertarSimbolo(hijo1.nodo.valor, "", "0");
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // X2 ::= X 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* result = X*/
                              RESULT = (Container)hijo;
                              insertarSimbolo(hijo.nodo.valor, "", "0");
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Z ::= DATATYPES 
            {
              Container RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = dt; */
                          RESULT = new Container(new Nodo("DATA TYPE",dt));
                          int sim = tablaSimbolos.size() - 1;
                          while(sim >= 0 && tablaSimbolos.get(sim)[1] == ""){
                            tablaSimbolos.set(sim, new String[]{tablaSimbolos.get(sim)[0], dt, ""});
                            sim--;
                          }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N ::= NUM 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ RESULT = new Container(new Nodo("NUM",n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N1 ::= NUM DOUBD NUM 
            {
              Container RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = range(att: num1, num2)*/ RESULT = new Container(new Nodo("Rango",n1 + t + n2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARG ::= X2 DOS Z ARG2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Container)hijo2).nodo.addHijo(((Container)hijo1).nodo);

                                          /*int sim = tablaSimbolos.size() - 1;
                                          while(sim >= 0 && tablaSimbolos.get(sim)[1] == ""){
                                            tablaSimbolos.set(sim, new String[]{tablaSimbolos.get(sim)[0], hijo2.valor});
                                            sim--;
                                          }*/
                                          if(((Container)hijo3).nodo.getInfo().equals("nulo")){
                                          }else{
                                            ((Container)hijo2).nodo.addHijo(((Container)hijo3).nodo);
                                          }
                                          RESULT = (Container)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARG ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARG2 ::= ASSIGN N 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container n = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag("ASSIGN");
                          tem.addHijo(((Container)n).nodo);
                          RESULT = new Container(tem);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARG2 ::= ASSIGN TRUE 
            {
              Container RESULT =null;
		/*result = true*/
                          RESULT = new Container(new Nodo("ASSIGN","TRUE"));

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARG2 ::= ASSIGN FALSE 
            {
              Container RESULT =null;
		/*result = false*/
                          RESULT = new Container(new Nodo("ASSIGN","FALSE"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARG2 ::= 
            {
              Container RESULT =null;
		RESULT = new Container(new Nodo("nulo","0"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // C ::= X2 DOS Z D 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Container)hijo2).nodo.addHijo(((Container)hijo1).nodo);
                                          if(((Container)hijo3).nodo.getInfo().equals("nulo")){
                                          }else{
                                            if (hijo3.nodo.hijos.size() != 0) {
                                              for (Nodo n: hijo3.nodo.hijos) {
                                                for (int i = 0; i < tablaSimbolos.size(); i++) {
                                                  String identificador = tablaSimbolos.get(i)[0];
                                                  String tipo = tablaSimbolos.get(i)[1];
                                                  if (identificador.equals(hijo1.nodo.valor)) {
                                                    if (tipo.equalsIgnoreCase("Integer") && !isInteger(n.valor)) {
                                                      System.out.println("Error Semantico");
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            ((Container)hijo2).nodo.addHijo(((Container)hijo3).nodo);
                                          }
                                          RESULT = (Container)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D ::= ASSIGN N PC 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container n = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag("ASSIGN");
                          tem.addHijo(((Container)n).nodo);
                          RESULT = new Container(tem);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D ::= ASSIGN TRUE PC 
            {
              Container RESULT =null;
		/*result = true*/
                          RESULT = new Container(new Nodo("ASSIGN","TRUE"));

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D ::= ASSIGN FALSE PC 
            {
              Container RESULT =null;
		/*result = false*/
                          RESULT = new Container(new Nodo("ASSIGN","FALSE"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D ::= PC 
            {
              Container RESULT =null;
		/*result = null*/
                          RESULT = new Container(new Nodo("nulo","-1"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L ::= IF L1 L2 END IF PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*result = if(L1,body(L2))*/
                                            Nodo tem = new Nodo();
                                            tem.setTag("IF");
                                            tem.addHijo(((Container)hijo1).nodo);
                                            Nodo tem2 = new Nodo();
                                            tem2.setTag("Cuerpo");
                                            if(hijo2 != null){
                                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }
                                            }
                                            tem.addHijo(tem2);
                                            RESULT = new Container(tem);
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L2 ::= L L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(L+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L2 ::= E L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(E+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L2 ::= M L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(M+l2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L2 ::= P L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(P+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L2 ::= E4 PC L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L2 ::= E3 PC L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo(((Container)hijo1).nodo);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L2 ::= ELSE L4 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/**/
                                  Nodo tem = new Nodo();
                                  Nodo tem2 = new Nodo();
                                  tem2.setTag("Else");
                                  Nodo cuerpo = new Nodo();
                                  cuerpo.setTag("Cuerpo");
                                  if(hijo != null){
                                    for(int i=0; i < ((Container)hijo).nodo.hijos.size();i++){
                                      cuerpo.addHijo(((Container)hijo).nodo.hijos.get(i));
                                    }
                                  }
                                  tem2.addHijo((Nodo)cuerpo);
                                  tem.addHijo((Nodo)tem2);
                                  RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L2 ::= ELSIF L1 L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.setTag("ELSIF");
                                tem.addHijo(((Container)hijo1).nodo);
                                Nodo tem2 = new Nodo();
                                tem2.setTag("Cuerpo");
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                tem.addHijo(tem2);
                                Nodo res = new Nodo();
                                res.addHijo((Nodo)tem);
                                RESULT = new Container((Nodo)res);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L2 ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L4 ::= E L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(E+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L4 ::= L L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(L+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L4 ::= M L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(M+l2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L4 ::= P L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(P+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L4 ::= E4 PC L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo(((Container)hijo1).nodo);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L4 ::= E3 PC L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo(((Container)hijo1).nodo);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L4 ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= X ASSIGN E2 PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = asign(X, E2)*/
                                                Nodo tem = new Nodo("Asignacion","::=");
                                                tem.addHijo(((Container)hijo1).nodo);
                                                tem.addHijo(((Container)hijo2).nodo);
                                                RESULT = new Container(tem);
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= TRUE 
            {
              Container RESULT =null;
		 /*result = true*/
                      RESULT = new Container(new Nodo("TRUE","1"));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= FALSE 
            {
              Container RESULT =null;
		 /*result = false*/RESULT = new Container(new Nodo("FALSE","0")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E2 ::= E5 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* */RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= X PA 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = ejec(X, PA)*/
                                  Nodo tem = new Nodo();
                                  tem.setTag("Ejecucion");
                                  tem.addHijo(((Container)hijo1).nodo);
                                  if (hijo2 != null) {
                                    tem.addHijo(((Container)hijo2).nodo);
                                  }
                                  RESULT = new Container(tem);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PA ::= LP PA2 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = pa2*/
                                        RESULT = hijo != null ? (Container)hijo : null;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PA2 ::= E5 COMA PA2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(L3+PA2)*/
                                    Nodo tem = new Nodo("Argumentos","arg");
                                    tem.addHijo(((Container)hijo1).nodo);
                                    if(hijo2 != null){
                                      for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                        tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                      }
                                    }
                                    RESULT = new Container((Nodo)tem);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PA2 ::= E5 RP 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*rsult = arreglo(L3)*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PA2 ::= RP 
            {
              Container RESULT =null;
		 /*result = null*/
                                    RESULT = null;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E6 OP E6 E7 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E7.op(op(E6, E6),E7.E6) */
                                            Nodo tem = new Nodo("OP",t);
                                            tem.addHijo(((Container)hijo1).nodo);
                                            tem.addHijo(((Container)hijo2).nodo);
                                            if(hijo3 == null){
                                              RESULT = new Container(tem);
                                            }else{
                                              ((Container)hijo3).nodo.addHijo((Nodo)tem);
                                              RESULT = (Container)hijo3;
                                            }

                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E6 MOD E6 E7 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            Nodo tem = new Nodo("MOD",t);
                                            tem.addHijo(((Container)hijo1).nodo);
                                            tem.addHijo(((Container)hijo2).nodo);
                                            if(hijo3 == null){
                                              RESULT = new Container(tem);
                                            }else{
                                              ((Container)hijo3).nodo.addHijo((Nodo)tem);
                                              RESULT = (Container)hijo3;
                                            }
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E5 ::= E6 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Container)hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E6 ::= N 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l3*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E6 ::= E4 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E4*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= LP E5 RP 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = E5*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= X 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E5*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= OP E6 
            {
              Container RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(op,E6)*/
                                  Nodo tem = new Nodo("OP",t);
                                  tem.addHijo(((Container)hijo).nodo);
                                  RESULT = new Container(tem);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= MOD E6 
            {
              Container RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(mod,E6)*/
                                  Nodo tem = new Nodo("MOD",t);
                                  tem.addHijo(((Container)hijo).nodo);
                                  RESULT = new Container(tem);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= 
            {
              Container RESULT =null;
		 /*result = null*/ RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= RETURN E5 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  Nodo tem = new Nodo("Return","0");
                                  tem.addHijo(((Container)hijo).nodo);
                                  RESULT = new Container(tem);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // M ::= LOOP M1 END LOOP PC 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                              Nodo tem = new Nodo("Loop","0");
                                              Nodo tem2 = new Nodo();
                                              tem2.setTag("Cuerpo");
                                              for(int i=0; i < ((Container)hijo).nodo.hijos.size();i++){
                                                tem2.addHijo(((Container)hijo).nodo.hijos.get(i));
                                              }
                                              tem.addHijo(tem2);
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M ::= FOR X IN N1 LOOP M1 END LOOP PC 
            {
              Container RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Container t = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                            Nodo tem = new Nodo("FOR","0");
                                                            Nodo tem2 = new Nodo();
                                                            tem.addHijo(((Container)hijo1).nodo);
                                                            tem2.setTag("Cuerpo");
                                                            if(hijo2 != null){
                                                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                                tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                              }
                                                            }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = new Container(tem);
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // M ::= WHILE L6 LOOP M1 END LOOP PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                          Nodo tem = new Nodo();
                                                          tem.setTag("WHILE");
                                                          tem.addHijo(((Container)hijo1).nodo);
                                                          Nodo tem2 = new Nodo();
                                                          tem2.setTag("Cuerpo");
                                                          if(hijo2 != null){
                                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                              tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                            }
                                                          }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = new Container(tem);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // M1 ::= M M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // M1 ::= E M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // M1 ::= L M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // M1 ::= P M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // M1 ::= 
            {
              Container RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // L1 ::= E5 OPREL E5 AND L1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = AND (OPREL(e5,e5), L1)*/
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("AND");
                                                      Nodo tem2 = new Nodo("OPREL",t);
                                                      tem2.addHijo(((Container)hijo1).nodo);
                                                      tem2.addHijo(((Container)hijo2).nodo);
                                                      tem.addHijo((Nodo)tem2);
                                                      tem.addHijo(((Container)hijo3).nodo);

                                                      RESULT = new Container(tem);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L1 ::= E5 OPREL E5 OR L1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = OR (OPREL(e5,e5), L1)*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("OR");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo(((Container)hijo1).nodo);
                                                    tem2.addHijo(((Container)hijo2).nodo);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo(((Container)hijo3).nodo);

                                                    RESULT = new Container(tem);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L1 ::= E5 OPREL E5 THEN 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  /* result = oprel(e5, e5)*/
                                Nodo tem = new Nodo("OPREL",t);
                                tem.addHijo(((Container)hijo1).nodo);
                                tem.addHijo(((Container)hijo2).nodo);
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L3 ::= N 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container n = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ /* Voy aqui */
                            RESULT = (Container)n;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L3 ::= X 
            {
              Container RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container x = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */
                            RESULT = (Container)x;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // L6 ::= E5 OPREL E5 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem2 = new Nodo("OPREL",t);
                                              tem2.addHijo(((Container)hijo1).nodo);
                                              tem2.addHijo(((Container)hijo2).nodo);
                                              RESULT = new Container(tem2);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // L6 ::= E5 OPREL E5 AND L6 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("AND");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo(((Container)hijo1).nodo);
                                                    tem2.addHijo(((Container)hijo2).nodo);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo(((Container)hijo3).nodo);
                                                    RESULT = new Container(tem);
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // L6 ::= E5 OPREL E5 OR L6 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("OR");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo(((Container)hijo1).nodo);
                                                    tem2.addHijo(((Container)hijo2).nodo);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo(((Container)hijo3).nodo);
                                                    RESULT = new Container(tem);
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // P ::= GET LP P1 RP PC 
            {
              Container RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String hijo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo("Get",hijo);
                                      RESULT =  new Container(tem);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // P ::= PUT LP P2 RP PC 
            {
              Container RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo("Put", lp);
                                      tem.addHijo(((Container)hijo).nodo);
                                      RESULT = new Container(tem);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // P1 ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // P2 ::= EXP 
            {
              Container RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Container(new Nodo("String",i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // P2 ::= E2 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Container) hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
