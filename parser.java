
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\004\004\000\002\004\010\000\002\004\004" +
    "\000\002\005\004\000\002\005\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\012\003" +
    "\000\002\013\005\000\002\014\006\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\005\000\002\017\005\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\005\000\002\021\005\000" +
    "\002\021\006\000\002\021\006\000\002\022\004\000\002" +
    "\022\005\000\002\022\003\000\002\023\004\000\002\023" +
    "\003\000\002\024\004\000\002\024\010\000\002\024\005" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\005\000\002\026\005\000\002\027\003\000\002" +
    "\027\003\000\002\030\004\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\007\000" +
    "\002\032\007\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\056\005\001\002\000\004\002\233\001" +
    "\002\000\004\152\007\001\002\000\004\002\000\001\002" +
    "\000\036\007\ufff3\030\ufff3\034\ufff3\054\ufff3\065\ufff3\076" +
    "\ufff3\112\ufff3\120\ufff3\133\ufff3\134\ufff3\136\ufff3\137\ufff3" +
    "\140\ufff3\152\ufff3\001\002\000\004\065\011\001\002\000" +
    "\010\040\016\046\014\152\007\001\002\000\004\137\224" +
    "\001\002\000\004\002\uffff\001\002\000\032\007\040\015" +
    "\037\035\056\055\044\076\036\100\034\112\052\133\035" +
    "\140\055\150\057\151\047\152\007\001\002\000\010\040" +
    "\016\046\014\152\007\001\002\000\004\152\007\001\002" +
    "\000\006\134\020\137\ufff1\001\002\000\004\152\007\001" +
    "\002\000\004\137\ufff2\001\002\000\004\007\023\001\002" +
    "\000\004\113\024\001\002\000\010\065\ufff0\120\ufff0\140" +
    "\ufff0\001\002\000\004\065\026\001\002\000\006\046\030" +
    "\152\007\001\002\000\004\002\ufffd\001\002\000\032\007" +
    "\040\015\037\035\056\055\044\076\036\100\034\112\052" +
    "\133\035\140\055\150\057\151\047\152\007\001\002\000" +
    "\006\046\030\152\007\001\002\000\004\002\ufffb\001\002" +
    "\000\014\112\uffce\120\105\133\uffce\140\uffce\152\uffce\001" +
    "\002\000\014\030\213\034\207\076\211\112\052\152\007" +
    "\001\002\000\006\112\052\152\007\001\002\000\016\015" +
    "\076\035\056\055\044\076\036\100\034\152\007\001\002" +
    "\000\004\152\007\001\002\000\014\007\040\112\052\133" +
    "\035\140\055\152\007\001\002\000\032\007\040\015\037" +
    "\035\056\055\044\076\036\100\034\112\052\133\035\140" +
    "\055\150\057\151\047\152\007\001\002\000\024\030\uffcf" +
    "\034\uffcf\054\uffcf\076\uffcf\112\uffcf\133\uffcf\136\uffcf\140" +
    "\uffcf\152\uffcf\001\002\000\032\007\040\015\037\035\056" +
    "\055\044\076\036\100\034\112\052\133\035\140\055\150" +
    "\057\151\047\152\007\001\002\000\014\030\137\034\132" +
    "\054\135\112\052\152\007\001\002\000\032\007\040\015" +
    "\037\035\056\055\044\076\036\100\034\112\052\133\035" +
    "\140\055\150\057\151\047\152\007\001\002\000\032\007" +
    "\040\015\037\035\056\055\044\076\036\100\034\112\052" +
    "\133\035\140\055\150\057\151\047\152\007\001\002\000" +
    "\004\131\121\001\002\000\032\007\uffd8\015\uffd8\035\uffd8" +
    "\055\uffd8\076\uffd8\100\uffd8\112\uffd8\133\uffd8\140\uffd8\150" +
    "\uffd8\151\uffd8\152\uffd8\001\002\000\010\040\016\046\014" +
    "\152\007\001\002\000\026\030\uffef\034\uffef\054\uffef\061" +
    "\uffef\076\uffef\112\uffef\133\uffef\136\uffef\140\uffef\152\uffef" +
    "\001\002\000\032\007\040\015\037\035\056\055\044\076" +
    "\036\100\034\112\052\133\035\140\055\150\057\151\047" +
    "\152\007\001\002\000\012\112\052\133\035\140\055\152" +
    "\007\001\002\000\036\005\uffda\007\uffda\011\uffda\015\uffda" +
    "\035\uffda\055\uffda\076\uffda\100\uffda\112\uffda\133\uffda\140" +
    "\uffda\150\uffda\151\uffda\152\uffda\001\002\000\004\112\052" +
    "\001\002\000\004\131\060\001\002\000\004\152\062\001" +
    "\002\000\004\132\063\001\002\000\004\132\uffc3\001\002" +
    "\000\004\140\064\001\002\000\032\007\uffc5\015\uffc5\035" +
    "\uffc5\055\uffc5\076\uffc5\100\uffc5\112\uffc5\133\uffc5\140\uffc5" +
    "\150\uffc5\151\uffc5\152\uffc5\001\002\000\004\061\066\001" +
    "\002\000\004\112\067\001\002\000\004\116\114\001\002" +
    "\000\004\076\071\001\002\000\016\015\076\035\056\055" +
    "\044\076\036\100\034\152\007\001\002\000\036\005\uffd6" +
    "\007\uffd6\011\uffd6\015\uffd6\035\uffd6\055\uffd6\076\uffd6\100" +
    "\uffd6\112\uffd6\133\uffd6\140\uffd6\150\uffd6\151\uffd6\152\uffd6" +
    "\001\002\000\004\120\105\001\002\000\016\015\076\035" +
    "\056\055\044\076\036\100\034\152\007\001\002\000\016" +
    "\015\076\035\056\055\044\076\036\100\034\152\007\001" +
    "\002\000\004\076\101\001\002\000\016\015\076\035\056" +
    "\055\044\076\036\100\034\152\007\001\002\000\036\005" +
    "\uffd3\007\uffd3\011\uffd3\015\uffd3\035\uffd3\055\uffd3\076\uffd3" +
    "\100\uffd3\112\uffd3\133\uffd3\140\uffd3\150\uffd3\151\uffd3\152" +
    "\uffd3\001\002\000\004\140\102\001\002\000\036\005\uffd1" +
    "\007\uffd1\011\uffd1\015\uffd1\035\uffd1\055\uffd1\076\uffd1\100" +
    "\uffd1\112\uffd1\133\uffd1\140\uffd1\150\uffd1\151\uffd1\152\uffd1" +
    "\001\002\000\036\005\uffd2\007\uffd2\011\uffd2\015\uffd2\035" +
    "\uffd2\055\uffd2\076\uffd2\100\uffd2\112\uffd2\133\uffd2\140\uffd2" +
    "\150\uffd2\151\uffd2\152\uffd2\001\002\000\036\005\uffd4\007" +
    "\uffd4\011\uffd4\015\uffd4\035\uffd4\055\uffd4\076\uffd4\100\uffd4" +
    "\112\uffd4\133\uffd4\140\uffd4\150\uffd4\151\uffd4\152\uffd4\001" +
    "\002\000\016\110\107\111\110\112\052\133\035\140\055" +
    "\152\007\001\002\000\024\030\uffce\034\uffce\054\uffce\076" +
    "\uffce\112\uffce\133\uffce\136\uffce\140\uffce\152\uffce\001\002" +
    "\000\004\140\113\001\002\000\004\140\112\001\002\000" +
    "\036\005\uffdf\007\uffdf\011\uffdf\015\uffdf\035\uffdf\055\uffdf" +
    "\076\uffdf\100\uffdf\112\uffdf\133\uffdf\140\uffdf\150\uffdf\151" +
    "\uffdf\152\uffdf\001\002\000\036\005\uffdd\007\uffdd\011\uffdd" +
    "\015\uffdd\035\uffdd\055\uffdd\076\uffdd\100\uffdd\112\uffdd\133" +
    "\uffdd\140\uffdd\150\uffdd\151\uffdd\152\uffdd\001\002\000\036" +
    "\005\uffde\007\uffde\011\uffde\015\uffde\035\uffde\055\uffde\076" +
    "\uffde\100\uffde\112\uffde\133\uffde\140\uffde\150\uffde\151\uffde" +
    "\152\uffde\001\002\000\004\112\115\001\002\000\004\076" +
    "\uffee\001\002\000\036\005\uffdc\007\uffdc\011\uffdc\015\uffdc" +
    "\035\uffdc\055\uffdc\076\uffdc\100\uffdc\112\uffdc\133\uffdc\140" +
    "\uffdc\150\uffdc\151\uffdc\152\uffdc\001\002\000\012\002\ufff7" +
    "\040\ufff7\046\ufff7\152\ufff7\001\002\000\004\002\ufffa\001" +
    "\002\000\010\112\122\146\124\152\123\001\002\000\004" +
    "\132\uffc0\001\002\000\004\132\uffc2\001\002\000\004\132" +
    "\uffc1\001\002\000\004\132\126\001\002\000\004\140\127" +
    "\001\002\000\032\007\uffc4\015\uffc4\035\uffc4\055\uffc4\076" +
    "\uffc4\100\uffc4\112\uffc4\133\uffc4\140\uffc4\150\uffc4\151\uffc4" +
    "\152\uffc4\001\002\000\012\002\ufff5\040\ufff5\046\ufff5\152" +
    "\ufff5\001\002\000\012\002\ufff9\040\ufff9\046\ufff9\152\ufff9" +
    "\001\002\000\006\112\052\152\007\001\002\000\022\005" +
    "\147\011\151\015\152\035\056\055\044\076\036\100\034" +
    "\152\007\001\002\000\004\136\143\001\002\000\022\005" +
    "\uffca\011\uffca\015\uffca\035\uffca\055\uffca\076\uffca\100\uffca" +
    "\152\uffca\001\002\000\014\030\137\034\132\054\135\112" +
    "\052\152\007\001\002\000\006\112\052\152\007\001\002" +
    "\000\014\030\137\034\132\054\135\112\052\152\007\001" +
    "\002\000\022\005\uffcb\011\uffcb\015\uffcb\035\uffcb\055\uffcb" +
    "\076\uffcb\100\uffcb\152\uffcb\001\002\000\022\005\uffcd\011" +
    "\uffcd\015\uffcd\035\uffcd\055\uffcd\076\uffcd\100\uffcd\152\uffcd" +
    "\001\002\000\006\112\052\152\007\001\002\000\016\030" +
    "\uffd0\034\uffd0\054\uffd0\076\uffd0\112\uffd0\152\uffd0\001\002" +
    "\000\036\005\uffea\007\uffea\011\uffea\015\uffea\035\uffea\055" +
    "\uffea\076\uffea\100\uffea\112\uffea\133\uffea\140\uffea\150\uffea" +
    "\151\uffea\152\uffea\001\002\000\022\005\147\011\151\015" +
    "\152\035\056\055\044\076\036\100\034\152\007\001\002" +
    "\000\016\015\163\035\056\055\044\076\036\100\034\152" +
    "\007\001\002\000\022\005\147\011\151\015\152\035\056" +
    "\055\044\076\036\100\034\152\007\001\002\000\014\030" +
    "\137\034\132\054\135\112\052\152\007\001\002\000\004" +
    "\055\155\001\002\000\022\005\147\011\151\015\152\035" +
    "\056\055\044\076\036\100\034\152\007\001\002\000\036" +
    "\005\uffe8\007\uffe8\011\uffe8\015\uffe8\035\uffe8\055\uffe8\076" +
    "\uffe8\100\uffe8\112\uffe8\133\uffe8\140\uffe8\150\uffe8\151\uffe8" +
    "\152\uffe8\001\002\000\004\140\156\001\002\000\036\005" +
    "\uffe4\007\uffe4\011\uffe4\015\uffe4\035\uffe4\055\uffe4\076\uffe4" +
    "\100\uffe4\112\uffe4\133\uffe4\140\uffe4\150\uffe4\151\uffe4\152" +
    "\uffe4\001\002\000\016\015\163\035\056\055\044\076\036" +
    "\100\034\152\007\001\002\000\036\005\uffe5\007\uffe5\011" +
    "\uffe5\015\uffe5\035\uffe5\055\uffe5\076\uffe5\100\uffe5\112\uffe5" +
    "\133\uffe5\140\uffe5\150\uffe5\151\uffe5\152\uffe5\001\002\000" +
    "\016\015\163\035\056\055\044\076\036\100\034\152\007" +
    "\001\002\000\016\015\163\035\056\055\044\076\036\100" +
    "\034\152\007\001\002\000\004\055\166\001\002\000\016" +
    "\015\163\035\056\055\044\076\036\100\034\152\007\001" +
    "\002\000\036\005\uffe3\007\uffe3\011\uffe3\015\uffe3\035\uffe3" +
    "\055\uffe3\076\uffe3\100\uffe3\112\uffe3\133\uffe3\140\uffe3\150" +
    "\uffe3\151\uffe3\152\uffe3\001\002\000\004\140\167\001\002" +
    "\000\036\005\uffe0\007\uffe0\011\uffe0\015\uffe0\035\uffe0\055" +
    "\uffe0\076\uffe0\100\uffe0\112\uffe0\133\uffe0\140\uffe0\150\uffe0" +
    "\151\uffe0\152\uffe0\001\002\000\036\005\uffe2\007\uffe2\011" +
    "\uffe2\015\uffe2\035\uffe2\055\uffe2\076\uffe2\100\uffe2\112\uffe2" +
    "\133\uffe2\140\uffe2\150\uffe2\151\uffe2\152\uffe2\001\002\000" +
    "\036\005\uffe1\007\uffe1\011\uffe1\015\uffe1\035\uffe1\055\uffe1" +
    "\076\uffe1\100\uffe1\112\uffe1\133\uffe1\140\uffe1\150\uffe1\151" +
    "\uffe1\152\uffe1\001\002\000\036\005\uffe9\007\uffe9\011\uffe9" +
    "\015\uffe9\035\uffe9\055\uffe9\076\uffe9\100\uffe9\112\uffe9\133" +
    "\uffe9\140\uffe9\150\uffe9\151\uffe9\152\uffe9\001\002\000\036" +
    "\005\uffe6\007\uffe6\011\uffe6\015\uffe6\035\uffe6\055\uffe6\076" +
    "\uffe6\100\uffe6\112\uffe6\133\uffe6\140\uffe6\150\uffe6\151\uffe6" +
    "\152\uffe6\001\002\000\036\005\uffe7\007\uffe7\011\uffe7\015" +
    "\uffe7\035\uffe7\055\uffe7\076\uffe7\100\uffe7\112\uffe7\133\uffe7" +
    "\140\uffe7\150\uffe7\151\uffe7\152\uffe7\001\002\000\014\030" +
    "\137\034\132\054\135\112\052\152\007\001\002\000\022" +
    "\005\uffcc\011\uffcc\015\uffcc\035\uffcc\055\uffcc\076\uffcc\100" +
    "\uffcc\152\uffcc\001\002\000\012\002\ufff8\040\ufff8\046\ufff8" +
    "\152\ufff8\001\002\000\012\002\ufff6\040\ufff6\046\ufff6\152" +
    "\ufff6\001\002\000\032\007\uffd9\015\uffd9\035\uffd9\055\uffd9" +
    "\076\uffd9\100\uffd9\112\uffd9\133\uffd9\140\uffd9\150\uffd9\151" +
    "\uffd9\152\uffd9\001\002\000\004\140\203\001\002\000\012" +
    "\002\ufff4\040\ufff4\046\ufff4\152\ufff4\001\002\000\036\005" +
    "\uffd7\007\uffd7\011\uffd7\015\uffd7\035\uffd7\055\uffd7\076\uffd7" +
    "\100\uffd7\112\uffd7\133\uffd7\140\uffd7\150\uffd7\151\uffd7\152" +
    "\uffd7\001\002\000\012\112\052\133\035\140\055\152\007" +
    "\001\002\000\036\005\uffdb\007\uffdb\011\uffdb\015\uffdb\035" +
    "\uffdb\055\uffdb\076\uffdb\100\uffdb\112\uffdb\133\uffdb\140\uffdb" +
    "\150\uffdb\151\uffdb\152\uffdb\001\002\000\006\112\052\152" +
    "\007\001\002\000\016\015\076\035\056\055\044\076\036" +
    "\100\034\152\007\001\002\000\016\015\uffc6\035\uffc6\055" +
    "\uffc6\076\uffc6\100\uffc6\152\uffc6\001\002\000\014\030\213" +
    "\034\207\076\211\112\052\152\007\001\002\000\006\112" +
    "\052\152\007\001\002\000\014\030\213\034\207\076\211" +
    "\112\052\152\007\001\002\000\016\015\uffc7\035\uffc7\055" +
    "\uffc7\076\uffc7\100\uffc7\152\uffc7\001\002\000\016\015\uffc9" +
    "\035\uffc9\055\uffc9\076\uffc9\100\uffc9\152\uffc9\001\002\000" +
    "\036\005\uffd5\007\uffd5\011\uffd5\015\uffd5\035\uffd5\055\uffd5" +
    "\076\uffd5\100\uffd5\112\uffd5\133\uffd5\140\uffd5\150\uffd5\151" +
    "\uffd5\152\uffd5\001\002\000\014\030\213\034\207\076\211" +
    "\112\052\152\007\001\002\000\016\015\uffc8\035\uffc8\055" +
    "\uffc8\076\uffc8\100\uffc8\152\uffc8\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffc\001\002\000\004\113\024\001" +
    "\002\000\006\120\230\140\226\001\002\000\010\040\uffeb" +
    "\046\uffeb\152\uffeb\001\002\000\010\040\uffed\046\uffed\152" +
    "\uffed\001\002\000\004\112\052\001\002\000\004\140\232" +
    "\001\002\000\010\040\uffec\046\uffec\152\uffec\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\007\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\012\007\016\010" +
    "\011\014\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\222\007\032\012\041\016\044\021\052\022" +
    "\047\023\045\024\042\027\053\032\040\001\001\000\012" +
    "\004\221\007\016\010\011\014\014\001\001\000\004\007" +
    "\021\001\001\000\002\001\001\000\006\007\016\010\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\026\007\016\010\011\014\030\001\001\000\002\001" +
    "\001\000\026\006\050\007\032\012\041\016\044\021\052" +
    "\022\047\023\045\024\042\027\053\032\040\001\001\000" +
    "\012\005\031\007\016\010\011\014\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\105\012\041\026" +
    "\211\027\133\031\207\001\001\000\010\007\105\012\041" +
    "\027\204\001\001\000\014\007\072\016\074\021\076\024" +
    "\073\025\203\001\001\000\004\007\201\001\001\000\014" +
    "\007\105\012\041\022\047\023\200\027\053\001\001\000" +
    "\026\006\177\007\032\012\041\016\044\021\052\022\047" +
    "\023\045\024\042\027\053\032\040\001\001\000\002\001" +
    "\001\000\026\006\176\007\032\012\041\016\044\021\052" +
    "\022\047\023\045\024\042\027\053\032\040\001\001\000" +
    "\014\007\105\012\041\026\135\027\133\030\132\001\001" +
    "\000\026\006\130\007\032\012\041\016\044\021\052\022" +
    "\047\023\045\024\042\027\053\032\040\001\001\000\026" +
    "\006\127\007\032\012\041\016\044\021\052\022\047\023" +
    "\045\024\042\027\053\032\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\117\007\016\010\011\014" +
    "\014\001\001\000\002\001\001\000\026\006\116\007\032" +
    "\012\041\016\044\021\052\022\047\023\045\024\042\027" +
    "\053\032\040\001\001\000\012\007\105\012\041\022\115" +
    "\027\053\001\001\000\002\001\001\000\004\012\064\001" +
    "\001\000\002\001\001\000\004\033\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\072\016\074\021" +
    "\076\024\073\025\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\072\016\074\021\076\024\073\025" +
    "\103\001\001\000\014\007\072\016\074\021\076\024\073" +
    "\025\102\001\001\000\002\001\001\000\014\007\072\016" +
    "\074\021\076\024\073\025\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\105\012\041\022\110\027\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\105\012\041\026" +
    "\174\027\133\001\001\000\014\007\072\016\147\017\144" +
    "\021\152\024\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\105\012\041\026\135\027\133\030\141" +
    "\001\001\000\012\007\105\012\041\026\137\027\133\001" +
    "\001\000\014\007\105\012\041\026\135\027\133\030\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\105\012\041\027\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\072\016\147\017\173\021\152\024" +
    "\145\001\001\000\014\007\072\016\161\020\172\021\163" +
    "\024\160\001\001\000\014\007\072\016\147\017\171\021" +
    "\152\024\145\001\001\000\014\007\105\012\041\026\135" +
    "\027\133\030\156\001\001\000\002\001\001\000\014\007" +
    "\072\016\147\017\153\021\152\024\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\072\016\161\020\157\021\163\024\160\001\001\000\002" +
    "\001\001\000\014\007\072\016\161\020\170\021\163\024" +
    "\160\001\001\000\014\007\072\016\161\020\167\021\163" +
    "\024\160\001\001\000\002\001\001\000\014\007\072\016" +
    "\161\020\164\021\163\024\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\105\012\041\026\135\027\133\030" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\105\012\041\022\205" +
    "\027\053\001\001\000\002\001\001\000\012\007\105\012" +
    "\041\026\217\027\133\001\001\000\014\007\072\016\074" +
    "\021\076\024\073\025\216\001\001\000\002\001\001\000" +
    "\014\007\105\012\041\026\211\027\133\031\215\001\001" +
    "\000\012\007\105\012\041\026\213\027\133\001\001\000" +
    "\014\007\105\012\041\026\211\027\133\031\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\105\012\041\026\211\027\133\031\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\224\001\001\000\004\015\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  // Metodo al se llama automaticamente ante algun error sintactico
  public void syntax_error (Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
  }

  // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
  public void unrecover_syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= C G 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= FUNCTION X RETURN Z IS H 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= BEGIN I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // H ::= C H 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // H ::= BEGIN I G 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= L I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= M I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= E I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= P I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= E3 I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= END X PC 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // X ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = i; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // X2 ::= X COMA X2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // X2 ::= X 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Z ::= DATATYPES 
            {
              String RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = d; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N1 ::= NUM DOUBD NUM 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= X2 DOS Z D 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // D ::= ASSIGN N PC 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // D ::= PC 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L ::= IF L5 L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L2 ::= L L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L2 ::= E L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L2 ::= M L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L2 ::= ELSE L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L2 ::= ELSIF L5 L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L2 ::= END IF PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L4 ::= E L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L4 ::= L L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L4 ::= M L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L4 ::= END IF PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= X ASSIGN E2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= X ASSIGN TRUE PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= X ASSIGN FALSE PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E2 ::= L3 E2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E2 ::= OP L3 E2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E2 ::= PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E3 ::= RETURN E3 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E3 ::= E2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // M ::= LOOP M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // M ::= FOR N IN N1 LOOP M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // M ::= WHILE L6 M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // M1 ::= M M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // M1 ::= E M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // M1 ::= L M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // M1 ::= END LOOP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L1 ::= L3 OPREL L3 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L3 ::= N 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L3 ::= X 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L5 ::= L1 L5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L5 ::= AND L1 L5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L5 ::= OR L1 L5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L5 ::= THEN 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L6 ::= L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L6 ::= AND L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L6 ::= OR L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L6 ::= LOOP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // P ::= GET LP P1 RP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // P ::= PUT LP P2 RP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // P1 ::= ID 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // P2 ::= ID 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // P2 ::= EXP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // P2 ::= NUM 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
