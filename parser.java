
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\004\000\002\004\011\000\002\004\002" +
    "\000\002\004\004\000\002\042\007\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\002\000\002\006" +
    "\004\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\012\003\000\002\013\005\000" +
    "\002\014\006\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\010\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\002\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\021\006\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\034\004" +
    "\000\002\035\005\000\002\036\005\000\002\036\004\000" +
    "\002\036\003\000\002\023\006\000\002\023\006\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\005\000\002\024\003\000\002\025\004\000\002\025\004" +
    "\000\002\025\002\000\002\026\004\000\002\027\007\000" +
    "\002\027\013\000\002\027\011\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\030" +
    "\002\000\002\031\007\000\002\031\007\000\002\031\006" +
    "\000\002\032\003\000\002\032\003\000\002\033\005\000" +
    "\002\033\007\000\002\033\007\000\002\037\007\000\002" +
    "\037\007\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\056\005\001\002\000\004\002\272\001" +
    "\002\000\004\152\007\001\002\000\004\002\000\001\002" +
    "\000\062\003\ufff1\007\ufff1\015\ufff1\030\ufff1\034\ufff1\035" +
    "\ufff1\054\ufff1\055\ufff1\061\ufff1\065\ufff1\076\ufff1\100\ufff1" +
    "\104\ufff1\120\ufff1\131\ufff1\132\ufff1\133\ufff1\134\ufff1\136" +
    "\ufff1\137\ufff1\140\ufff1\150\ufff1\151\ufff1\152\ufff1\001\002" +
    "\000\004\065\011\001\002\000\012\003\012\040\016\046" +
    "\ufffc\152\007\001\002\000\012\003\012\040\016\046\ufffc" +
    "\152\007\001\002\000\004\137\256\001\002\000\004\046" +
    "\030\001\002\000\012\003\012\040\016\046\ufffc\152\007" +
    "\001\002\000\004\152\007\001\002\000\006\134\020\137" +
    "\uffef\001\002\000\004\152\007\001\002\000\004\137\ufff0" +
    "\001\002\000\004\007\023\001\002\000\004\113\025\001" +
    "\002\000\004\065\026\001\002\000\010\065\uffee\120\uffee" +
    "\140\uffee\001\002\000\012\003\012\040\016\046\ufffc\152" +
    "\007\001\002\000\004\046\030\001\002\000\026\003\042" +
    "\007\050\015\ufff3\035\033\055\040\076\036\100\032\150" +
    "\046\151\035\152\007\001\002\000\004\046\ufffd\001\002" +
    "\000\010\112\053\131\054\152\007\001\002\000\004\152" +
    "\007\001\002\000\006\120\204\131\062\001\002\000\004" +
    "\131\215\001\002\000\022\015\uffbe\035\033\055\040\076" +
    "\036\100\032\150\046\151\035\152\007\001\002\000\026" +
    "\003\042\007\050\015\ufff3\035\033\055\040\076\036\100" +
    "\032\150\046\151\035\152\007\001\002\000\010\112\053" +
    "\131\054\152\007\001\002\000\026\003\042\007\050\015" +
    "\ufff3\035\033\055\040\076\036\100\032\150\046\151\035" +
    "\152\007\001\002\000\026\003\042\007\050\015\ufff3\035" +
    "\033\055\040\076\036\100\032\150\046\151\035\152\007" +
    "\001\002\000\026\003\042\007\050\015\ufff3\035\033\055" +
    "\040\076\036\100\032\150\046\151\035\152\007\001\002" +
    "\000\026\003\042\007\050\015\ufff3\035\033\055\040\076" +
    "\036\100\032\150\046\151\035\152\007\001\002\000\026" +
    "\003\042\007\050\015\ufff3\035\033\055\040\076\036\100" +
    "\032\150\046\151\035\152\007\001\002\000\004\131\114" +
    "\001\002\000\004\015\111\001\002\000\010\112\053\131" +
    "\054\152\007\001\002\000\026\003\042\007\050\015\ufff3" +
    "\035\033\055\040\076\036\100\032\150\046\151\035\152" +
    "\007\001\002\000\004\015\ufff7\001\002\000\050\003\uffed" +
    "\007\uffed\015\uffed\030\uffed\034\uffed\035\uffed\054\uffed\055" +
    "\uffed\076\uffed\100\uffed\104\uffed\132\uffed\133\uffed\134\uffed" +
    "\136\uffed\140\uffed\150\uffed\151\uffed\152\uffed\001\002\000" +
    "\010\112\053\131\054\152\007\001\002\000\046\003\uffce" +
    "\007\uffce\015\uffce\030\uffce\034\uffce\035\uffce\054\uffce\055" +
    "\uffce\076\uffce\100\uffce\104\076\132\uffce\133\075\136\uffce" +
    "\140\uffce\150\uffce\151\uffce\152\uffce\001\002\000\026\003" +
    "\uffc6\007\uffc6\015\uffc6\035\uffc6\055\uffc6\076\uffc6\100\uffc6" +
    "\150\uffc6\151\uffc6\152\uffc6\001\002\000\046\003\uffcc\007" +
    "\uffcc\015\uffcc\030\uffcc\034\uffcc\035\uffcc\054\uffcc\055\uffcc" +
    "\076\uffcc\100\uffcc\104\uffcc\132\uffcc\133\uffcc\136\uffcc\140" +
    "\uffcc\150\uffcc\151\uffcc\152\uffcc\001\002\000\046\003\uffcd" +
    "\007\uffcd\015\uffcd\030\uffcd\034\uffcd\035\uffcd\054\uffcd\055" +
    "\uffcd\076\uffcd\100\uffcd\104\uffcd\132\uffcd\133\uffcd\136\uffcd" +
    "\140\uffcd\150\uffcd\151\uffcd\152\uffcd\001\002\000\050\003" +
    "\uffca\007\uffca\015\uffca\030\uffca\034\uffca\035\uffca\054\uffca" +
    "\055\uffca\076\uffca\100\uffca\104\uffca\131\062\132\uffca\133" +
    "\uffca\136\uffca\140\uffca\150\uffca\151\uffca\152\uffca\001\002" +
    "\000\010\112\053\132\066\152\007\001\002\000\050\003" +
    "\uffd5\005\uffd5\007\uffd5\015\uffd5\030\uffd5\034\uffd5\035\uffd5" +
    "\054\uffd5\055\uffd5\076\uffd5\100\uffd5\104\uffd5\132\uffd5\133" +
    "\uffd5\136\uffd5\140\uffd5\150\uffd5\151\uffd5\152\uffd5\001\002" +
    "\000\004\140\074\001\002\000\006\132\072\134\071\001" +
    "\002\000\004\140\uffd1\001\002\000\006\132\uffba\134\uffba" +
    "\001\002\000\006\132\uffb9\134\uffb9\001\002\000\010\112" +
    "\053\132\066\152\007\001\002\000\004\140\uffd2\001\002" +
    "\000\004\140\uffd3\001\002\000\050\003\uffd4\005\uffd4\007" +
    "\uffd4\015\uffd4\030\uffd4\034\uffd4\035\uffd4\054\uffd4\055\uffd4" +
    "\076\uffd4\100\uffd4\104\uffd4\132\uffd4\133\uffd4\136\uffd4\140" +
    "\uffd4\150\uffd4\151\uffd4\152\uffd4\001\002\000\010\112\053" +
    "\131\054\152\007\001\002\000\010\112\053\131\054\152" +
    "\007\001\002\000\046\003\uffc7\007\uffc7\015\uffc7\030\uffc7" +
    "\034\uffc7\035\uffc7\054\uffc7\055\uffc7\076\uffc7\100\uffc7\104" +
    "\101\132\uffc7\133\100\136\uffc7\140\uffc7\150\uffc7\151\uffc7" +
    "\152\uffc7\001\002\000\010\112\053\131\054\152\007\001" +
    "\002\000\010\112\053\131\054\152\007\001\002\000\042" +
    "\003\uffcf\007\uffcf\015\uffcf\030\uffcf\034\uffcf\035\uffcf\054" +
    "\uffcf\055\uffcf\076\uffcf\100\uffcf\132\uffcf\136\uffcf\140\uffcf" +
    "\150\uffcf\151\uffcf\152\uffcf\001\002\000\042\003\uffc8\007" +
    "\uffc8\015\uffc8\030\uffc8\034\uffc8\035\uffc8\054\uffc8\055\uffc8" +
    "\076\uffc8\100\uffc8\132\uffc8\136\uffc8\140\uffc8\150\uffc8\151" +
    "\uffc8\152\uffc8\001\002\000\042\003\uffc9\007\uffc9\015\uffc9" +
    "\030\uffc9\034\uffc9\035\uffc9\054\uffc9\055\uffc9\076\uffc9\100" +
    "\uffc9\132\uffc9\136\uffc9\140\uffc9\150\uffc9\151\uffc9\152\uffc9" +
    "\001\002\000\046\003\uffc7\007\uffc7\015\uffc7\030\uffc7\034" +
    "\uffc7\035\uffc7\054\uffc7\055\uffc7\076\uffc7\100\uffc7\104\101" +
    "\132\uffc7\133\100\136\uffc7\140\uffc7\150\uffc7\151\uffc7\152" +
    "\uffc7\001\002\000\042\003\uffd0\007\uffd0\015\uffd0\030\uffd0" +
    "\034\uffd0\035\uffd0\054\uffd0\055\uffd0\076\uffd0\100\uffd0\132" +
    "\uffd0\136\uffd0\140\uffd0\150\uffd0\151\uffd0\152\uffd0\001\002" +
    "\000\004\132\110\001\002\000\046\003\uffcb\007\uffcb\015" +
    "\uffcb\030\uffcb\034\uffcb\035\uffcb\054\uffcb\055\uffcb\076\uffcb" +
    "\100\uffcb\104\uffcb\132\uffcb\133\uffcb\136\uffcb\140\uffcb\150" +
    "\uffcb\151\uffcb\152\uffcb\001\002\000\004\152\007\001\002" +
    "\000\004\140\113\001\002\000\006\002\ufffa\046\ufffa\001" +
    "\002\000\004\152\115\001\002\000\004\132\uffb3\001\002" +
    "\000\004\132\117\001\002\000\004\140\120\001\002\000" +
    "\030\003\uffb5\005\uffb5\007\uffb5\015\uffb5\035\uffb5\055\uffb5" +
    "\076\uffb5\100\uffb5\150\uffb5\151\uffb5\152\uffb5\001\002\000" +
    "\004\015\ufff5\001\002\000\004\015\ufff4\001\002\000\004" +
    "\015\ufff9\001\002\000\004\015\ufff2\001\002\000\004\015" +
    "\ufff8\001\002\000\024\005\142\015\uffdf\035\033\055\040" +
    "\076\036\100\032\150\046\151\035\152\007\001\002\000" +
    "\004\136\130\001\002\000\010\112\053\131\054\152\007" +
    "\001\002\000\010\030\134\034\132\054\133\001\002\000" +
    "\010\112\053\131\054\152\007\001\002\000\024\005\uffbb" +
    "\015\uffbb\035\uffbb\055\uffbb\076\uffbb\100\uffbb\150\uffbb\151" +
    "\uffbb\152\uffbb\001\002\000\010\112\053\131\054\152\007" +
    "\001\002\000\024\005\uffbc\015\uffbc\035\uffbc\055\uffbc\076" +
    "\uffbc\100\uffbc\150\uffbc\151\uffbc\152\uffbc\001\002\000\024" +
    "\005\uffbd\015\uffbd\035\uffbd\055\uffbd\076\uffbd\100\uffbd\150" +
    "\uffbd\151\uffbd\152\uffbd\001\002\000\004\015\166\001\002" +
    "\000\024\005\142\015\uffdf\035\033\055\040\076\036\100" +
    "\032\150\046\151\035\152\007\001\002\000\024\005\142" +
    "\015\uffdf\035\033\055\040\076\036\100\032\150\046\151" +
    "\035\152\007\001\002\000\020\035\033\055\040\076\036" +
    "\100\032\150\046\151\035\152\007\001\002\000\024\005" +
    "\142\015\uffdf\035\033\055\040\076\036\100\032\150\046" +
    "\151\035\152\007\001\002\000\024\005\142\015\uffdf\035" +
    "\033\055\040\076\036\100\032\150\046\151\035\152\007" +
    "\001\002\000\024\005\142\015\uffdf\035\033\055\040\076" +
    "\036\100\032\150\046\151\035\152\007\001\002\000\004" +
    "\015\uffe4\001\002\000\004\015\uffe1\001\002\000\004\015" +
    "\uffe5\001\002\000\004\015\uffe0\001\002\000\020\035\033" +
    "\055\040\076\036\100\032\150\046\151\035\152\007\001" +
    "\002\000\020\035\033\055\040\076\036\100\032\150\046" +
    "\151\035\152\007\001\002\000\020\035\033\055\040\076" +
    "\036\100\032\150\046\151\035\152\007\001\002\000\020" +
    "\035\033\055\040\076\036\100\032\150\046\151\035\152" +
    "\007\001\002\000\020\035\033\055\040\076\036\100\032" +
    "\150\046\151\035\152\007\001\002\000\004\015\uffde\001" +
    "\002\000\004\015\uffda\001\002\000\004\015\uffdd\001\002" +
    "\000\004\015\uffdc\001\002\000\004\015\uffdb\001\002\000" +
    "\004\015\uffe3\001\002\000\004\015\uffe2\001\002\000\004" +
    "\055\167\001\002\000\004\140\170\001\002\000\030\003" +
    "\uffe6\005\uffe6\007\uffe6\015\uffe6\035\uffe6\055\uffe6\076\uffe6" +
    "\100\uffe6\150\uffe6\151\uffe6\152\uffe6\001\002\000\004\015" +
    "\ufff6\001\002\000\004\015\212\001\002\000\004\120\204" +
    "\001\002\000\022\015\uffbe\035\033\055\040\076\036\100" +
    "\032\150\046\151\035\152\007\001\002\000\022\015\uffbe" +
    "\035\033\055\040\076\036\100\032\150\046\151\035\152" +
    "\007\001\002\000\022\015\uffbe\035\033\055\040\076\036" +
    "\100\032\150\046\151\035\152\007\001\002\000\022\015" +
    "\uffbe\035\033\055\040\076\036\100\032\150\046\151\035" +
    "\152\007\001\002\000\004\015\uffc1\001\002\000\004\015" +
    "\uffc0\001\002\000\004\015\uffc2\001\002\000\004\015\uffbf" +
    "\001\002\000\014\110\205\111\206\112\053\131\054\152" +
    "\007\001\002\000\004\140\uffd8\001\002\000\004\140\uffd7" +
    "\001\002\000\004\140\uffd6\001\002\000\004\140\211\001" +
    "\002\000\030\003\uffd9\005\uffd9\007\uffd9\015\uffd9\035\uffd9" +
    "\055\uffd9\076\uffd9\100\uffd9\150\uffd9\151\uffd9\152\uffd9\001" +
    "\002\000\004\076\213\001\002\000\004\140\214\001\002" +
    "\000\030\003\uffc5\005\uffc5\007\uffc5\015\uffc5\035\uffc5\055" +
    "\uffc5\076\uffc5\100\uffc5\150\uffc5\151\uffc5\152\uffc5\001\002" +
    "\000\010\112\216\146\220\152\217\001\002\000\004\132" +
    "\uffb0\001\002\000\004\132\uffb2\001\002\000\004\132\uffb1" +
    "\001\002\000\004\132\222\001\002\000\004\140\223\001" +
    "\002\000\030\003\uffb4\005\uffb4\007\uffb4\015\uffb4\035\uffb4" +
    "\055\uffb4\076\uffb4\100\uffb4\150\uffb4\151\uffb4\152\uffb4\001" +
    "\002\000\004\061\225\001\002\000\004\112\226\001\002" +
    "\000\004\116\235\001\002\000\004\076\230\001\002\000" +
    "\022\015\uffbe\035\033\055\040\076\036\100\032\150\046" +
    "\151\035\152\007\001\002\000\004\015\232\001\002\000" +
    "\004\076\233\001\002\000\004\140\234\001\002\000\030" +
    "\003\uffc4\005\uffc4\007\uffc4\015\uffc4\035\uffc4\055\uffc4\076" +
    "\uffc4\100\uffc4\150\uffc4\151\uffc4\152\uffc4\001\002\000\004" +
    "\112\236\001\002\000\004\076\uffec\001\002\000\004\076" +
    "\247\001\002\000\004\136\241\001\002\000\010\112\053" +
    "\131\054\152\007\001\002\000\010\030\244\034\243\076" +
    "\uffb8\001\002\000\010\112\053\131\054\152\007\001\002" +
    "\000\010\112\053\131\054\152\007\001\002\000\004\076" +
    "\uffb6\001\002\000\004\076\uffb7\001\002\000\022\015\uffbe" +
    "\035\033\055\040\076\036\100\032\150\046\151\035\152" +
    "\007\001\002\000\004\015\251\001\002\000\004\076\252" +
    "\001\002\000\004\140\253\001\002\000\030\003\uffc3\005" +
    "\uffc3\007\uffc3\015\uffc3\035\uffc3\055\uffc3\076\uffc3\100\uffc3" +
    "\150\uffc3\151\uffc3\152\uffc3\001\002\000\004\046\ufffe\001" +
    "\002\000\004\002\uffff\001\002\000\004\113\025\001\002" +
    "\000\006\120\262\140\260\001\002\000\012\003\uffe7\040" +
    "\uffe7\046\uffe7\152\uffe7\001\002\000\012\003\uffeb\040\uffeb" +
    "\046\uffeb\152\uffeb\001\002\000\010\110\263\111\264\112" +
    "\053\001\002\000\004\140\270\001\002\000\004\140\267" +
    "\001\002\000\004\140\266\001\002\000\012\003\uffea\040" +
    "\uffea\046\uffea\152\uffea\001\002\000\012\003\uffe8\040\uffe8" +
    "\046\uffe8\152\uffe8\001\002\000\012\003\uffe9\040\uffe9\046" +
    "\uffe9\152\uffe9\001\002\000\004\046\ufffb\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\007\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\013\007\016\010" +
    "\012\014\014\001\001\000\012\004\270\007\016\010\012" +
    "\014\014\001\001\000\002\001\001\000\004\042\254\001" +
    "\001\000\012\004\253\007\016\010\012\014\014\001\001" +
    "\000\004\007\021\001\001\000\002\001\001\000\006\007" +
    "\016\010\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\026\007\016\010\012\014\014\001\001" +
    "\000\004\042\030\001\001\000\022\006\046\007\033\016" +
    "\042\021\050\026\044\027\040\034\043\037\036\001\001" +
    "\000\002\001\001\000\016\007\060\012\057\023\237\024" +
    "\054\033\236\034\056\001\001\000\004\007\223\001\001" +
    "\000\004\035\062\001\001\000\002\001\001\000\016\007" +
    "\172\016\175\021\176\027\174\030\171\037\173\001\001" +
    "\000\022\006\170\007\033\016\042\021\050\026\044\027" +
    "\040\034\043\037\036\001\001\000\016\007\060\012\057" +
    "\023\126\024\054\031\125\034\056\001\001\000\022\006" +
    "\124\007\033\016\042\021\050\026\044\027\040\034\043" +
    "\037\036\001\001\000\022\006\123\007\033\016\042\021" +
    "\050\026\044\027\040\034\043\037\036\001\001\000\022" +
    "\006\122\007\033\016\042\021\050\026\044\027\040\034" +
    "\043\037\036\001\001\000\022\006\121\007\033\016\042" +
    "\021\050\026\044\027\040\034\043\037\036\001\001\000" +
    "\022\006\120\007\033\016\042\021\050\026\044\027\040" +
    "\034\043\037\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\060\012\057\023\055\024\054\034\056" +
    "\001\001\000\022\006\051\007\033\016\042\021\050\026" +
    "\044\027\040\034\043\037\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\060\012\057\023\106\024" +
    "\054\034\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\062\001" +
    "\001\000\012\007\067\012\066\032\064\036\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\067\012\066\032\064\036\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\060" +
    "\012\057\024\104\034\056\001\001\000\012\007\060\012" +
    "\057\024\076\034\056\001\001\000\004\025\101\001\001" +
    "\000\012\007\060\012\057\024\103\034\056\001\001\000" +
    "\012\007\060\012\057\024\102\034\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\033\016\142\017" +
    "\136\021\144\027\140\034\143\037\137\001\001\000\002" +
    "\001\001\000\014\007\060\012\057\023\130\024\054\034" +
    "\056\001\001\000\002\001\001\000\016\007\060\012\057" +
    "\023\126\024\054\031\135\034\056\001\001\000\002\001" +
    "\001\000\016\007\060\012\057\023\126\024\054\031\134" +
    "\034\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\033\016\142\017\164\021\144" +
    "\027\140\034\143\037\137\001\001\000\020\007\033\016" +
    "\142\017\163\021\144\027\140\034\143\037\137\001\001" +
    "\000\020\007\033\016\153\020\150\021\155\027\152\034" +
    "\154\037\151\001\001\000\020\007\033\016\142\017\147" +
    "\021\144\027\140\034\143\037\137\001\001\000\020\007" +
    "\033\016\142\017\146\021\144\027\140\034\143\037\137" +
    "\001\001\000\020\007\033\016\142\017\145\021\144\027" +
    "\140\034\143\037\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\033\016\153\020\162\021\155\027\152\034\154\037\151" +
    "\001\001\000\020\007\033\016\153\020\161\021\155\027" +
    "\152\034\154\037\151\001\001\000\020\007\033\016\153" +
    "\020\160\021\155\027\152\034\154\037\151\001\001\000" +
    "\020\007\033\016\153\020\157\021\155\027\152\034\154" +
    "\037\151\001\001\000\020\007\033\016\153\020\156\021" +
    "\155\027\152\034\154\037\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\172" +
    "\016\175\021\176\027\174\030\202\037\173\001\001\000" +
    "\016\007\172\016\175\021\176\027\174\030\201\037\173" +
    "\001\001\000\016\007\172\016\175\021\176\027\174\030" +
    "\200\037\173\001\001\000\016\007\172\016\175\021\176" +
    "\027\174\030\177\037\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\060\012\057\022\207\023\206\024\054\034\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\172\016\175\021\176\027\174" +
    "\030\230\037\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\060\012\057\023\241\024\054\034\056\001\001" +
    "\000\002\001\001\000\016\007\060\012\057\023\237\024" +
    "\054\033\245\034\056\001\001\000\016\007\060\012\057" +
    "\023\237\024\054\033\244\034\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\172\016\175\021\176" +
    "\027\174\030\247\037\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\256\001\001\000" +
    "\004\015\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static LinkedList<String> msgErrores = new LinkedList<String>();

  public void report_error (String message, Object info) {
    /* if (s != null) {
      Symbol s2 = (Symbol) s;
      int fila = s2.right;
      int columna = s2.left;
      String currentToken = "Hola";
      System.out.println(message + " fila: " + fila + " columna: " + columna +
        " token inesperado " + currentToken);
    } */

    if (message.equalsIgnoreCase("Syntax error")) {
      message = "Error Sintactico";
    } else if (message.equalsIgnoreCase("Couldn't repair and continue parse")) {
      message = "Error Fatal";
    }
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.right >= 0) {
        message += ": en linea " + (s.right + 1);
        if (s.left >= 0) {
          message += ", columna " + (s.left + 1);
        }
        if(getScanner() instanceof Ada95) {
          message += "; no se esperaba '" + ((Ada95)getScanner()).getCurrentText()+"'";
        }
      }
    }
    msgErrores.add(message);
  }

  public void report_fatal_error (String message, Object info) {
    /* Symbol s2 = (Symbol) s;
    int fila = s2.right;
    int columna = s2.left;
    String currentToken = s2.value.toString();
    System.out.println(message + " fila: " + fila + " columna: " + columna +
      " token inesperado " + currentToken); */
    /* System.out.println("Error Sintactico"); */
    report_error(message, info);
  }

  public Nodo raiz;
  // Metodo al se llama automaticamente ante algun error sintactico
  /* public void syntax_error (Symbol s) {
    int fila = s.right;
    int columna = s.left;
    String currentToken = s.value.toString();
    System.out.println("Error Sintactico " + " fila: " + fila + " columna: " + columna +
      " token inesperado " + currentToken);
    report_error("Error Sintactico", s);
  } */

  // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
  /* public void unrecover_syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    System.out.println("!!! Error sintactico recuperado !!!!");
    System.out.println("Lexema " + lexema);
    System.out.println("Fila " + fila);
    System.out.println("Columna " + columna);
    report_fatal_error("Error fatal en la Sintaxis", s);
  } */



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*A.root = F*/
                                          raiz = new Nodo();
                                          raiz.setTag("Nodo de inicio");
                                          raiz.addHijo((Nodo)hijo);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G CUERPO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*procedure(G)*/
                                          Nodo nod = new Nodo();
                                          nod.setTag("Procedure");
                                          nod.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            if(((Nodo)hijo2).getInfo().equals("tem")){
                                            for(int i = 0; i < ((Nodo)hijo2).hijos.size();i++){
                                              nod.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }else{
                                            nod.addHijo((Nodo)hijo2);
                                          }
                                          }

                                          nod.addHijo((Nodo)hijo3);
                                          RESULT = nod;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= C G 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = nodo(C, G)*/
                                          Nodo tem = new Nodo();
                                          tem.setTag("tem");
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 == null){

                                          }else{
                                            if(((Nodo)hijo2).getInfo().equals("tem")){

                                            for(int i = 0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }else{
                                            tem.addHijo((Nodo)hijo2);
                                          }
                                          }

                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= FUNCTION X RETURN Z IS G CUERPO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo4 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = function(X,return(Z),H)*/
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("Function");
                                                      tem.addHijo((Nodo)hijo1);
                                                      Nodo ret = new Nodo();
                                                      ret.setTag("Return");
                                                      ret.addHijo((Nodo)hijo2);
                                                      tem.addHijo(ret);
                                                      if(hijo3 != null){
                                                        if(((Nodo)hijo3).getInfo().equals("tem")){
                                                          for(int i = 0; i < ((Nodo)hijo3).hijos.size();i++){
                                                            tem.addHijo(((Nodo)hijo3).hijos.get(i));
                                                          }
                                                        }else{
                                                        tem.addHijo((Nodo)hijo3);
                                                      }
                                                      }

                                                      tem.addHijo((Nodo)hijo4);
                                                      //tem.addHijo((Nodo)hijo3);
                                                      RESULT = tem;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= error G 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= BEGIN I END X PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = body(I)*/

                                           // System.out.println("++++++++++++++++++++++++++");
                                          Nodo tem = new Nodo();
                                          tem.setTag("Cuerpo");
                                          //tem.addHijo((Nodo)hijo1);
                                          if(hijo1 != null){
                                            for(int i=0; i < ((Nodo)hijo1).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo1).hijos.get(i));
                                            }
                                          }

                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= L I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= M I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= E I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= P I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= E3 I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= E4 I 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo((Nodo)hijo1);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                            }
                                          }
                                          RESULT = tem;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I ::= error I 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // X ::= ID 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* Result = ID(att:i) */
                          RESULT = new Nodo("ID",i);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // X2 ::= X COMA X2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = declaracion (att: arreglo = X + X2.arreglo)*/
                                    RESULT = new Nodo("Declaracion","arreglo");
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // X2 ::= X 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* result = X*/
                              RESULT = (Nodo)hijo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Z ::= DATATYPES 
            {
              Nodo RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = dt; */
                          RESULT = new Nodo("DATA TYPE",dt);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N ::= NUM 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ RESULT = new Nodo("NUM",n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N1 ::= NUM DOUBD NUM 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = range(att: num1, num2)*/ RESULT = new Nodo("Rango",n1 + t + n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= X2 DOS Z D 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Nodo)hijo2).addHijo((Nodo)hijo1);
                                          if(((Nodo)hijo3).getInfo().equals("nulo")){
                                          }else{
                                            ((Nodo)hijo2).addHijo((Nodo)hijo3);
                                          }
                                          RESULT = (Nodo)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // D ::= ASSIGN N PC 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag("ASSIGN");
                          tem.addHijo((Nodo)n);
                          RESULT = tem;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D ::= ASSIGN TRUE PC 
            {
              Nodo RESULT =null;
		/*result = true*/
                          RESULT = new Nodo("ASSIGN","TRUE");

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // D ::= ASSIGN FALSE PC 
            {
              Nodo RESULT =null;
		/*result = false*/
                          RESULT = new Nodo("ASSIGN","TRUE");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // D ::= PC 
            {
              Nodo RESULT =null;
		/*result = null*/
                          RESULT = new Nodo("nulo","-1");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L ::= IF L1 L2 END IF PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*result = if(L1,body(L2))*/
                                            Nodo tem = new Nodo();
                                            tem.setTag("IF");
                                            tem.addHijo((Nodo)hijo1);
                                            Nodo tem2 = new Nodo();
                                            tem2.setTag("Cuerpo");
                                            if(hijo2 != null){
                                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                              tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                              }
                                            }
                                            tem.addHijo(tem2);
                                            RESULT = tem;
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L2 ::= L L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(L+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L2 ::= E L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(E+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L2 ::= M L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(M+l2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L2 ::= P L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(P+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L2 ::= E4 L2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo tem = new Nodo();
                            tem.addHijo((Nodo)hijo1);
                            if(hijo2 != null){
                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                tem.addHijo(((Nodo)hijo2).hijos.get(i));
                              }
                            }
                            RESULT = tem;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L2 ::= ELSE L4 
            {
              Nodo RESULT =null;
		/**/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L2 ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L4 ::= E L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L4 ::= L L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L4 ::= M L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L4 ::= P L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L4 ::= E4 L4 
            {
              Nodo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= X ASSIGN E2 PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = asign(X, E2)*/
                                                Nodo tem = new Nodo("Asignacion","::=");
                                                tem.addHijo((Nodo)hijo1);
                                                tem.addHijo((Nodo)hijo2);
                                                RESULT = tem;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E2 ::= TRUE 
            {
              Nodo RESULT =null;
		 /*result = true*/
                      RESULT = new Nodo("TRUE","1");
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E2 ::= FALSE 
            {
              Nodo RESULT =null;
		 /*result = false*/RESULT = new Nodo("FALSE","0"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E2 ::= E5 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* */RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E4 ::= X PA 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = ejec(X, PA)*/
                                  Nodo tem = new Nodo();
                                  tem.setTag("Ejecucion");
                                  tem.addHijo((Nodo)hijo1);
                                  tem.addHijo((Nodo)hijo2);
                                  RESULT = tem;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PA ::= LP PA2 PC 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = pa2*/
                                        RESULT = hijo != null ? (Nodo)hijo : null;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PA2 ::= L3 COMA PA2 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(L3+PA2)*/
                                    Nodo tem = new Nodo("Argumentos","arg");
                                    tem.addHijo((Nodo)hijo1);
                                    if(hijo2 != null){
                                      for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                        tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                      }
                                    }
                                    RESULT = (Nodo)tem;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PA2 ::= L3 RP 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*rsult = arreglo(L3)*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PA2 ::= RP 
            {
              Nodo RESULT =null;
		 /*result = null*/
                                    RESULT = null;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E5 ::= E6 OP E6 E7 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E7.op(op(E6, E6),E7.E6) */
                                            Nodo tem = new Nodo("OP",t);
                                            tem.addHijo((Nodo)hijo1);
                                            tem.addHijo((Nodo)hijo2);
                                            if(hijo3 == null){
                                              RESULT = tem;
                                            }else{
                                              ((Nodo)hijo3).addHijo((Nodo)tem);
                                              RESULT = (Nodo)hijo3;
                                            }

                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E5 ::= E6 MOD E6 E7 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            Nodo tem = new Nodo("MOD",t);
                                            tem.addHijo((Nodo)hijo1);
                                            tem.addHijo((Nodo)hijo2);
                                            if(hijo3 == null){
                                              RESULT = tem;
                                            }else{
                                              ((Nodo)hijo3).addHijo((Nodo)tem);
                                              RESULT = (Nodo)hijo3;
                                            }
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E5 ::= E6 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Nodo)hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E6 ::= N 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l3*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E6 ::= E4 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E4*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E6 ::= LP E5 RP 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = E5*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E6 ::= X 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E5*/ RESULT = (Nodo)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E7 ::= OP E6 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(op,E6)*/ 
                                  Nodo tem = new Nodo("OP",t);
                                  tem.addHijo((Nodo)hijo);
                                  RESULT = tem;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E7 ::= MOD E6 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(mod,E6)*/ 
                                  Nodo tem = new Nodo("MOD",t);
                                  tem.addHijo((Nodo)hijo);
                                  RESULT = tem;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E7 ::= 
            {
              Nodo RESULT =null;
		 /*result = null*/ RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E3 ::= RETURN E5 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                  Nodo tem = new Nodo("Return","0");
                                  tem.addHijo((Nodo)hijo);
                                  RESULT = tem;  
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // M ::= LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                              Nodo tem = new Nodo("Loop","0");
                                              Nodo tem2 = new Nodo();
                                              tem2.setTag("Cuerpo");
                                              for(int i=0; i < ((Nodo)hijo).hijos.size();i++){
                                                tem2.addHijo(((Nodo)hijo).hijos.get(i));
                                              }
                                              tem.addHijo(tem2);
                                              RESULT = tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // M ::= FOR X IN N1 LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                            Nodo tem = new Nodo("FOR","0");
                                                            Nodo tem2 = new Nodo();
                                                            tem.addHijo((Nodo)hijo1);
                                                            tem2.setTag("Cuerpo");
                                                            if(hijo2 != null){
                                                              for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                                tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                                              }
                                                            }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = tem;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // M ::= WHILE L6 LOOP M1 END LOOP PC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                          Nodo tem = new Nodo();
                                                          tem.setTag("WHILE");
                                                          tem.addHijo((Nodo)hijo1);
                                                          Nodo tem2 = new Nodo();
                                                          tem2.setTag("Cuerpo");
                                                          if(hijo2 != null){
                                                            for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                              tem2.addHijo(((Nodo)hijo2).hijos.get(i));
                                                            }
                                                          }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = tem;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // M1 ::= M M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // M1 ::= E M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // M1 ::= L M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // M1 ::= P M1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              Nodo tem = new Nodo();
                                              tem.addHijo((Nodo)hijo1);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Nodo)hijo2).hijos.size();i++){
                                                  tem.addHijo(((Nodo)hijo2).hijos.get(i));
                                                }
                                              }
                                              RESULT = (Nodo)tem;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // M1 ::= 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L1 ::= E5 OPREL E5 AND L1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = AND (OPREL(e5,e5), L1)*/ 
                                                      Nodo tem = new Nodo();
                                                      tem.setTag("AND");
                                                      Nodo tem2 = new Nodo("OPREL",t);
                                                      tem2.addHijo((Nodo)hijo1);
                                                      tem2.addHijo((Nodo)hijo2);
                                                      tem.addHijo((Nodo)tem2);
                                                      tem.addHijo((Nodo)hijo3);
                                                      
                                                      RESULT = (Nodo)tem;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L1 ::= E5 OPREL E5 OR L1 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = OR (OPREL(e5,e5), L1)*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("OR");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo((Nodo)hijo1);
                                                    tem2.addHijo((Nodo)hijo2);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo((Nodo)hijo3);
                                                      
                                                    RESULT = (Nodo)tem;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L1 ::= E5 OPREL E5 THEN 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  /* result = oprel(e5, e5)*/
                                Nodo tem = new Nodo("OPREL",t);
                                tem.addHijo((Nodo)hijo1);
                                tem.addHijo((Nodo)hijo2);
                                RESULT = (Nodo)tem;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L3 ::= N 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */
                            RESULT = (Nodo)n;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L3 ::= X 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */
                            RESULT = (Nodo)x;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L6 ::= E5 OPREL E5 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem2 = new Nodo("OPREL",t);
                                              tem2.addHijo((Nodo)hijo1);
                                              tem2.addHijo((Nodo)hijo2);
                                              RESULT = tem2;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L6 ::= E5 OPREL E5 AND L6 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("AND");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo((Nodo)hijo1);
                                                    tem2.addHijo((Nodo)hijo2);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo((Nodo)hijo3);
                                                    RESULT = (Nodo)tem;
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L6 ::= E5 OPREL E5 OR L6 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/ 
                                                    Nodo tem = new Nodo();
                                                    tem.setTag("OR");
                                                    Nodo tem2 = new Nodo("OPREL",t);
                                                    tem2.addHijo((Nodo)hijo1);
                                                    tem2.addHijo((Nodo)hijo2);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo((Nodo)hijo3);
                                                    RESULT = (Nodo)tem;
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // P ::= GET LP P1 RP PC 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String hijo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo("Get",hijo);
                                      RESULT =  tem;  
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // P ::= PUT LP P2 RP PC 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String hijo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
                                      Nodo tem = new Nodo("Put",hijo);
                                      RESULT =  tem; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // P1 ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // P2 ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // P2 ::= EXP 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // P2 ::= NUM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
