
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\007\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\007\003\000\002\010\003\000\002\011" +
    "\003\000\002\012\005\000\002\013\006\000\002\014\005" +
    "\000\002\014\003\000\002\015\006\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\006\000\002\016\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\020\005" +
    "\000\002\021\004\000\002\021\010\000\002\021\006\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\023\005\000\002\024\003\000\002\024" +
    "\003\000\002\025\007\000\002\025\007\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\056\006\001\002\000\004\002\163\001" +
    "\002\000\004\002\001\001\002\000\004\146\007\001\002" +
    "\000\022\002\ufff4\007\ufff4\054\ufff4\065\ufff4\076\ufff4\114" +
    "\ufff4\132\ufff4\133\ufff4\001\002\000\004\065\011\001\002" +
    "\000\010\040\012\046\014\146\007\001\002\000\004\146" +
    "\007\001\002\000\004\002\uffff\001\002\000\022\015\034" +
    "\035\040\055\031\076\036\100\035\144\033\145\041\146" +
    "\007\001\002\000\010\040\012\046\014\146\007\001\002" +
    "\000\004\133\017\001\002\000\004\110\020\001\002\000" +
    "\006\114\ufff3\134\ufff3\001\002\000\006\114\022\134\023" +
    "\001\002\000\004\107\025\001\002\000\010\040\uffee\046" +
    "\uffee\146\uffee\001\002\000\010\040\ufff0\046\ufff0\146\ufff0" +
    "\001\002\000\036\005\ufff2\011\ufff2\015\ufff2\035\ufff2\054" +
    "\ufff2\055\ufff2\061\ufff2\076\ufff2\100\ufff2\132\ufff2\134\ufff2" +
    "\144\ufff2\145\ufff2\146\ufff2\001\002\000\004\134\027\001" +
    "\002\000\010\040\uffef\046\uffef\146\uffef\001\002\000\004" +
    "\002\ufffe\001\002\000\006\107\025\146\007\001\002\000" +
    "\004\114\120\001\002\000\004\125\113\001\002\000\004" +
    "\146\007\001\002\000\006\107\025\146\007\001\002\000" +
    "\016\015\066\035\040\055\031\076\036\100\035\146\007" +
    "\001\002\000\022\015\034\035\040\055\031\076\036\100" +
    "\035\144\033\145\041\146\007\001\002\000\004\107\025" +
    "\001\002\000\004\125\051\001\002\000\022\015\034\035" +
    "\040\055\031\076\036\100\035\144\033\145\041\146\007" +
    "\001\002\000\022\015\034\035\040\055\031\076\036\100" +
    "\035\144\033\145\041\146\007\001\002\000\004\002\ufffc" +
    "\001\002\000\022\015\034\035\040\055\031\076\036\100" +
    "\035\144\033\145\041\146\007\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufff8\001" +
    "\002\000\010\107\052\142\053\146\054\001\002\000\004" +
    "\126\uffd2\001\002\000\004\126\uffd3\001\002\000\004\126" +
    "\uffd4\001\002\000\004\126\056\001\002\000\004\134\057" +
    "\001\002\000\022\015\uffd6\035\uffd6\055\uffd6\076\uffd6\100" +
    "\uffd6\144\uffd6\145\uffd6\146\uffd6\001\002\000\004\061\061" +
    "\001\002\000\004\107\062\001\002\000\004\112\076\001" +
    "\002\000\004\076\064\001\002\000\016\015\066\035\040" +
    "\055\031\076\036\100\035\146\007\001\002\000\026\005" +
    "\uffe0\011\uffe0\015\uffe0\035\uffe0\055\uffe0\076\uffe0\100\uffe0" +
    "\144\uffe0\145\uffe0\146\uffe0\001\002\000\004\076\075\001" +
    "\002\000\016\015\066\035\040\055\031\076\036\100\035" +
    "\146\007\001\002\000\016\015\066\035\040\055\031\076" +
    "\036\100\035\146\007\001\002\000\016\015\066\035\040" +
    "\055\031\076\036\100\035\146\007\001\002\000\026\005" +
    "\uffdd\011\uffdd\015\uffdd\035\uffdd\055\uffdd\076\uffdd\100\uffdd" +
    "\144\uffdd\145\uffdd\146\uffdd\001\002\000\026\005\uffdc\011" +
    "\uffdc\015\uffdc\035\uffdc\055\uffdc\076\uffdc\100\uffdc\144\uffdc" +
    "\145\uffdc\146\uffdc\001\002\000\026\005\uffde\011\uffde\015" +
    "\uffde\035\uffde\055\uffde\076\uffde\100\uffde\144\uffde\145\uffde" +
    "\146\uffde\001\002\000\026\005\uffdb\011\uffdb\015\uffdb\035" +
    "\uffdb\055\uffdb\076\uffdb\100\uffdb\144\uffdb\145\uffdb\146\uffdb" +
    "\001\002\000\004\107\077\001\002\000\004\076\ufff1\001" +
    "\002\000\004\002\ufff6\001\002\000\026\005\uffe1\011\uffe1" +
    "\015\uffe1\035\uffe1\055\uffe1\076\uffe1\100\uffe1\144\uffe1\145" +
    "\uffe1\146\uffe1\001\002\000\004\132\110\001\002\000\004" +
    "\076\106\001\002\000\010\054\uffd9\076\uffd9\132\uffd9\001" +
    "\002\000\010\054\uffd8\076\uffd8\132\uffd8\001\002\000\016" +
    "\015\066\035\040\055\031\076\036\100\035\146\007\001" +
    "\002\000\026\005\uffdf\011\uffdf\015\uffdf\035\uffdf\055\uffdf" +
    "\076\uffdf\100\uffdf\144\uffdf\145\uffdf\146\uffdf\001\002\000" +
    "\006\107\025\146\007\001\002\000\006\054\uffda\076\uffda" +
    "\001\002\000\004\002\ufff5\001\002\000\004\146\115\001" +
    "\002\000\004\126\116\001\002\000\004\126\uffd5\001\002" +
    "\000\004\134\117\001\002\000\022\015\uffd7\035\uffd7\055" +
    "\uffd7\076\uffd7\100\uffd7\144\uffd7\145\uffd7\146\uffd7\001\002" +
    "\000\004\107\025\001\002\000\026\005\uffe2\011\uffe2\015" +
    "\uffe2\035\uffe2\055\uffe2\076\uffe2\100\uffe2\144\uffe2\145\uffe2" +
    "\146\uffe2\001\002\000\004\054\123\001\002\000\022\005" +
    "\131\011\124\015\125\035\040\055\031\076\036\100\035" +
    "\146\007\001\002\000\006\107\025\146\007\001\002\000" +
    "\004\055\147\001\002\000\026\005\uffed\011\uffed\015\uffed" +
    "\035\uffed\055\uffed\076\uffed\100\uffed\144\uffed\145\uffed\146" +
    "\uffed\001\002\000\022\005\131\011\124\015\125\035\040" +
    "\055\031\076\036\100\035\146\007\001\002\000\022\005" +
    "\131\011\124\015\125\035\040\055\031\076\036\100\035" +
    "\146\007\001\002\000\016\015\135\035\040\055\031\076" +
    "\036\100\035\146\007\001\002\000\022\005\131\011\124" +
    "\015\125\035\040\055\031\076\036\100\035\146\007\001" +
    "\002\000\026\005\uffeb\011\uffeb\015\uffeb\035\uffeb\055\uffeb" +
    "\076\uffeb\100\uffeb\144\uffeb\145\uffeb\146\uffeb\001\002\000" +
    "\026\005\uffe9\011\uffe9\015\uffe9\035\uffe9\055\uffe9\076\uffe9" +
    "\100\uffe9\144\uffe9\145\uffe9\146\uffe9\001\002\000\004\055" +
    "\144\001\002\000\016\015\135\035\040\055\031\076\036" +
    "\100\035\146\007\001\002\000\016\015\135\035\040\055" +
    "\031\076\036\100\035\146\007\001\002\000\016\015\135" +
    "\035\040\055\031\076\036\100\035\146\007\001\002\000" +
    "\026\005\uffe6\011\uffe6\015\uffe6\035\uffe6\055\uffe6\076\uffe6" +
    "\100\uffe6\144\uffe6\145\uffe6\146\uffe6\001\002\000\026\005" +
    "\uffe5\011\uffe5\015\uffe5\035\uffe5\055\uffe5\076\uffe5\100\uffe5" +
    "\144\uffe5\145\uffe5\146\uffe5\001\002\000\026\005\uffe4\011" +
    "\uffe4\015\uffe4\035\uffe4\055\uffe4\076\uffe4\100\uffe4\144\uffe4" +
    "\145\uffe4\146\uffe4\001\002\000\026\005\uffe3\011\uffe3\015" +
    "\uffe3\035\uffe3\055\uffe3\076\uffe3\100\uffe3\144\uffe3\145\uffe3" +
    "\146\uffe3\001\002\000\026\005\uffec\011\uffec\015\uffec\035" +
    "\uffec\055\uffec\076\uffec\100\uffec\144\uffec\145\uffec\146\uffec" +
    "\001\002\000\026\005\uffea\011\uffea\015\uffea\035\uffea\055" +
    "\uffea\076\uffea\100\uffea\144\uffea\145\uffea\146\uffea\001\002" +
    "\000\026\005\uffe7\011\uffe7\015\uffe7\035\uffe7\055\uffe7\076" +
    "\uffe7\100\uffe7\144\uffe7\145\uffe7\146\uffe7\001\002\000\004" +
    "\054\151\001\002\000\016\015\135\035\040\055\031\076" +
    "\036\100\035\146\007\001\002\000\026\005\uffe8\011\uffe8" +
    "\015\uffe8\035\uffe8\055\uffe8\076\uffe8\100\uffe8\144\uffe8\145" +
    "\uffe8\146\uffe8\001\002\000\004\007\154\001\002\000\004" +
    "\065\155\001\002\000\006\046\157\146\007\001\002\000" +
    "\004\002\ufffd\001\002\000\022\015\034\035\040\055\031" +
    "\076\036\100\035\144\033\145\041\146\007\001\002\000" +
    "\006\046\157\146\007\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\012\007\015\013" +
    "\014\001\001\000\004\007\152\001\001\000\002\001\001" +
    "\000\016\006\043\007\031\015\042\020\044\021\041\025" +
    "\036\001\001\000\010\004\027\007\015\013\014\001\001" +
    "\000\002\001\001\000\004\010\020\001\001\000\002\001" +
    "\001\000\004\014\023\001\001\000\004\011\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\104\011\103\023\121\024\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\111\001\001\000\012" +
    "\007\104\011\103\023\102\024\101\001\001\000\014\007" +
    "\031\015\067\020\070\021\066\022\100\001\001\000\016" +
    "\006\077\007\031\015\042\020\044\021\041\025\036\001" +
    "\001\000\004\011\057\001\001\000\002\001\001\000\016" +
    "\006\047\007\031\015\042\020\044\021\041\025\036\001" +
    "\001\000\016\006\046\007\031\015\042\020\044\021\041" +
    "\025\036\001\001\000\002\001\001\000\016\006\045\007" +
    "\031\015\042\020\044\021\041\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\031\015\067\020" +
    "\070\021\066\022\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\031\015\067\020\070\021\066\022" +
    "\073\001\001\000\014\007\031\015\067\020\070\021\066" +
    "\022\072\001\001\000\014\007\031\015\067\020\070\021" +
    "\066\022\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\031\015\067\020\070\021\066\022\106" +
    "\001\001\000\002\001\001\000\010\007\104\011\103\024" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\031\015" +
    "\127\016\125\020\131\021\126\001\001\000\012\007\104" +
    "\011\103\023\147\024\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\031\015\127\016\145\020\131" +
    "\021\126\001\001\000\014\007\031\015\127\016\144\020" +
    "\131\021\126\001\001\000\014\007\031\015\136\017\133" +
    "\020\137\021\135\001\001\000\014\007\031\015\127\016" +
    "\132\020\131\021\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\031\015\136\017" +
    "\142\020\137\021\135\001\001\000\014\007\031\015\136" +
    "\017\141\020\137\021\135\001\001\000\014\007\031\015" +
    "\136\017\140\020\137\021\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\031\015\136\017\151\020\137\021" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\155\007\015\013\157\001\001\000" +
    "\002\001\001\000\016\006\161\007\031\015\042\020\044" +
    "\021\041\025\036\001\001\000\010\005\160\007\015\013" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // A ::= F 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= procedure X is G 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= C G 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= function X return is H 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= begin I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // H ::= C H 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // H ::= begin I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= L I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= M I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= E I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= P I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= end X 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // X ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = i; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Z ::= dataTypes 
            {
              String RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = d; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N ::= num 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N1 ::= num doubd num 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= X dos Z D 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // D ::= assign N pc 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // D ::= pc 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // L ::= if L1 then L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L2 ::= L L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L2 ::= E L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L2 ::= M L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L2 ::= else L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L2 ::= elsif L1 then L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L2 ::= end if 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L4 ::= E L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L4 ::= L L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L4 ::= M L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L4 ::= end if 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= X assign N 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // M ::= loop M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // M ::= for N in N1 loop M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // M ::= while L1 loop M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // M1 ::= M M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // M1 ::= E M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // M1 ::= L M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // M1 ::= end loop 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L1 ::= L3 oprel L3 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L3 ::= N 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L3 ::= X 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // P ::= get lp P1 rp pc 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // P ::= put lp P2 rp pc 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // P1 ::= id 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // P2 ::= id 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // P2 ::= exp 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // P2 ::= num 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
