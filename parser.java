
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import Nodos.*;
import Tabla.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\004\000\002\004\004\000\002\004\011" +
    "\000\002\004\013\000\002\004\002\000\002\004\004\000" +
    "\002\044\007\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\006\002\000\002\006\004\000\002\045\005" +
    "\000\002\045\002\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\003\000\002\012\003\000\002" +
    "\013\005\000\002\016\007\000\002\016\004\000\002\016" +
    "\002\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\002\000\002\014\006\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\017\010\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\004\000\002\020\005\000\002\020\002\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\005\000\002\021\005\000\002\021" +
    "\002\000\002\022\006\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\035\004\000\002\036\004\000" +
    "\002\037\005\000\002\037\004\000\002\037\003\000\002" +
    "\024\006\000\002\024\006\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\002\000" +
    "\002\027\004\000\002\030\007\000\002\030\013\000\002" +
    "\030\011\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\002\000\002\032\007" +
    "\000\002\032\007\000\002\032\006\000\002\033\003\000" +
    "\002\033\003\000\002\034\005\000\002\034\007\000\002" +
    "\034\007\000\002\040\007\000\002\040\007\000\002\043" +
    "\003\000\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\003\006\056\005\001\002\000\004\002" +
    "\334\001\002\000\004\152\010\001\002\000\014\002\ufffa" +
    "\003\012\040\015\056\011\152\010\001\002\000\004\002" +
    "\000\001\002\000\062\003\uffed\007\uffed\015\uffed\030\uffed" +
    "\034\uffed\035\uffed\054\uffed\055\uffed\061\uffed\065\uffed\076" +
    "\uffed\100\uffed\104\uffed\120\uffed\131\uffed\132\uffed\133\uffed" +
    "\134\uffed\136\uffed\137\uffed\140\uffed\150\uffed\151\uffed\152" +
    "\uffed\001\002\000\004\152\010\001\002\000\016\002\ufffa" +
    "\003\012\040\015\046\ufffa\056\011\152\010\001\002\000" +
    "\004\137\306\001\002\000\004\002\ufffe\001\002\000\004" +
    "\152\010\001\002\000\016\002\ufffa\003\012\040\015\046" +
    "\ufffa\056\011\152\010\001\002\000\006\134\020\137\uffeb" +
    "\001\002\000\004\152\010\001\002\000\004\137\uffec\001" +
    "\002\000\006\002\ufffd\046\ufffd\001\002\000\006\007\uffee" +
    "\131\025\001\002\000\004\007\045\001\002\000\010\132" +
    "\uffe5\140\027\152\010\001\002\000\004\137\033\001\002" +
    "\000\010\132\uffe5\140\027\152\010\001\002\000\004\132" +
    "\031\001\002\000\006\007\uffef\065\uffef\001\002\000\004" +
    "\132\uffe6\001\002\000\004\113\034\001\002\000\014\065" +
    "\uffea\120\uffea\132\uffea\140\uffea\152\uffea\001\002\000\012" +
    "\120\037\132\uffe1\140\uffe1\152\uffe1\001\002\000\010\132" +
    "\uffe5\140\027\152\010\001\002\000\010\110\041\111\042" +
    "\112\040\001\002\000\050\003\uffe9\007\uffe9\015\uffe9\030" +
    "\uffe9\034\uffe9\035\uffe9\054\uffe9\055\uffe9\076\uffe9\100\uffe9" +
    "\104\uffe9\132\uffe9\133\uffe9\134\uffe9\136\uffe9\140\uffe9\150" +
    "\uffe9\151\uffe9\152\uffe9\001\002\000\010\132\uffe3\140\uffe3" +
    "\152\uffe3\001\002\000\010\132\uffe2\140\uffe2\152\uffe2\001" +
    "\002\000\010\132\uffe4\140\uffe4\152\uffe4\001\002\000\004" +
    "\132\uffe7\001\002\000\004\113\034\001\002\000\004\065" +
    "\047\001\002\000\014\003\012\040\015\046\ufffa\056\011" +
    "\152\010\001\002\000\004\046\051\001\002\000\026\003" +
    "\064\007\072\015\ufff1\035\055\055\062\076\060\100\054" +
    "\150\067\151\057\152\010\001\002\000\016\002\ufffa\003" +
    "\012\040\015\046\ufffa\056\011\152\010\001\002\000\006" +
    "\002\ufffb\046\ufffb\001\002\000\010\112\040\131\075\152" +
    "\010\001\002\000\004\152\010\001\002\000\006\120\237" +
    "\131\103\001\002\000\004\131\250\001\002\000\022\015" +
    "\uffaf\035\055\055\062\076\060\100\054\150\067\151\057" +
    "\152\010\001\002\000\026\003\064\007\072\015\ufff1\035" +
    "\055\055\062\076\060\100\054\150\067\151\057\152\010" +
    "\001\002\000\010\112\040\131\075\152\010\001\002\000" +
    "\026\003\064\007\072\015\ufff1\035\055\055\062\076\060" +
    "\100\054\150\067\151\057\152\010\001\002\000\026\003" +
    "\064\007\072\015\ufff1\035\055\055\062\076\060\100\054" +
    "\150\067\151\057\152\010\001\002\000\026\003\064\007" +
    "\072\015\ufff1\035\055\055\062\076\060\100\054\150\067" +
    "\151\057\152\010\001\002\000\004\140\141\001\002\000" +
    "\004\131\135\001\002\000\026\003\064\007\072\015\ufff1" +
    "\035\055\055\062\076\060\100\054\150\067\151\057\152" +
    "\010\001\002\000\004\015\131\001\002\000\010\112\040" +
    "\131\075\152\010\001\002\000\026\003\064\007\072\015" +
    "\ufff1\035\055\055\062\076\060\100\054\150\067\151\057" +
    "\152\010\001\002\000\004\015\ufff5\001\002\000\010\112" +
    "\040\131\075\152\010\001\002\000\050\003\uffbf\007\uffbf" +
    "\015\uffbf\030\uffbf\034\uffbf\035\uffbf\054\uffbf\055\uffbf\076" +
    "\uffbf\100\uffbf\104\114\132\uffbf\133\113\134\uffbf\136\uffbf" +
    "\140\uffbf\150\uffbf\151\uffbf\152\uffbf\001\002\000\030\003" +
    "\uffb7\007\uffb7\015\uffb7\035\uffb7\055\uffb7\076\uffb7\100\uffb7" +
    "\140\uffb7\150\uffb7\151\uffb7\152\uffb7\001\002\000\050\003" +
    "\uffbd\007\uffbd\015\uffbd\030\uffbd\034\uffbd\035\uffbd\054\uffbd" +
    "\055\uffbd\076\uffbd\100\uffbd\104\uffbd\132\uffbd\133\uffbd\134" +
    "\uffbd\136\uffbd\140\uffbd\150\uffbd\151\uffbd\152\uffbd\001\002" +
    "\000\050\003\uffbe\007\uffbe\015\uffbe\030\uffbe\034\uffbe\035" +
    "\uffbe\054\uffbe\055\uffbe\076\uffbe\100\uffbe\104\uffbe\132\uffbe" +
    "\133\uffbe\134\uffbe\136\uffbe\140\uffbe\150\uffbe\151\uffbe\152" +
    "\uffbe\001\002\000\052\003\uffbb\007\uffbb\015\uffbb\030\uffbb" +
    "\034\uffbb\035\uffbb\054\uffbb\055\uffbb\076\uffbb\100\uffbb\104" +
    "\uffbb\131\103\132\uffbb\133\uffbb\134\uffbb\136\uffbb\140\uffbb" +
    "\150\uffbb\151\uffbb\152\uffbb\001\002\000\012\112\040\131" +
    "\075\132\107\152\010\001\002\000\050\003\uffc6\007\uffc6" +
    "\015\uffc6\030\uffc6\034\uffc6\035\uffc6\054\uffc6\055\uffc6\076" +
    "\uffc6\100\uffc6\104\uffc6\132\uffc6\133\uffc6\134\uffc6\136\uffc6" +
    "\140\uffc6\150\uffc6\151\uffc6\152\uffc6\001\002\000\050\003" +
    "\uffc5\007\uffc5\015\uffc5\030\uffc5\034\uffc5\035\uffc5\054\uffc5" +
    "\055\uffc5\076\uffc5\100\uffc5\104\uffc5\132\uffc5\133\uffc5\134" +
    "\uffc5\136\uffc5\140\uffc5\150\uffc5\151\uffc5\152\uffc5\001\002" +
    "\000\006\132\111\134\110\001\002\000\050\003\uffc2\007" +
    "\uffc2\015\uffc2\030\uffc2\034\uffc2\035\uffc2\054\uffc2\055\uffc2" +
    "\076\uffc2\100\uffc2\104\uffc2\132\uffc2\133\uffc2\134\uffc2\136" +
    "\uffc2\140\uffc2\150\uffc2\151\uffc2\152\uffc2\001\002\000\012" +
    "\112\040\131\075\132\107\152\010\001\002\000\050\003" +
    "\uffc3\007\uffc3\015\uffc3\030\uffc3\034\uffc3\035\uffc3\054\uffc3" +
    "\055\uffc3\076\uffc3\100\uffc3\104\uffc3\132\uffc3\133\uffc3\134" +
    "\uffc3\136\uffc3\140\uffc3\150\uffc3\151\uffc3\152\uffc3\001\002" +
    "\000\050\003\uffc4\007\uffc4\015\uffc4\030\uffc4\034\uffc4\035" +
    "\uffc4\054\uffc4\055\uffc4\076\uffc4\100\uffc4\104\uffc4\132\uffc4" +
    "\133\uffc4\134\uffc4\136\uffc4\140\uffc4\150\uffc4\151\uffc4\152" +
    "\uffc4\001\002\000\010\112\040\131\075\152\010\001\002" +
    "\000\010\112\040\131\075\152\010\001\002\000\050\003" +
    "\uffb8\007\uffb8\015\uffb8\030\uffb8\034\uffb8\035\uffb8\054\uffb8" +
    "\055\uffb8\076\uffb8\100\uffb8\104\117\132\uffb8\133\116\134" +
    "\uffb8\136\uffb8\140\uffb8\150\uffb8\151\uffb8\152\uffb8\001\002" +
    "\000\010\112\040\131\075\152\010\001\002\000\010\112" +
    "\040\131\075\152\010\001\002\000\044\003\uffc0\007\uffc0" +
    "\015\uffc0\030\uffc0\034\uffc0\035\uffc0\054\uffc0\055\uffc0\076" +
    "\uffc0\100\uffc0\132\uffc0\134\uffc0\136\uffc0\140\uffc0\150\uffc0" +
    "\151\uffc0\152\uffc0\001\002\000\050\003\uffb8\007\uffb8\015" +
    "\uffb8\030\uffb8\034\uffb8\035\uffb8\054\uffb8\055\uffb8\076\uffb8" +
    "\100\uffb8\104\117\132\uffb8\133\116\134\uffb8\136\uffb8\140" +
    "\uffb8\150\uffb8\151\uffb8\152\uffb8\001\002\000\044\003\uffb9" +
    "\007\uffb9\015\uffb9\030\uffb9\034\uffb9\035\uffb9\054\uffb9\055" +
    "\uffb9\076\uffb9\100\uffb9\132\uffb9\134\uffb9\136\uffb9\140\uffb9" +
    "\150\uffb9\151\uffb9\152\uffb9\001\002\000\050\003\uffb8\007" +
    "\uffb8\015\uffb8\030\uffb8\034\uffb8\035\uffb8\054\uffb8\055\uffb8" +
    "\076\uffb8\100\uffb8\104\117\132\uffb8\133\116\134\uffb8\136" +
    "\uffb8\140\uffb8\150\uffb8\151\uffb8\152\uffb8\001\002\000\044" +
    "\003\uffba\007\uffba\015\uffba\030\uffba\034\uffba\035\uffba\054" +
    "\uffba\055\uffba\076\uffba\100\uffba\132\uffba\134\uffba\136\uffba" +
    "\140\uffba\150\uffba\151\uffba\152\uffba\001\002\000\050\003" +
    "\uffb8\007\uffb8\015\uffb8\030\uffb8\034\uffb8\035\uffb8\054\uffb8" +
    "\055\uffb8\076\uffb8\100\uffb8\104\117\132\uffb8\133\116\134" +
    "\uffb8\136\uffb8\140\uffb8\150\uffb8\151\uffb8\152\uffb8\001\002" +
    "\000\044\003\uffc1\007\uffc1\015\uffc1\030\uffc1\034\uffc1\035" +
    "\uffc1\054\uffc1\055\uffc1\076\uffc1\100\uffc1\132\uffc1\134\uffc1" +
    "\136\uffc1\140\uffc1\150\uffc1\151\uffc1\152\uffc1\001\002\000" +
    "\004\132\130\001\002\000\050\003\uffbc\007\uffbc\015\uffbc" +
    "\030\uffbc\034\uffbc\035\uffbc\054\uffbc\055\uffbc\076\uffbc\100" +
    "\uffbc\104\uffbc\132\uffbc\133\uffbc\134\uffbc\136\uffbc\140\uffbc" +
    "\150\uffbc\151\uffbc\152\uffbc\001\002\000\004\152\010\001" +
    "\002\000\004\140\133\001\002\000\016\002\ufff8\003\ufff8" +
    "\040\ufff8\046\ufff8\056\ufff8\152\ufff8\001\002\000\004\015" +
    "\ufff3\001\002\000\004\152\010\001\002\000\004\132\137" +
    "\001\002\000\004\140\140\001\002\000\032\003\uffa6\005" +
    "\uffa6\007\uffa6\011\uffa6\015\uffa6\035\uffa6\055\uffa6\076\uffa6" +
    "\100\uffa6\150\uffa6\151\uffa6\152\uffa6\001\002\000\026\003" +
    "\064\007\072\015\ufff1\035\055\055\062\076\060\100\054" +
    "\150\067\151\057\152\010\001\002\000\004\015\ufff2\001" +
    "\002\000\004\015\ufff7\001\002\000\004\015\ufff0\001\002" +
    "\000\004\015\ufff6\001\002\000\030\005\157\007\072\011" +
    "\160\015\uffd2\035\055\055\062\076\060\100\054\150\067" +
    "\151\057\152\010\001\002\000\004\136\150\001\002\000" +
    "\010\112\040\131\075\152\010\001\002\000\010\030\154" +
    "\034\153\054\152\001\002\000\030\005\uffac\007\uffac\011" +
    "\uffac\015\uffac\035\uffac\055\uffac\076\uffac\100\uffac\150\uffac" +
    "\151\uffac\152\uffac\001\002\000\010\112\040\131\075\152" +
    "\010\001\002\000\010\112\040\131\075\152\010\001\002" +
    "\000\030\005\uffad\007\uffad\011\uffad\015\uffad\035\uffad\055" +
    "\uffad\076\uffad\100\uffad\150\uffad\151\uffad\152\uffad\001\002" +
    "\000\030\005\uffae\007\uffae\011\uffae\015\uffae\035\uffae\055" +
    "\uffae\076\uffae\100\uffae\150\uffae\151\uffae\152\uffae\001\002" +
    "\000\024\007\072\015\uffcb\035\055\055\062\076\060\100" +
    "\054\150\067\151\057\152\010\001\002\000\010\112\040" +
    "\131\075\152\010\001\002\000\030\005\157\007\072\011" +
    "\160\015\uffd2\035\055\055\062\076\060\100\054\150\067" +
    "\151\057\152\010\001\002\000\030\005\157\007\072\011" +
    "\160\015\uffd2\035\055\055\062\076\060\100\054\150\067" +
    "\151\057\152\010\001\002\000\004\140\177\001\002\000" +
    "\030\005\157\007\072\011\160\015\uffd2\035\055\055\062" +
    "\076\060\100\054\150\067\151\057\152\010\001\002\000" +
    "\004\140\174\001\002\000\030\005\157\007\072\011\160" +
    "\015\uffd2\035\055\055\062\076\060\100\054\150\067\151" +
    "\057\152\010\001\002\000\004\015\170\001\002\000\004" +
    "\055\171\001\002\000\004\140\172\001\002\000\032\003" +
    "\uffdb\005\uffdb\007\uffdb\011\uffdb\015\uffdb\035\uffdb\055\uffdb" +
    "\076\uffdb\100\uffdb\150\uffdb\151\uffdb\152\uffdb\001\002\000" +
    "\004\015\uffd9\001\002\000\030\005\157\007\072\011\160" +
    "\015\uffd2\035\055\055\062\076\060\100\054\150\067\151" +
    "\057\152\010\001\002\000\004\015\uffd5\001\002\000\004" +
    "\015\uffda\001\002\000\030\005\157\007\072\011\160\015" +
    "\uffd2\035\055\055\062\076\060\100\054\150\067\151\057" +
    "\152\010\001\002\000\004\015\uffd6\001\002\000\004\015" +
    "\uffd8\001\002\000\004\015\uffd7\001\002\000\030\005\157" +
    "\007\072\011\160\015\uffd2\035\055\055\062\076\060\100" +
    "\054\150\067\151\057\152\010\001\002\000\004\015\uffd3" +
    "\001\002\000\004\015\uffd4\001\002\000\024\007\072\015" +
    "\uffcb\035\055\055\062\076\060\100\054\150\067\151\057" +
    "\152\010\001\002\000\024\007\072\015\uffcb\035\055\055" +
    "\062\076\060\100\054\150\067\151\057\152\010\001\002" +
    "\000\024\007\072\015\uffcb\035\055\055\062\076\060\100" +
    "\054\150\067\151\057\152\010\001\002\000\004\140\217" +
    "\001\002\000\004\140\215\001\002\000\024\007\072\015" +
    "\uffcb\035\055\055\062\076\060\100\054\150\067\151\057" +
    "\152\010\001\002\000\004\015\uffd1\001\002\000\024\007" +
    "\072\015\uffcb\035\055\055\062\076\060\100\054\150\067" +
    "\151\057\152\010\001\002\000\004\015\uffcc\001\002\000" +
    "\024\007\072\015\uffcb\035\055\055\062\076\060\100\054" +
    "\150\067\151\057\152\010\001\002\000\004\015\uffcd\001" +
    "\002\000\004\015\uffd0\001\002\000\004\015\uffcf\001\002" +
    "\000\004\015\uffce\001\002\000\004\015\ufff4\001\002\000" +
    "\004\015\245\001\002\000\004\120\237\001\002\000\022" +
    "\015\uffaf\035\055\055\062\076\060\100\054\150\067\151" +
    "\057\152\010\001\002\000\022\015\uffaf\035\055\055\062" +
    "\076\060\100\054\150\067\151\057\152\010\001\002\000" +
    "\022\015\uffaf\035\055\055\062\076\060\100\054\150\067" +
    "\151\057\152\010\001\002\000\022\015\uffaf\035\055\055" +
    "\062\076\060\100\054\150\067\151\057\152\010\001\002" +
    "\000\004\015\uffb2\001\002\000\004\015\uffb1\001\002\000" +
    "\004\015\uffb3\001\002\000\004\015\uffb0\001\002\000\014" +
    "\110\240\111\241\112\040\131\075\152\010\001\002\000" +
    "\006\132\uffc9\140\uffc9\001\002\000\006\132\uffc8\140\uffc8" +
    "\001\002\000\006\132\uffc7\140\uffc7\001\002\000\004\140" +
    "\244\001\002\000\032\003\uffca\005\uffca\007\uffca\011\uffca" +
    "\015\uffca\035\uffca\055\uffca\076\uffca\100\uffca\150\uffca\151" +
    "\uffca\152\uffca\001\002\000\004\076\246\001\002\000\004" +
    "\140\247\001\002\000\032\003\uffb6\005\uffb6\007\uffb6\011" +
    "\uffb6\015\uffb6\035\uffb6\055\uffb6\076\uffb6\100\uffb6\150\uffb6" +
    "\151\uffb6\152\uffb6\001\002\000\016\110\240\111\241\112" +
    "\040\131\075\146\252\152\010\001\002\000\004\132\uffa2" +
    "\001\002\000\004\132\uffa3\001\002\000\004\132\254\001" +
    "\002\000\004\140\255\001\002\000\032\003\uffa5\005\uffa5" +
    "\007\uffa5\011\uffa5\015\uffa5\035\uffa5\055\uffa5\076\uffa5\100" +
    "\uffa5\150\uffa5\151\uffa5\152\uffa5\001\002\000\004\061\257" +
    "\001\002\000\004\112\260\001\002\000\004\116\267\001" +
    "\002\000\004\076\262\001\002\000\022\015\uffaf\035\055" +
    "\055\062\076\060\100\054\150\067\151\057\152\010\001" +
    "\002\000\004\015\264\001\002\000\004\076\265\001\002" +
    "\000\004\140\266\001\002\000\032\003\uffb5\005\uffb5\007" +
    "\uffb5\011\uffb5\015\uffb5\035\uffb5\055\uffb5\076\uffb5\100\uffb5" +
    "\150\uffb5\151\uffb5\152\uffb5\001\002\000\004\112\270\001" +
    "\002\000\004\076\uffe8\001\002\000\004\076\301\001\002" +
    "\000\004\136\273\001\002\000\010\112\040\131\075\152" +
    "\010\001\002\000\010\030\276\034\275\076\uffa9\001\002" +
    "\000\010\112\040\131\075\152\010\001\002\000\010\112" +
    "\040\131\075\152\010\001\002\000\004\076\uffa7\001\002" +
    "\000\004\076\uffa8\001\002\000\022\015\uffaf\035\055\055" +
    "\062\076\060\100\054\150\067\151\057\152\010\001\002" +
    "\000\004\015\303\001\002\000\004\076\304\001\002\000" +
    "\004\140\305\001\002\000\032\003\uffb4\005\uffb4\007\uffb4" +
    "\011\uffb4\015\uffb4\035\uffb4\055\uffb4\076\uffb4\100\uffb4\150" +
    "\uffb4\151\uffb4\152\uffb4\001\002\000\004\113\034\001\002" +
    "\000\006\120\312\140\310\001\002\000\016\002\uffdc\003" +
    "\uffdc\040\uffdc\046\uffdc\056\uffdc\152\uffdc\001\002\000\016" +
    "\002\uffe0\003\uffe0\040\uffe0\046\uffe0\056\uffe0\152\uffe0\001" +
    "\002\000\010\110\313\111\314\112\040\001\002\000\004" +
    "\140\320\001\002\000\004\140\317\001\002\000\004\140" +
    "\316\001\002\000\016\002\uffdf\003\uffdf\040\uffdf\046\uffdf" +
    "\056\uffdf\152\uffdf\001\002\000\016\002\uffdd\003\uffdd\040" +
    "\uffdd\046\uffdd\056\uffdd\152\uffdd\001\002\000\016\002\uffde" +
    "\003\uffde\040\uffde\046\uffde\056\uffde\152\uffde\001\002\000" +
    "\006\002\ufff9\046\ufff9\001\002\000\006\065\uffee\131\025" +
    "\001\002\000\004\065\324\001\002\000\014\003\012\040" +
    "\015\046\ufffa\056\011\152\010\001\002\000\004\046\051" +
    "\001\002\000\016\002\ufffa\003\012\040\015\046\ufffa\056" +
    "\011\152\010\001\002\000\006\002\ufffc\046\ufffc\001\002" +
    "\000\004\065\331\001\002\000\014\003\012\040\015\046" +
    "\ufffa\056\011\152\010\001\002\000\004\046\051\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\004\007\327\001\001\000\012\004\013\007\016" +
    "\010\012\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\321\001\001\000\012\004\320\007\016" +
    "\010\012\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\022\001\001\000\012\004\021\007\016" +
    "\010\012\014\015\001\001\000\002\001\001\000\006\007" +
    "\016\010\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\023\001\001\000\002\001\001\000\010\007" +
    "\016\010\025\016\027\001\001\000\002\001\001\000\010" +
    "\007\016\010\025\016\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\034\001\001" +
    "\000\002\001\001\000\004\041\035\001\001\000\010\007" +
    "\016\010\025\016\043\001\001\000\004\012\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\045\001\001" +
    "\000\002\001\001\000\012\004\047\007\016\010\012\014" +
    "\015\001\001\000\004\044\051\001\001\000\022\006\070" +
    "\007\055\017\064\022\072\027\067\030\062\035\065\040" +
    "\060\001\001\000\012\004\052\007\016\010\012\014\015" +
    "\001\001\000\002\001\001\000\016\007\101\012\100\024" +
    "\271\025\075\034\270\035\077\001\001\000\004\007\255" +
    "\001\001\000\004\036\103\001\001\000\002\001\001\000" +
    "\016\007\225\017\230\022\231\030\227\031\224\040\226" +
    "\001\001\000\022\006\223\007\055\017\064\022\072\027" +
    "\067\030\062\035\065\040\060\001\001\000\016\007\101" +
    "\012\100\024\146\025\075\032\145\035\077\001\001\000" +
    "\022\006\144\007\055\017\064\022\072\027\067\030\062" +
    "\035\065\040\060\001\001\000\022\006\143\007\055\017" +
    "\064\022\072\027\067\030\062\035\065\040\060\001\001" +
    "\000\022\006\142\007\055\017\064\022\072\027\067\030" +
    "\062\035\065\040\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\133\007\055\017\064\022\072\027" +
    "\067\030\062\035\065\040\060\001\001\000\002\001\001" +
    "\000\014\007\101\012\100\024\076\025\075\035\077\001" +
    "\001\000\022\006\073\007\055\017\064\022\072\027\067" +
    "\030\062\035\065\040\060\001\001\000\002\001\001\000" +
    "\014\007\101\012\100\024\126\025\075\035\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\103\001\001\000\016\007\101" +
    "\012\100\024\105\025\075\035\077\037\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\101\012\100\024\105\025\075\035" +
    "\077\037\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\101\012\100\025\124\035\077\001\001\000" +
    "\012\007\101\012\100\025\114\035\077\001\001\000\004" +
    "\026\117\001\001\000\012\007\101\012\100\025\122\035" +
    "\077\001\001\000\012\007\101\012\100\025\120\035\077" +
    "\001\001\000\002\001\001\000\004\026\121\001\001\000" +
    "\002\001\001\000\004\026\123\001\001\000\002\001\001" +
    "\000\004\026\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\141\007\055\017\064\022\072\027" +
    "\067\030\062\035\065\040\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\055\017\163\020\166\022\165\027\164\030\161" +
    "\035\162\040\160\001\001\000\002\001\001\000\014\007" +
    "\101\012\100\024\150\025\075\035\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\101\012\100\024" +
    "\146\025\075\032\155\035\077\001\001\000\016\007\101" +
    "\012\100\024\146\025\075\032\154\035\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\055\017\207" +
    "\021\204\022\212\027\211\030\206\035\210\040\205\001" +
    "\001\000\016\007\101\012\100\024\146\025\075\032\202" +
    "\035\077\001\001\000\022\007\055\017\163\020\201\022" +
    "\165\027\164\030\161\035\162\040\160\001\001\000\022" +
    "\007\055\017\163\020\200\022\165\027\164\030\161\035" +
    "\162\040\160\001\001\000\002\001\001\000\022\007\055" +
    "\017\163\020\175\022\165\027\164\030\161\035\162\040" +
    "\160\001\001\000\002\001\001\000\022\007\055\017\163" +
    "\020\172\022\165\027\164\030\161\035\162\040\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\055\017" +
    "\163\020\174\022\165\027\164\030\161\035\162\040\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\055\017\163\020\177\022\165\027\164\030\161\035\162" +
    "\040\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\055\017\163\020\203\022\165" +
    "\027\164\030\161\035\162\040\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\055\017\207\021\222" +
    "\022\212\027\211\030\206\035\210\040\205\001\001\000" +
    "\022\007\055\017\207\021\221\022\212\027\211\030\206" +
    "\035\210\040\205\001\001\000\022\007\055\017\207\021" +
    "\220\022\212\027\211\030\206\035\210\040\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\055\017" +
    "\207\021\213\022\212\027\211\030\206\035\210\040\205" +
    "\001\001\000\002\001\001\000\022\007\055\017\207\021" +
    "\215\022\212\027\211\030\206\035\210\040\205\001\001" +
    "\000\002\001\001\000\022\007\055\017\207\021\217\022" +
    "\212\027\211\030\206\035\210\040\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\225\017\230\022\231\030\227\031\235\040" +
    "\226\001\001\000\016\007\225\017\230\022\231\030\227" +
    "\031\234\040\226\001\001\000\016\007\225\017\230\022" +
    "\231\030\227\031\233\040\226\001\001\000\016\007\225" +
    "\017\230\022\231\030\227\031\232\040\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\101\012\100\023\242\024\241\025" +
    "\075\035\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\101\012\100\023\250\024\241\025\075\035\077\042" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\225\017\230\022\231\030\227\031" +
    "\262\040\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\101\012\100\024\273\025\075\035\077\001\001\000" +
    "\002\001\001\000\016\007\101\012\100\024\271\025\075" +
    "\034\277\035\077\001\001\000\016\007\101\012\100\024" +
    "\271\025\075\034\276\035\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\225\017\230\022\231\030" +
    "\227\031\301\040\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\306\001\001\000\004\015\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\322\001\001\000\002\001\001\000\012\004\324" +
    "\007\016\010\012\014\015\001\001\000\004\044\325\001" +
    "\001\000\012\004\326\007\016\010\012\014\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\331\007" +
    "\016\010\012\014\015\001\001\000\004\044\332\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static LinkedList<String> msgErroresSintactico = new LinkedList<String>();

  public static LinkedList<String> msgErroresSemantico = new LinkedList<String>();

  public void report_error (String message, Object info) {
    if (message.equalsIgnoreCase("Syntax error")) {
      message = "Error Sintactico";
    } else if (message.equalsIgnoreCase("Couldn't repair and continue parse")) {
      message = "Error Fatal";
    }
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.right >= 0) {
        message += ": en linea " + (s.right + 1);
        if (s.left >= 0) {
          message += ", columna " + (s.left + 1);
        }
        if(getScanner() instanceof Ada95) {
          message += "; no se esperaba '" + ((Ada95)getScanner()).getCurrentText()+"'";
        }
      }
    }
    msgErroresSintactico.add(message);
  }

  public void report_fatal_error (String message, Object info) {
    report_error(message, info);
  }

  public boolean isInteger (String value) {
    if (value.indexOf(".") == 1) {
      return false;
    } else {
      return true;
    }
  }

  public Nodo raiz;
  TablaSimbolos tablaFinal;
  public LinkedList<String[]> tablaSimbolos = new LinkedList();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*A.root = F*/
                                          raiz = new Nodo();
                                          raiz.setTag(TagAbstract.INICIO);
                                          raiz.addHijo(((Container)hijo).nodo);
                                          tablaFinal = hijo.tablaMain;
                                          tablaFinal.calcularOffset(tablaFinal, 0);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G CUERPO 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*procedure(G)*/
                                          Nodo nod = new Nodo();
                                          nod.setTag(TagAbstract.PROCEDURE);
                                          nod.addHijo(((Container)hijo1).nodo);

                                          Container temp = new Container(nod);

                                          if(hijo2 != null){
                                            if(((Container)hijo2).nodo.tag.equals(TagAbstract.TEM)){
                                              for(int i = 0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                nod.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }

                                              //Agregar simbolo de este procedimiento
                                              //Agregar simbolos del hijo en esta tabla
                                              //No hacer copia V
                                              temp.addAll(hijo2);
                                              //temp.addChild(hijo2);

                                              /* System.out.println("F (lista):");
                                              System.out.println("Size: " + temp.tablaMain.children.size()); */
                                            }else{
                                              nod.addHijo(((Container)hijo2).nodo);

                                              //agregando procedimiento a hijo
                                              temp.tablaMain.addSymbol(hijo2.tablaMain.tabla.get(0));
                                              temp.tablaMain.addChild(hijo2.tablaMain);
                                            }
                                            temp.adoptChildren(hijo2);
                                          }

                                          Simbolo thisFunction = hijo1.tablaMain.tabla.get(0);
                                          thisFunction.setTipo(new TipoFuncion());
                                          //TODO:agregar composicion
                                          temp.tablaMain.addSymbolFirst(thisFunction);

                                          nod.addHijo(((Container)hijo3).nodo);

                                          RESULT = temp;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // F ::= error G 
            {
              Container RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= C G 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = nodo(C, G)*/
                                          Nodo tem = new Nodo();
                                          tem.setTag(TagAbstract.TEM);
                                          tem.addHijo(((Container)hijo1).nodo);

                                          Container temp = new Container(tem);

                                          if(hijo2 == null){
                                            temp.addAll(hijo1);
                                            temp.tablaMain.parent = new TablaSimbolos();
                                          } else {
                                            if(((Container)hijo2).nodo.tag.equals(TagAbstract.TEM)) {
                                              for(int i = 0; i < ((Container)hijo2).nodo.hijos.size(); i++) {
                                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }

                                              temp.addAll(hijo2);
                                              temp.addSymbols(hijo1);
                                            } else { //Viene de procedure o function
                                              tem.addHijo(((Container)hijo2).nodo);

                                              temp.tablaMain.addChild(hijo2.tablaMain);

                                              hijo2.addBrother(temp);
                                            }
                                            System.out.println((hijo2.tablaMain.parent == null)?"null p":"not null");
                                          }

                                          RESULT = temp;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= PROCEDURE X ARGFUC IS G CUERPO G 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo6 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo5 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*subprocedure(G)*/
                                          Nodo temporal = new Nodo(TagAbstract.TEM);
                                          Nodo nod = new Nodo(); // nodo para el procedimiento
                                          Container temp = new Container(temporal);
                                          Simbolo thisFunction = hijo1.tablaMain.tabla.get(0);


                                          nod.setTag(TagAbstract.SUBPROCEDURE);
                                          nod.addHijo(((Container)hijo1).nodo);
                                          if (hijo6 != null) {
                                            hijo6.nodo.setTag(TagAbstract.PARAM);
                                            nod.addHijo(hijo6.nodo);
                                            temp.addAll(hijo6);

                                            //Se crea el tipo del procedimiento
                                            thisFunction.setTipo(new TipoFuncion(hijo2.nodo.valor));
                                            thisFunction.tipo.setComposicion(hijo6.tablaMain.tabla);
                                          }


                                          if(hijo2 != null){
                                            if(((Container)hijo2).nodo.getInfo().equals(TagAbstract.TEM)){
                                              for(int i = 0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                nod.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }
                                              temp.addAll(hijo2);
                                            }else{
                                              nod.addHijo(((Container)hijo2).nodo);
                                              //TODO: temp.tablaMain.addSymbol(hijo2.tablaMain.tabla.get(0));
                                              temp.addChild(hijo2);
                                            }
                                          }
                                          nod.addHijo(((Container)hijo3).nodo);

                                          temporal.addHijo(nod);
                                          if (hijo5 != null) {
                                            if (hijo5.nodo.getInfo().equals(TagAbstract.TEM)) {
                                              for (int i = 0; i < hijo5.nodo.hijos.size(); i++) {
                                                temporal.addHijo(hijo5.nodo.hijos.get(i));
                                              }

                                              temp.addChildren(hijo5);
                                            } else {
                                              temporal.addHijo(hijo5.nodo);

                                              hijo5.addBrother(temp);
                                            }
                                          }else{
                                            TablaSimbolos padre = new TablaSimbolos();
                                            padre.addChild(temp.tablaMain);
                                          }


                                          //Agrega el procedimiento a la tabla de simbolos
                                          temp.tablaMain.addSymbolFirst(thisFunction);

                                          RESULT = temp;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // G ::= FUNCTION X ARGFUC RETURN Z IS G CUERPO G 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Container hijo6 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo4 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo5 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = function(X,return(Z),H)*/
                                                      Nodo temporal = new Nodo(TagAbstract.TEM);// padre
                                                      Nodo tem = new Nodo(); //  tem para la funcion
                                                      Container temp = new Container(temporal);
                                                      Simbolo thisFunction = hijo1.tablaMain.tabla.get(0);

                                                      tem.setTag(TagAbstract.FUNCTION);
                                                      tem.addHijo(((Container)hijo1).nodo);
                                                      if (hijo6 != null) {
                                                        hijo6.nodo.setTag(TagAbstract.PARAM);
                                                        tem.addHijo(hijo6.nodo);
                                                        temp.addAll(hijo6);

                                                        //Se crea el tipo de la funcion
                                                        thisFunction.setTipo(new TipoFuncion(hijo2.nodo.valor));
                                                        thisFunction.tipo.setComposicion(hijo6.tablaMain.tabla);
                                                      }

                                                      Nodo ret = new Nodo();
                                                      ret.setTag(TagAbstract.RETURN);
                                                      ret.addHijo(((Container)hijo2).nodo);
                                                      tem.addHijo(ret);
                                                      if(hijo3 != null){
                                                        if(((Container)hijo3).nodo.getInfo().equals(TagAbstract.TEM)){
                                                          for(int i = 0; i < ((Container)hijo3).nodo.hijos.size();i++){
                                                            tem.addHijo(((Container)hijo3).nodo.hijos.get(i));
                                                          }
                                                          temp.addAll(hijo6);
                                                        }else{
                                                          tem.addHijo(((Container)hijo3).nodo);

                                                          temp.addChild(hijo3);
                                                        }
                                                      }

                                                      tem.addHijo(((Container)hijo4).nodo);

                                                      //tem.addHijo((Nodo)hijo3);
                                                      temporal.addHijo(tem);
                                                      if (hijo5 != null) {
                                                        if (hijo5.nodo.getInfo().equals(TagAbstract.TEM)) {
                                                          for(int i = 0; i < hijo5.nodo.hijos.size();i++){
                                                            temporal.addHijo(hijo5.nodo.hijos.get(i));
                                                          }

                                                          temp.addChildren(hijo5);
                                                        } else {
                                                          temporal.addHijo(hijo5.nodo);

                                                          hijo5.addBrother(temp);
                                                        }
                                                      } else {
                                                        TablaSimbolos padre = new TablaSimbolos();
                                                        padre.addChild(temp.tablaMain);
                                                      }

                                                      //Agrega la funcion a la tabla de simbolos
                                                      temp.addSymbolFirst(thisFunction);

                                                      RESULT = temp;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // G ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // G ::= error G 
            {
              Container RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= BEGIN I END X PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = body(I)*/

                                           // System.out.println("++++++++++++++++++++++++++");
                                          Nodo tem = new Nodo();
                                          tem.setTag(TagAbstract.CUERPO);
                                          //tem.addHijo((Nodo)hijo1);
                                          if(hijo1 != null){
                                            for(int i=0; i < ((Container)hijo1).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo1).nodo.hijos.get(i));
                                            }
                                          }

                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= L I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= M I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= E I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= P I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I ::= E3 I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I ::= E4 PC I 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                          Nodo tem = new Nodo();
                                          tem.addHijo(((Container)hijo1).nodo);
                                          if(hijo2 != null){
                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                            }
                                          }
                                          RESULT = new Container(tem);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // I ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // I ::= error I 
            {
              Container RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGFUC ::= LP ARG RP 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = hijo;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGFUC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARGFUC ::= 
            {
              Container RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGFUC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // X ::= ID 
            {
              Container RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* Result = ID(att:i) */
                          Container temp = new Container(new Nodo(TagAbstract.ID,i));
                          temp.tablaMain.addSymbol(new Simbolo(i, false, null));
                          RESULT = temp;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // X2 ::= X COMA X2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = declaracion (att: arreglo = X + X2.arreglo)*/
                                    Nodo tempN = new Nodo(TagAbstract.DECLARACION, "Variables");
                                    Container temp = new Container(tempN);

                                    tempN.addHijo(hijo1.nodo);
                                    tempN.addHijo(hijo2.nodo);

                                    temp.tablaMain = hijo2.tablaMain;
                                    temp.tablaMain.addSymbol(hijo1.tablaMain.tabla.get(0));
                                    RESULT = temp;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // X2 ::= X 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/* result = X*/
                              RESULT = (Container)hijo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Z ::= DATATYPES 
            {
              Container RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = dt; */
                          RESULT = new Container(new Nodo(TagAbstract.DATATYPE,dt));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N ::= NUM 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ RESULT = new Container(new Nodo(TagAbstract.NUM,n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N1 ::= NUM DOUBD NUM 
            {
              Container RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = range(att: num1, num2)*/ RESULT = new Container(new Nodo("Rango",n1 + t + n2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARG ::= X2 DOS Z ARG2 ARG 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo4 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Container)hijo2).nodo.addHijo(((Container)hijo1).nodo);

                                          if(((Container)hijo3).nodo.getInfo().equals(TagAbstract.NULO)){
                                          }else{
                                            ((Container)hijo2).nodo.addHijo(((Container)hijo3).nodo);
                                          }

                                          if (hijo4 != null) {
                                            hijo2.nodo.addHijo(hijo4.nodo);
                                          }

                                          hijo2.tablaMain = hijo1.tablaMain;
                                          hijo2.tablaMain.asignarTipo(hijo2.nodo.valor);

                                          RESULT = (Container)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARG ::= PC ARG 
            {
              Container RESULT =null;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo4 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = hijo4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARG ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARG2 ::= ASSIGN N 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container n = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag(TagAbstract.ASSIGN);
                          tem.addHijo(((Container)n).nodo);
                          RESULT = new Container(tem);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARG2 ::= ASSIGN TRUE 
            {
              Container RESULT =null;
		/*result = true*/
                          RESULT = new Container(new Nodo(TagAbstract.ASSIGN,"TRUE"));

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARG2 ::= ASSIGN FALSE 
            {
              Container RESULT =null;
		/*result = false*/
                          RESULT = new Container(new Nodo(TagAbstract.ASSIGN,"FALSE"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARG2 ::= 
            {
              Container RESULT =null;
		RESULT = new Container(new Nodo(TagAbstract.NULO,"0"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // C ::= X2 DOS Z D 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = Z(X2,D)*/
                                          ((Container)hijo2).nodo.addHijo(((Container)hijo1).nodo);
                                          if(((Container)hijo3).nodo.getInfo().equals(TagAbstract.NULO)){
                                          }else{
                                            if (hijo3.nodo.hijos.size() != 0) {
                                              for (Nodo n: hijo3.nodo.hijos) {
                                                for (int i = 0; i < tablaSimbolos.size(); i++) {
                                                  String identificador = tablaSimbolos.get(i)[0];
                                                  String tipo = tablaSimbolos.get(i)[1];
                                                  if (identificador.equals(hijo1.nodo.valor)) {
                                                    if (tipo.equalsIgnoreCase("Integer") && !isInteger(n.valor)) {
                                                      System.out.println("Error Semantico");
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            ((Container)hijo2).nodo.addHijo(((Container)hijo3).nodo);
                                          }
                                          hijo2.tablaMain = hijo1.tablaMain;
                                          hijo2.tablaMain.asignarTipo(hijo2.nodo.valor);

                                          /*System.out.println("Imprimiendo en C");
                                          for(Simbolo sim : hijo2.tablaMain.tabla){
                                            System.out.println(sim.id);
                                          }
                                          System.out.println("fin en C");*/

                                          RESULT = (Container)hijo2;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D ::= ASSIGN N PC 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container n = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*result = num*/
                          Nodo tem = new Nodo();
                          tem.setTag(TagAbstract.ASSIGN);
                          tem.addHijo(((Container)n).nodo);
                          RESULT = new Container(tem);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // D ::= ASSIGN TRUE PC 
            {
              Container RESULT =null;
		/*result = true*/
                          RESULT = new Container(new Nodo(TagAbstract.ASSIGN,"TRUE"));

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // D ::= ASSIGN FALSE PC 
            {
              Container RESULT =null;
		/*result = false*/
                          RESULT = new Container(new Nodo(TagAbstract.ASSIGN,"FALSE"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // D ::= PC 
            {
              Container RESULT =null;
		/*result = null*/
                          RESULT = new Container(new Nodo(TagAbstract.NULO,"-1"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L ::= IF L1 L2 END IF PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*result = if(L1,body(L2))*/
                                            Nodo tem = new Nodo();
                                            tem.setTag("IF");
                                            tem.addHijo(((Container)hijo1).nodo);
                                            Nodo tem2 = new Nodo();
                                            tem2.setTag(TagAbstract.CUERPO);
                                            if(hijo2 != null){
                                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                              tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                              }
                                            }
                                            tem.addHijo(tem2);
                                            RESULT = new Container(tem);
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L2 ::= L L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(L+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L2 ::= E L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(E+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L2 ::= M L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(M+l2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L2 ::= P L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = arreglo(P+L2)*/
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L2 ::= E4 PC L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo tem = new Nodo();
                            tem.addHijo(((Container)hijo1).nodo);
                            if(hijo2 != null){
                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                              }
                            }
                            RESULT = new Container(tem);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L2 ::= E3 PC L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo(((Container)hijo1).nodo);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L2 ::= ELSE L4 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/**/
                                  Nodo tem = new Nodo();
                                  Nodo tem2 = new Nodo();
                                  tem2.setTag(TagAbstract.ELSE);
                                  Nodo cuerpo = new Nodo();
                                  cuerpo.setTag(TagAbstract.CUERPO);
                                  if(hijo != null){
                                    for(int i=0; i < ((Container)hijo).nodo.hijos.size();i++){
                                      cuerpo.addHijo(((Container)hijo).nodo.hijos.get(i));
                                    }
                                  }
                                  tem2.addHijo((Nodo)cuerpo);
                                  tem.addHijo((Nodo)tem2);
                                  RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L2 ::= ELSIF L1 L2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.setTag(TagAbstract.ELSEIF);
                                tem.addHijo(((Container)hijo1).nodo);
                                Nodo tem2 = new Nodo();
                                tem2.setTag(TagAbstract.CUERPO);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                tem.addHijo(tem2);
                                Nodo res = new Nodo();
                                res.addHijo((Nodo)tem);
                                RESULT = new Container((Nodo)res);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L2 ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L4 ::= E L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(E+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L4 ::= L L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(L+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L4 ::= M L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(M+l2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L4 ::= P L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = arreglo(P+L2)*/
                              Nodo tem = new Nodo();
                              tem.addHijo(((Container)hijo1).nodo);
                              if(hijo2 != null){
                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                }
                              }
                              RESULT = new Container(tem);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L4 ::= E4 PC L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo(((Container)hijo1).nodo);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L4 ::= E3 PC L4 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo tem = new Nodo();
                                tem.addHijo(((Container)hijo1).nodo);
                                if(hijo2 != null){
                                  for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                    tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                  }
                                }
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L4 ::= 
            {
              Container RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= X ASSIGN E2 PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = asign(X, E2)*/
                                                Nodo tem = new Nodo(TagAbstract.ASSINGVALUE,"::=");
                                                tem.addHijo(((Container)hijo1).nodo);
                                                tem.addHijo(((Container)hijo2).nodo);
                                                RESULT = new Container(tem);
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= TRUE 
            {
              Container RESULT =null;
		 /*result = true*/
                      RESULT = new Container(new Nodo(TagAbstract.TRUE,"1"));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= FALSE 
            {
              Container RESULT =null;
		 /*result = false*/RESULT = new Container(new Nodo(TagAbstract.FALSE,"0")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E5 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* */RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= X PA 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*result = ejec(X, PA)*/
                                  Nodo tem = new Nodo();
                                  tem.setTag(TagAbstract.EJECUCION);
                                  tem.addHijo(((Container)hijo1).nodo);
                                  if (hijo2 != null) {
                                    tem.addHijo(((Container)hijo2).nodo);
                                  }
                                  RESULT = new Container(tem);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PA ::= LP PA2 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = pa2*/
                                        RESULT = hijo != null ? (Container)hijo : null;
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PA2 ::= E5 COMA PA2 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(L3+PA2)*/
                                    Nodo tem = new Nodo(TagAbstract.ARGUMENTOS,"arg");
                                    tem.addHijo(((Container)hijo1).nodo);
                                    if(hijo2 != null){
                                      for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                        tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                      }
                                    }
                                    RESULT = new Container((Nodo)tem);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PA2 ::= E5 RP 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*rsult = arreglo(L3)*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PA2 ::= RP 
            {
              Container RESULT =null;
		 /*result = null*/
                                    RESULT = null;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= E6 OP E6 E7 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E7.op(op(E6, E6),E7.E6) */
                                            Nodo tem = new Nodo(TagAbstract.OP,t);
                                            tem.addHijo(((Container)hijo1).nodo);
                                            tem.addHijo(((Container)hijo2).nodo);
                                            if(hijo3 == null){
                                              RESULT = new Container(tem);
                                            }else{
                                              ((Container)hijo3).nodo.addHijo((Nodo)tem);
                                              RESULT = (Container)hijo3;
                                            }

                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E5 ::= E6 MOD E6 E7 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            Nodo tem = new Nodo(TagAbstract.MOD,t);
                                            tem.addHijo(((Container)hijo1).nodo);
                                            tem.addHijo(((Container)hijo2).nodo);
                                            if(hijo3 == null){
                                              RESULT = new Container(tem);
                                            }else{
                                              ((Container)hijo3).nodo.addHijo((Nodo)tem);
                                              RESULT = (Container)hijo3;
                                            }
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E5 ::= E6 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Container)hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= N 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l3*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E6 ::= E4 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E4*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= LP E5 RP 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*result = E5*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E6 ::= X 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = E5*/ RESULT = (Container)hijo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= OP E6 E7 
            {
              Container RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(op,E6)*/
                                  Nodo tem = new Nodo(TagAbstract.OP,t);
                                  tem.addHijo(((Container)hijo).nodo);
                                  if (hijo2 != null) {
                                    tem.addHijo(((Container)hijo2).nodo);
                                  }
                                  RESULT = new Container(tem);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= MOD E6 E7 
            {
              Container RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = arreglo(mod,E6)*/
                                  Nodo tem = new Nodo(TagAbstract.MOD,t);
                                  tem.addHijo(((Container)hijo).nodo);
                                  if (hijo2 != null) {
                                    tem.addHijo(((Container)hijo2).nodo);
                                  }
                                  RESULT = new Container(tem);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= 
            {
              Container RESULT =null;
		 /*result = null*/ RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= RETURN E5 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  Nodo tem = new Nodo(TagAbstract.RETURN,"0");
                                  tem.addHijo(((Container)hijo).nodo);
                                  RESULT = new Container(tem);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // M ::= LOOP M1 END LOOP PC 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                              Nodo tem = new Nodo(TagAbstract.LOOP,"0");
                                              Nodo tem2 = new Nodo();
                                              tem2.setTag(TagAbstract.CUERPO);
                                              for(int i=0; i < ((Container)hijo).nodo.hijos.size();i++){
                                                tem2.addHijo(((Container)hijo).nodo.hijos.get(i));
                                              }
                                              tem.addHijo(tem2);
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // M ::= FOR X IN N1 LOOP M1 END LOOP PC 
            {
              Container RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Container t = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                            Nodo tem = new Nodo(TagAbstract.FOR,"0");
                                                            Nodo tem2 = new Nodo();
                                                            tem.addHijo(((Container)t).nodo);
                                                            tem.addHijo(((Container)hijo1).nodo);
                                                            tem2.setTag(TagAbstract.CUERPO);
                                                            if(hijo2 != null){
                                                              for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                                tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                              }
                                                            }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = new Container(tem);
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // M ::= WHILE L6 LOOP M1 END LOOP PC 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                          Nodo tem = new Nodo();
                                                          tem.setTag(TagAbstract.WHILE);
                                                          tem.addHijo(((Container)hijo1).nodo);
                                                          Nodo tem2 = new Nodo();
                                                          tem2.setTag(TagAbstract.CUERPO);
                                                          if(hijo2 != null){
                                                            for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                              tem2.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                            }
                                                          }

                                                            tem.addHijo((Nodo)tem2);
                                                            RESULT = new Container(tem);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // M1 ::= M M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // M1 ::= E M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // M1 ::= L M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // M1 ::= P M1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem = new Nodo();
                                              tem.addHijo(((Container)hijo1).nodo);
                                              if(hijo2 != null){
                                                for(int i=0; i < ((Container)hijo2).nodo.hijos.size();i++){
                                                  tem.addHijo(((Container)hijo2).nodo.hijos.get(i));
                                                }
                                              }
                                              RESULT = new Container(tem);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // M1 ::= 
            {
              Container RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L1 ::= E5 OPREL E5 AND L1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* result = AND (OPREL(e5,e5), L1)*/
                                                      Nodo tem = new Nodo();
                                                      tem.setTag(TagAbstract.AND);
                                                      Nodo tem2 = new Nodo(TagAbstract.OPREL,t);
                                                      tem2.addHijo(((Container)hijo1).nodo);
                                                      tem2.addHijo(((Container)hijo2).nodo);
                                                      tem.addHijo((Nodo)tem2);
                                                      tem.addHijo(((Container)hijo3).nodo);

                                                      RESULT = new Container(tem);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L1 ::= E5 OPREL E5 OR L1 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  /*result = OR (OPREL(e5,e5), L1)*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag(TagAbstract.OR);
                                                    Nodo tem2 = new Nodo(TagAbstract.OPREL,t);
                                                    tem2.addHijo(((Container)hijo1).nodo);
                                                    tem2.addHijo(((Container)hijo2).nodo);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo(((Container)hijo3).nodo);

                                                    RESULT = new Container(tem);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // L1 ::= E5 OPREL E5 THEN 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  /* result = oprel(e5, e5)*/
                                Nodo tem = new Nodo(TagAbstract.OPREL,t);
                                tem.addHijo(((Container)hijo1).nodo);
                                tem.addHijo(((Container)hijo2).nodo);
                                RESULT = new Container(tem);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // L3 ::= N 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container n = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ /* Voy aqui */
                            RESULT = (Container)n;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // L3 ::= X 
            {
              Container RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container x = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */
                            RESULT = (Container)x;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // L6 ::= E5 OPREL E5 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                              Nodo tem2 = new Nodo(TagAbstract.OPREL,t);
                                              tem2.addHijo(((Container)hijo1).nodo);
                                              tem2.addHijo(((Container)hijo2).nodo);
                                              RESULT = new Container(tem2);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L6 ::= E5 OPREL E5 AND L6 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag(TagAbstract.AND);
                                                    Nodo tem2 = new Nodo(TagAbstract.OPREL,t);
                                                    tem2.addHijo(((Container)hijo1).nodo);
                                                    tem2.addHijo(((Container)hijo2).nodo);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo(((Container)hijo3).nodo);
                                                    RESULT = new Container(tem);
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // L6 ::= E5 OPREL E5 OR L6 
            {
              Container RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Container hijo1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo3 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*result = l1*/
                                                    Nodo tem = new Nodo();
                                                    tem.setTag(TagAbstract.OR);
                                                    Nodo tem2 = new Nodo(TagAbstract.OPREL,t);
                                                    tem2.addHijo(((Container)hijo1).nodo);
                                                    tem2.addHijo(((Container)hijo2).nodo);
                                                    tem.addHijo((Nodo)tem2);
                                                    tem.addHijo(((Container)hijo3).nodo);
                                                    RESULT = new Container(tem);
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // P ::= GET LP X RP PC 
            {
              Container RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo(TagAbstract.GET, hijo.nodo.valor);
                                      RESULT =  new Container(tem);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // P ::= PUT LP P2 RP PC 
            {
              Container RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                      Nodo tem = new Nodo(TagAbstract.PUT, lp);
                                      tem.addHijo(((Container)hijo).nodo);
                                      RESULT = new Container(tem);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // P1 ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // P2 ::= EXP 
            {
              Container RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Container(new Nodo(TagAbstract.STRING,i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // P2 ::= E2 
            {
              Container RESULT =null;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container hijo = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Container) hijo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
