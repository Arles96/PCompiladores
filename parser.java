
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\004\004\000\002\004\007\000\002\004\004" +
    "\000\002\005\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\005\000\002\007\003\000\002\010\005\000\002\010" +
    "\003\000\002\011\003\000\002\012\003\000\002\013\005" +
    "\000\002\014\006\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\005\000\002\017" +
    "\005\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\005\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\010\000\002\022\004\000\002" +
    "\022\010\000\002\022\005\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\005\000\002\024\005" +
    "\000\002\025\003\000\002\025\003\000\002\026\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
    "\027\004\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\007\000\002\030\007\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\056\005\001\002\000\004\002\222\001" +
    "\002\000\004\152\007\001\002\000\004\002\000\001\002" +
    "\000\036\007\ufff4\030\ufff4\034\ufff4\054\ufff4\065\ufff4\076" +
    "\ufff4\112\ufff4\120\ufff4\133\ufff4\134\ufff4\136\ufff4\137\ufff4" +
    "\140\ufff4\152\ufff4\001\002\000\004\065\011\001\002\000" +
    "\010\040\016\046\014\152\007\001\002\000\004\137\212" +
    "\001\002\000\004\002\uffff\001\002\000\022\015\044\035" +
    "\032\055\037\076\035\100\031\150\042\151\034\152\007" +
    "\001\002\000\010\040\016\046\014\152\007\001\002\000" +
    "\004\152\007\001\002\000\006\134\020\137\ufff2\001\002" +
    "\000\004\152\007\001\002\000\004\137\ufff3\001\002\000" +
    "\004\007\023\001\002\000\004\065\024\001\002\000\006" +
    "\046\026\152\007\001\002\000\004\002\ufffd\001\002\000" +
    "\022\015\044\035\032\055\037\076\035\100\031\150\042" +
    "\151\034\152\007\001\002\000\006\046\026\152\007\001" +
    "\002\000\004\002\ufffb\001\002\000\014\030\201\034\175" +
    "\076\177\112\061\152\007\001\002\000\004\112\061\001" +
    "\002\000\004\120\152\001\002\000\004\131\143\001\002" +
    "\000\016\015\134\035\032\055\037\076\035\100\031\152" +
    "\007\001\002\000\022\015\044\035\032\055\037\076\035" +
    "\100\031\150\042\151\034\152\007\001\002\000\014\030" +
    "\070\034\060\054\064\112\061\152\007\001\002\000\022" +
    "\015\044\035\032\055\037\076\035\100\031\150\042\151" +
    "\034\152\007\001\002\000\022\015\044\035\032\055\037" +
    "\076\035\100\031\150\042\151\034\152\007\001\002\000" +
    "\004\131\051\001\002\000\004\002\ufffa\001\002\000\004" +
    "\152\007\001\002\000\022\015\044\035\032\055\037\076" +
    "\035\100\031\150\042\151\034\152\007\001\002\000\004" +
    "\002\ufff7\001\002\000\004\140\050\001\002\000\004\002" +
    "\ufff5\001\002\000\004\152\053\001\002\000\004\132\054" +
    "\001\002\000\004\132\uffc8\001\002\000\004\140\055\001" +
    "\002\000\022\015\uffca\035\uffca\055\uffca\076\uffca\100\uffca" +
    "\150\uffca\151\uffca\152\uffca\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\ufff8\001\002\000\006\112\061\152\007" +
    "\001\002\000\026\030\ufff0\034\ufff0\054\ufff0\061\ufff0\076" +
    "\ufff0\112\ufff0\133\ufff0\136\ufff0\140\ufff0\152\ufff0\001\002" +
    "\000\024\030\uffd3\034\uffd3\054\uffd3\076\uffd3\112\uffd3\133" +
    "\uffd3\136\uffd3\140\uffd3\152\uffd3\001\002\000\022\005\077" +
    "\011\102\015\103\035\032\055\037\076\035\100\031\152" +
    "\007\001\002\000\022\005\uffcf\011\uffcf\015\uffcf\035\uffcf" +
    "\055\uffcf\076\uffcf\100\uffcf\152\uffcf\001\002\000\004\136" +
    "\074\001\002\000\014\030\070\034\060\054\064\112\061" +
    "\152\007\001\002\000\022\030\uffd4\034\uffd4\054\uffd4\076" +
    "\uffd4\112\uffd4\136\uffd4\140\uffd4\152\uffd4\001\002\000\006" +
    "\112\061\152\007\001\002\000\014\030\070\034\060\054" +
    "\064\112\061\152\007\001\002\000\022\005\uffd0\011\uffd0" +
    "\015\uffd0\035\uffd0\055\uffd0\076\uffd0\100\uffd0\152\uffd0\001" +
    "\002\000\022\005\uffd2\011\uffd2\015\uffd2\035\uffd2\055\uffd2" +
    "\076\uffd2\100\uffd2\152\uffd2\001\002\000\006\112\061\152" +
    "\007\001\002\000\016\030\uffd5\034\uffd5\054\uffd5\076\uffd5" +
    "\112\uffd5\152\uffd5\001\002\000\026\005\uffeb\011\uffeb\015" +
    "\uffeb\035\uffeb\055\uffeb\076\uffeb\100\uffeb\150\uffeb\151\uffeb" +
    "\152\uffeb\001\002\000\016\015\114\035\032\055\037\076" +
    "\035\100\031\152\007\001\002\000\022\005\077\011\102" +
    "\015\103\035\032\055\037\076\035\100\031\152\007\001" +
    "\002\000\022\005\077\011\102\015\103\035\032\055\037" +
    "\076\035\100\031\152\007\001\002\000\014\030\070\034" +
    "\060\054\064\112\061\152\007\001\002\000\004\055\106" +
    "\001\002\000\022\005\077\011\102\015\103\035\032\055" +
    "\037\076\035\100\031\152\007\001\002\000\026\005\uffe9" +
    "\011\uffe9\015\uffe9\035\uffe9\055\uffe9\076\uffe9\100\uffe9\150" +
    "\uffe9\151\uffe9\152\uffe9\001\002\000\004\140\107\001\002" +
    "\000\026\005\uffe5\011\uffe5\015\uffe5\035\uffe5\055\uffe5\076" +
    "\uffe5\100\uffe5\150\uffe5\151\uffe5\152\uffe5\001\002\000\016" +
    "\015\114\035\032\055\037\076\035\100\031\152\007\001" +
    "\002\000\026\005\uffe6\011\uffe6\015\uffe6\035\uffe6\055\uffe6" +
    "\076\uffe6\100\uffe6\150\uffe6\151\uffe6\152\uffe6\001\002\000" +
    "\016\015\114\035\032\055\037\076\035\100\031\152\007" +
    "\001\002\000\016\015\114\035\032\055\037\076\035\100" +
    "\031\152\007\001\002\000\004\055\117\001\002\000\016" +
    "\015\114\035\032\055\037\076\035\100\031\152\007\001" +
    "\002\000\026\005\uffe4\011\uffe4\015\uffe4\035\uffe4\055\uffe4" +
    "\076\uffe4\100\uffe4\150\uffe4\151\uffe4\152\uffe4\001\002\000" +
    "\004\140\120\001\002\000\026\005\uffe1\011\uffe1\015\uffe1" +
    "\035\uffe1\055\uffe1\076\uffe1\100\uffe1\150\uffe1\151\uffe1\152" +
    "\uffe1\001\002\000\026\005\uffe3\011\uffe3\015\uffe3\035\uffe3" +
    "\055\uffe3\076\uffe3\100\uffe3\150\uffe3\151\uffe3\152\uffe3\001" +
    "\002\000\026\005\uffe2\011\uffe2\015\uffe2\035\uffe2\055\uffe2" +
    "\076\uffe2\100\uffe2\150\uffe2\151\uffe2\152\uffe2\001\002\000" +
    "\026\005\uffea\011\uffea\015\uffea\035\uffea\055\uffea\076\uffea" +
    "\100\uffea\150\uffea\151\uffea\152\uffea\001\002\000\026\005" +
    "\uffe8\011\uffe8\015\uffe8\035\uffe8\055\uffe8\076\uffe8\100\uffe8" +
    "\150\uffe8\151\uffe8\152\uffe8\001\002\000\026\005\uffe7\011" +
    "\uffe7\015\uffe7\035\uffe7\055\uffe7\076\uffe7\100\uffe7\150\uffe7" +
    "\151\uffe7\152\uffe7\001\002\000\014\030\070\034\060\054" +
    "\064\112\061\152\007\001\002\000\022\005\uffd1\011\uffd1" +
    "\015\uffd1\035\uffd1\055\uffd1\076\uffd1\100\uffd1\152\uffd1\001" +
    "\002\000\004\002\ufff6\001\002\000\026\005\uffdc\011\uffdc" +
    "\015\uffdc\035\uffdc\055\uffdc\076\uffdc\100\uffdc\150\uffdc\151" +
    "\uffdc\152\uffdc\001\002\000\016\015\134\035\032\055\037" +
    "\076\035\100\031\152\007\001\002\000\016\015\134\035" +
    "\032\055\037\076\035\100\031\152\007\001\002\000\004" +
    "\076\137\001\002\000\016\015\134\035\032\055\037\076" +
    "\035\100\031\152\007\001\002\000\026\005\uffd8\011\uffd8" +
    "\015\uffd8\035\uffd8\055\uffd8\076\uffd8\100\uffd8\150\uffd8\151" +
    "\uffd8\152\uffd8\001\002\000\004\140\140\001\002\000\026" +
    "\005\uffd6\011\uffd6\015\uffd6\035\uffd6\055\uffd6\076\uffd6\100" +
    "\uffd6\150\uffd6\151\uffd6\152\uffd6\001\002\000\026\005\uffd7" +
    "\011\uffd7\015\uffd7\035\uffd7\055\uffd7\076\uffd7\100\uffd7\150" +
    "\uffd7\151\uffd7\152\uffd7\001\002\000\026\005\uffd9\011\uffd9" +
    "\015\uffd9\035\uffd9\055\uffd9\076\uffd9\100\uffd9\150\uffd9\151" +
    "\uffd9\152\uffd9\001\002\000\010\112\145\146\146\152\144" +
    "\001\002\000\004\132\uffc7\001\002\000\004\132\uffc5\001" +
    "\002\000\004\132\uffc6\001\002\000\004\132\150\001\002" +
    "\000\004\140\151\001\002\000\022\015\uffc9\035\uffc9\055" +
    "\uffc9\076\uffc9\100\uffc9\150\uffc9\151\uffc9\152\uffc9\001\002" +
    "\000\012\110\154\111\155\112\061\152\007\001\002\000" +
    "\004\133\162\001\002\000\004\140\161\001\002\000\004" +
    "\140\160\001\002\000\006\133\uffd4\140\157\001\002\000" +
    "\026\005\uffe0\011\uffe0\015\uffe0\035\uffe0\055\uffe0\076\uffe0" +
    "\100\uffe0\150\uffe0\151\uffe0\152\uffe0\001\002\000\026\005" +
    "\uffde\011\uffde\015\uffde\035\uffde\055\uffde\076\uffde\100\uffde" +
    "\150\uffde\151\uffde\152\uffde\001\002\000\026\005\uffdf\011" +
    "\uffdf\015\uffdf\035\uffdf\055\uffdf\076\uffdf\100\uffdf\150\uffdf" +
    "\151\uffdf\152\uffdf\001\002\000\006\112\061\152\007\001" +
    "\002\000\004\140\164\001\002\000\026\005\uffdd\011\uffdd" +
    "\015\uffdd\035\uffdd\055\uffdd\076\uffdd\100\uffdd\150\uffdd\151" +
    "\uffdd\152\uffdd\001\002\000\004\061\166\001\002\000\004" +
    "\112\167\001\002\000\004\116\173\001\002\000\004\076" +
    "\171\001\002\000\016\015\134\035\032\055\037\076\035" +
    "\100\031\152\007\001\002\000\026\005\uffdb\011\uffdb\015" +
    "\uffdb\035\uffdb\055\uffdb\076\uffdb\100\uffdb\150\uffdb\151\uffdb" +
    "\152\uffdb\001\002\000\004\112\174\001\002\000\004\076" +
    "\uffef\001\002\000\006\112\061\152\007\001\002\000\016" +
    "\015\134\035\032\055\037\076\035\100\031\152\007\001" +
    "\002\000\016\015\uffcb\035\uffcb\055\uffcb\076\uffcb\100\uffcb" +
    "\152\uffcb\001\002\000\014\030\201\034\175\076\177\112" +
    "\061\152\007\001\002\000\006\112\061\152\007\001\002" +
    "\000\014\030\201\034\175\076\177\112\061\152\007\001" +
    "\002\000\016\015\uffcc\035\uffcc\055\uffcc\076\uffcc\100\uffcc" +
    "\152\uffcc\001\002\000\016\015\uffce\035\uffce\055\uffce\076" +
    "\uffce\100\uffce\152\uffce\001\002\000\026\005\uffda\011\uffda" +
    "\015\uffda\035\uffda\055\uffda\076\uffda\100\uffda\150\uffda\151" +
    "\uffda\152\uffda\001\002\000\014\030\201\034\175\076\177" +
    "\112\061\152\007\001\002\000\016\015\uffcd\035\uffcd\055" +
    "\uffcd\076\uffcd\100\uffcd\152\uffcd\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffc\001\002\000\004\113\214\001" +
    "\002\000\006\120\217\140\215\001\002\000\006\120\ufff1" +
    "\140\ufff1\001\002\000\010\040\uffec\046\uffec\152\uffec\001" +
    "\002\000\010\040\uffee\046\uffee\152\uffee\001\002\000\004" +
    "\112\061\001\002\000\004\140\221\001\002\000\010\040" +
    "\uffed\046\uffed\152\uffed\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\007\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\012\007\016\010" +
    "\011\014\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\210\007\032\016\040\021\044\022\037\030" +
    "\035\001\001\000\012\004\207\007\016\010\011\014\014" +
    "\001\001\000\004\007\021\001\001\000\002\001\001\000" +
    "\006\007\016\010\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\024\007\016\010" +
    "\011\014\026\001\001\000\002\001\001\000\016\006\042" +
    "\007\032\016\040\021\044\022\037\030\035\001\001\000" +
    "\012\005\027\007\016\010\011\014\026\001\001\000\002" +
    "\001\001\000\014\007\061\012\066\024\177\025\064\027" +
    "\175\001\001\000\004\012\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\032\016\132\021\134\022" +
    "\131\023\130\001\001\000\016\006\127\007\032\016\040" +
    "\021\044\022\037\030\035\001\001\000\014\007\061\012" +
    "\066\024\065\025\064\026\062\001\001\000\016\006\056" +
    "\007\032\016\040\021\044\022\037\030\035\001\001\000" +
    "\016\006\055\007\032\016\040\021\044\022\037\030\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\046\001\001\000\016\006\045\007\032\016\040\021\044" +
    "\022\037\030\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\061" +
    "\012\066\024\125\025\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\032\016\100\017\075\021\103" +
    "\022\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\061\012\066\024\065\025\064\026\072\001\001" +
    "\000\002\001\001\000\012\007\061\012\066\024\070\025" +
    "\064\001\001\000\014\007\061\012\066\024\065\025\064" +
    "\026\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\061\012\066\025\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\032\016\112\020\124\021" +
    "\114\022\111\001\001\000\014\007\032\016\100\017\123" +
    "\021\103\022\077\001\001\000\014\007\032\016\100\017" +
    "\122\021\103\022\077\001\001\000\014\007\061\012\066" +
    "\024\065\025\064\026\107\001\001\000\002\001\001\000" +
    "\014\007\032\016\100\017\104\021\103\022\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\032\016\112\020\110\021\114\022\111\001\001" +
    "\000\002\001\001\000\014\007\032\016\112\020\121\021" +
    "\114\022\111\001\001\000\014\007\032\016\112\020\120" +
    "\021\114\022\111\001\001\000\002\001\001\000\014\007" +
    "\032\016\112\020\115\021\114\022\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\061\012\066\024\065\025" +
    "\064\026\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\032\016\132\021\134\022" +
    "\131\023\141\001\001\000\014\007\032\016\132\021\134" +
    "\022\131\023\140\001\001\000\002\001\001\000\014\007" +
    "\032\016\132\021\134\022\131\023\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\061" +
    "\012\155\025\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\061\012" +
    "\066\025\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\032\016\132\021\134" +
    "\022\131\023\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\061\012\066\024\205" +
    "\025\064\001\001\000\014\007\032\016\132\021\134\022" +
    "\131\023\204\001\001\000\002\001\001\000\014\007\061" +
    "\012\066\024\177\025\064\027\203\001\001\000\012\007" +
    "\061\012\066\024\201\025\064\001\001\000\014\007\061" +
    "\012\066\024\177\025\064\027\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\061" +
    "\012\066\024\177\025\064\027\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\212" +
    "\001\001\000\004\015\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= F 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // F ::= PROCEDURE X IS G 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // G ::= C G 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // G ::= FUNCTION X RETURN IS H 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // G ::= BEGIN I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // H ::= C H 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // H ::= BEGIN I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= L I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= M I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= E I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= P I 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= END X PC 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // X ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = i; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // X2 ::= X COMA X2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // X2 ::= X 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("X2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Z ::= DATATYPES 
            {
              String RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = d; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Z",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n; */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N1 ::= NUM DOUBD NUM 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= X2 DOS Z D 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // D ::= ASSIGN N PC 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // D ::= PC 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L ::= IF L5 L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L2 ::= L L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L2 ::= E L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L2 ::= M L2 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L2 ::= ELSE L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L2 ::= ELSIF L5 L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L2 ::= END IF PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L4 ::= E L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L4 ::= L L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L4 ::= M L4 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L4 ::= END IF PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= X ASSIGN N PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= X ASSIGN TRUE PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= X ASSIGN FALSE PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= X ASSIGN L3 OP L3 PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // M ::= LOOP M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // M ::= FOR N IN N1 LOOP M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // M ::= WHILE L6 M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // M1 ::= M M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // M1 ::= E M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // M1 ::= L M1 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // M1 ::= END LOOP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L1 ::= L3 OPREL L3 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L3 ::= N 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = n */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L3 ::= X 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* RETURN = x */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L5 ::= L1 L5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L5 ::= AND L1 L5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L5 ::= OR L1 L5 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L5 ::= THEN 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L5",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L6 ::= L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L6 ::= AND L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L6 ::= OR L1 L6 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L6 ::= LOOP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L6",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // P ::= GET LP P1 RP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // P ::= PUT LP P2 RP PC 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // P1 ::= ID 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // P2 ::= ID 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // P2 ::= EXP 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // P2 ::= NUM 
            {
              String RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
